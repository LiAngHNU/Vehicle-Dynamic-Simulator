function [y1] = myNeuralNetworkFunctiondata1(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 08-Sep-2022 17:38:51.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 3xQ matrix, input #1
% and returns:
%   y = 3xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-189.25082935164;-431.303744156024;27.5702798293296];
x1_step1.gain = [0.0042762027323333;0.0032715943942377;0.142041601595878];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.7998525915485568127;0.45497346077691913635;-0.36944345013028423441;0.007918729834733370318;0.17605140534182250889;-0.489648055616130784;-1.0290237226096226042;-1.0881134007567103694];
IW1_1 = [-2.5214783182038824627 -0.26803122628101011538 -0.60737541353415880341;-0.020693048908951024167 -1.6656972247734724846 0.033687115045584463402;0.018214113471169076502 1.4121904762782357956 -0.042217607366708889693;0.01345034242620753509 1.0287226718172453044 -0.049780271896420008604;0.013162871831934446279 1.0167659025618904778 -0.064003777891760024743;-0.76124278501921704976 -0.083977686648741986519 0.048865468452433009905;-0.024295076368466800992 -1.8340419860047074696 -0.0059011479382637581706;-0.024273080039113287959 -1.8755722963283416593 -0.017148339813393545517];

% Layer 2
b2 = [0.19540688175666512394;-5.3535036384879139959;-0.34429748268637866415];
LW2_1 = [-0.011495017293988118307 -113.9493663557906018 -251.57271945406606051 324.46777419125129427 -154.25332843256634874 -0.05575304340385877494 115.48751376967464921 -91.142432978599359217;0.0047002475765590343015 17.52632678938486066 98.804050311634142645 -244.27918429250183863 148.17358228515666951 -0.060004069222967172659 35.821190536001537907 -44.984947688847363167;-0.26593579326085142744 -0.64517379527365459335 -1.2863419893798624383 1.5162972881918341805 -0.89886872656098948386 -1.5208546819746178169 1.0838791696882854598 -1.0087015571077078135];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0895681140079678;0.0881430202074904;0.0722774554072567];
y1_step1.xoffset = [-11.1148108126002;-11.1206117436708;-11.9717819638686];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
