PARSFILE
! CarSim 2020.0
! Vehicle Configuration: I_I
! Revision 125462, December 17, 2019

DATASET_TITLE HUR Simulator
CATEGORY * * * HUR Datasets
TITLE HUR Simulator <* * * HUR Datasets>

! Echo: D:\Program Files\Mechanical Simulation\CarSim_2020.0\CarSim_2020.0_Data_FSAE\Results\Run_099bc55d-9d6b-4e83-96fb-5fcf2d5bf2c1\2022-11-09_15.37.47_echo.par
! This run was made 15:37 on November 09, 2022.

!------------------------------------------------------------------------------------
! SYSTEM PARAMETERS (SIMULATION OPTIONS)
!------------------------------------------------------------------------------------
! [D] (default) indicates that a parameter was not set by reading from a Parsfile.
! [I] indicates that changing the parameter via an Event triggers an initialization.
! [L] indicates that the parameter is locked once the simulation starts.

ID_EVENT            0 ; - ! ID number that can be assigned to the current event
ID_RUN              0 ; - ! ID number that can be assigned to a simulation run
IPRINT             50 ! Print interval: output time step TSTEP_WRITE = TSTEP*IPRINT;
                      ! set IPRINT = 0 for debug (TSTEP_WRITE = T_DT) [L]
NDIGITS_ECHO       10 ! [D] Max. no. of digits for printing floating-point numbers
! NIMPORT          10 ! Number of variables activated for import (read only)
! NOUT_ANI_LIVE   424 ! Number of variables sent live to animators (read only)
! NOUT_EXPORT     110 ! Number of output variables activated for export (read only)
! NOUT_WRITE     2375 ! Number of output variables written to file (read only)
OPT_ALL_WRITE       1 ! Write all outputs to file? 1 -> all, 0 -> only activated
                      ! outputs
OPT_BUFFER_WRITE    0 ! [D] Retain output data in memory buffer until end of run? 0
                      ! -> no, write immediately to file, 1 -> yes, buffer during
                      ! run and write to file after run finishes [L]
OPT_CHECK_MATH      2 ! [D] Check for math exceptions? 2 -> as errors, 1 -> as
                      ! warnings, 0 -> no checks
OPT_ECHO_ALL_PARS   0 ! [D] Echo all parameters in this VS Solver? 0 -> no, 1 -> yes
OPT_ECHO_ALL_UNITS  0 ! [D] Echo list of units and scale factors? 0 -> no, 1 -> yes
OPT_ECHO_ANI_LIVE   0 ! [D] Echo variables sent live to video? 0 -> no, 1 -> yes
OPT_ECHO_ICS        0 ! [D] Echo initial conditions? 0 -> no, 1 -> yes
OPT_ECHO_KEYWORDS_LC 0 ! [D] Echo all keywords in lowercase? -> 0 -> no, 1 -> yes
OPT_ECHO_WRITE      0 ! [D] Echo written outputs? 0 -> no, 1 -> yes
OPT_ENABLE_PYTHON   0 ! [D] Enable access to embedded Python? 0 -> no, 1 -> yes
OPT_ERROR_DIALOG    1 ! [D] Show pop-up dialog box if fatal error occurs: 1 -> yes
                      ! (normal use), 0 -> no (for batch runs)
OPT_ERROR_DUP_DEF   0 ! [D] Handle case where DEFINE_IMPORT, DEFINE_OUTPUT,
                      ! DEFINE_PARAMETER, or DEFINE_VARIABLE attempts to define a
                      ! variable with a name that is already in use. 0 -> write
                      ! warning in log file, 1 -> generate error [L]
OPT_ERROR_SHOW_ALL  0 ! [D] Show pop-up boxes for all errors: 0 -> only show the
                      ! first, 1 -> also show subsequent errors
OPT_INT_METHOD      2 ! Numerical integration method: 0 -> AB-2; 1 -> RK-2; 2 ->
                      ! AM-2; 3 -> AM-3; 4 -> AM-4; -1 -> Euler. AB-2 and Euler are
                      ! full-step methods (TSTEP = 0.0005s is typical); AM and RK-2
                      ! use half-steps (TSTEP = 0.001s is typical, i.e., half-step
                      ! = 0.0005s) [L]
OPT_IO_UPDATE       0 ! Option for exchanging I/O variables with other tools: 1 ->
                      ! use T_DT (half step), 0 -> use TSTEP (full step) [L]
OPT_LINEARIZATION   0 ! [D] Numerical linearization applied for: 0 -> all ODEs of
                      ! the model, 1 -> only selected derivatives [I]
OPT_LOG_DEBUG       0 ! [D] Log file writing: 0 -> normal, 1 -> crash expected
OPT_LOG_VERBOSE     2 ! [D] Log file verbosity: 2 -> errors + most events + parsfile
                      ! names, 0 -> errors only, 1 -> errors + events, 3 ->
                      ! advanced diagnostics
OPT_LOG_WARNINGS    1 ! [D] Write warnings into log file? 1 -> yes, 0 -> no
OPT_PAUSE           0 ! [D] Pause at end of run with window open? 0 -> no, 1 -> yes
OPT_SKIP_INIT_DYN   0 ! [D] Skip initial dynamic calculations (for some RT systems)?
                      ! 0 -> no, 1 -> yes
OPT_SKIP_TSTART     0 ! [D] Skip calculations at T = TSTART when running under
                      ! external software? 0 -> no, 1 -> skip [L]
OPT_SORT_WRITE      1 ! [D] Sort written outputs? 1 -> alphabetical, 0 -> as entered
OPT_STOP            1 ! Option for stopping the run: 0 -> stop when T reaches TSTOP;
                      ! 1 -> stop when T reaches TSTOP or station reaches SSTOP; -1
                      ! -> run until stopped using VS Commands or external control
OPT_VS_FILETYPE     3 ! Type of output file: 1-> 64-bit VS, 2-> 32-bit VS,3 ->
                      ! 32-bit ERD, 4 -> text CSV (no binary), 0 -> no output file
OPT_WRITE           1 ; - ! [D] Write outputs when T > TSTART_WRITE? 1 -> write, 0
                      ! -> don't write; change this using VS Commands or Events
TSTART              0 ; s ! Starting time for the simulation clock
TSTART_T_EVENT      0 ; s ! [D] Event clock reset time: T_EVENT = T - TSTART_T_EVENT
TSTART_WRITE        0 ; s ! Start writing outputs when this time is reached
TSTEP          0.0005 ; s ! Time step for numerical integration [L]
! TSTEP_WRITE   0.025 ; s ! CALC -- Time interval in output time-series file
TSTOP             300 ; s ! Stop when this time is reached
! T_DT        0.00025 ; s ! CALC -- Time increment between calculations

!------------------------------------------------------------------------------------
! SYSTEM CONSTANTS
!------------------------------------------------------------------------------------
! DR      57.29577951 ; - ! Deg/rad symbol to use in formulas (read-only)
! G           9.80665 ; - ! Symbol for gravity constant m/s/s (read-only)
! PI      3.141592654 ; - ! Symbol for PI to use in formulas (read-only)
! ZERO              0 ; - ! Symbol for zero to use in VS Events (read-only)

!------------------------------------------------------------------------------------
! VEHICLE INITIALIZATION, LIMITS, AND GRAVITY
!------------------------------------------------------------------------------------
OPT_INIT_CONFIG     1 ! Initialize vehicle height, pitch, roll, and deflection
                      ! variables? 1 -> yes, 0 -> no, start 'as is' [I]
OPT_INIT_SPEED      1 ! Initialize vehicle speed variables? 1 -> yes, 0 -> no, start
                      ! 'as is' [I]
ROLL_MAX_STOP      80 ; deg ! [D] Maximum roll angle magnitude: stop the run if
                      ! reached
VLOW_STOP          -1 ; km/h ! [D] Stop the run if the absolute vehicle speed drops
                      ! to this value; specify -1 to disable this feature
R_GRAVITY           1 ; - ! [D] Scale factor applied to acceleration of gravity [I]

!------------------------------------------------------------------------------------
! VEHICLE CONFIGURATION
!------------------------------------------------------------------------------------
! VEHICLE_NAXLES    2 ! Number of vehicle axles (read-only)
! VEHICLE_NUNITS    1 ! Number of vehicle units (read-only)
! VEHICLE_AXLE_MAP(1) 2 ! Number of axles on unit 1 (read-only)

!------------------------------------------------------------------------------------
! VEHICLE
!------------------------------------------------------------------------------------
! The instant center of gravity is calculated every time step using the sprung mass
! + axles and wheels + payloads. Output variables for the vehicle such as Vx, Vy,
! Vz, Ax, Ay, and Az are based on the motion of this instant CG for the total laden
! (TL) unit.

! H_CG_TL 238.4747248 ; mm ! CALC -- Height of TL CG
! LX_CG_TL 897.1619366 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL -5.56061967e-08 ; mm ! CALC -- Y coordinate of TL CG
! M_TL          299.5 ; kg ! CALC -- TL mass
! IXX_TL  45.02974705 ; kg-m2 ! CALC -- TL roll inertia moment
! IYY_TL  145.9202874 ; kg-m2 ! CALC -- TL pitch inertia moment
! IZZ_TL  164.6702321 ; kg-m2 ! CALC -- TL yaw inertia moment

!------------------------------------------------------------------------------------
! SPRUNG MASS
!------------------------------------------------------------------------------------
! The following parameters apply for the sprung mass without payloads, designated
! SU (sprung mass unladen). If any payloads are attached, the combined inertia
! properties (SU sprung mass + payloads) are also listed and designated SL (sprung
! mass laden).

H_CG_SU           225 ; mm ! Height of CG of sprung mass, unladen (SU) [I]
LX_CG_SU          900 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU             0 ; mm ! Y coordinate of SU CG [I]
M_SU              165 ; kg ! Mass of unladen sprung mass (SU) [I]
IXX_SU           16.5 ; kg-m2 ! Roll inertia for unladen sprung mass [I]
IYY_SU          85.25 ; kg-m2 ! Pitch inertia for SU [I]
IZZ_SU          89.99 ; kg-m2 ! Yaw inertia for SU [I]
IXY_SU              0 ; kg-m2 ! XY product of inertia for SU [I]
IXZ_SU              0 ; kg-m2 ! XZ product of inertia for SU [I]
IYZ_SU              0 ; kg-m2 ! YZ product of inertia for SU [I]

! N_PAYLOADS        1 ! No. of payloads attached to this sprung mass (read only)
! H_CG_SL 229.8979592 ; mm ! CALC -- Height of laden sprung mass CG (SL)
! LX_CG_SL 916.3265306 ; mm ! CALC -- X distance SL CG is behind origin
! Y_CG_SL           0 ; mm ! CALC -- Y coord. of laden sprung mass CG
! M_SL            245 ; kg ! CALC -- Mass of laden sprung mass (SL)
! IXX_SL  23.26212245 ; kg-m2 ! CALC -- Roll inertia for SL
! IYY_SL  102.8968163 ; kg-m2 ! CALC -- Pitch inertia for SL
! IZZ_SL  103.1246939 ; kg-m2 ! CALC -- Yaw inertia for SL
! IXY_SL            0 ; kg-m2 ! CALC -- XY product of inertia for SL
! IXZ_SL  4.640408163 ; kg-m2 ! CALC -- XZ product of inertia for SL
! IYZ_SL            0 ; kg-m2 ! CALC -- YZ product of inertia for SL

!------------------------------------------------------------------------------------
! PAYLOADS
!------------------------------------------------------------------------------------
! NLOAD             1 ! Number of installed payloads (read only)
DEFINE_PAYLOADS     1 ! VS Command to add payloads

PAYLOAD_NAME(1)     1 ; FSAE Driver Mass & Inertia
LX_CG_PL(1)       950 ; mm ! Distance payload mass center is behind origin (-X) [I]
Y_CG_PL(1)          0 ; mm ! Y coordinate of payload mass center [I]
Z_CG_PL(1)        240 ; mm ! Z coordinate of payload mass center [I]
M_PL(1)            80 ; kg ! Mass of payload [I]
IXX_PL(1)        6.75 ; kg-m2 ! Roll moment of inertia of payload [I]
IYY_PL(1)        17.5 ; kg-m2 ! Pitch moment of inertia of payload [I]
IZZ_PL(1)          13 ; kg-m2 ! Yaw moment of inertia of payload [I]
IXY_PL(1)           0 ; kg-m2 ! XY product of inertia of payload [I]
IXZ_PL(1)         4.6 ; kg-m2 ! XZ product of inertia of payload [I]
IYZ_PL(1)           0 ; kg-m2 ! YZ product of inertia of payload [I]

!------------------------------------------------------------------------------------
! AERODYNAMICS
!------------------------------------------------------------------------------------
! Aerodynamic coefficients are largely defined with the nonlinear Configurable
! Functions xx_AERO_SHAPING (where xx = FX, FY, etc.). Wind speed and direction are
! defined with the functions WIND_HEADING and WIND_SPEED.

D_AIR           1.206 ; kg/m3 ! Air mass density

AREA_AERO         0.5 ; m2 ! Frontal cross-section area
H_REF_AERO          0 ; mm ! Height of aerodynamic reference point
L_REF_AERO       1700 ; mm ! Aerodynamic reference length
X_REF_AERO       -850 ; mm ! X coordinate of aerodynamic reference point
Y_REF_AERO          0 ; mm ! Y coordinate of aerodynamic reference point

!------------------------------------------------------------------------------------
! SUSPENSION GEOMETRY AND INERTIA
!------------------------------------------------------------------------------------
! Suspension geometry is specified with the following parameters along with some
! nonlinear Configurable Functions that can use tables of measured or simulated
! suspension kinematical relationships. For independent suspensions, these include
! the functions CAMBER, SUSP_DIVE, SUSP_LAT, SUSP_X, and TOE. All coordinate
! parameters are relative to the origin of the sprung mass (SM) coordinate system.

! Generic/independent suspension for axle 1
OPT_JNC_DESIGN(1)   1 ! Specify JNC_DESIGN (jounce when the wheel center is at the
                      ! reference Z coordinate H_WC) explicitly? 1 -> yes, 0 -> no,
                      ! calculate JNC_DESIGN from the ride spring data [I]
A_CAMBER(1,1)   -1.25 ; deg ! Static camber for wheel L1 [I]
A_CAMBER(1,2)   -1.25 ; deg ! Static camber for wheel R1 [I]
A_TOE(1,1)      -0.05 ; deg ! Static toe for wheel L1 [I]
A_TOE(1,2)      -0.05 ; deg ! Static toe for wheel R1 [I]
H_WC(1,1)         260 ; mm ! Reference Z coordinate of wheel center L1 (in SM
                      ! coordinate system) [I]
H_WC(1,2)         260 ; mm ! Reference Z coordinate of wheel center R1 [I]
! ISPIN(1,1)      0.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire L1 [I]
! ISPIN(1,2)      0.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire R1 [I]
! ISPIN_XXZZ(1,1)   0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire L1 [I]
! ISPIN_XXZZ(1,2)   0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire R1 [I]
IW(1,1)          0.35 ; kg-m2 ! Spin inertia for wheel L1 [I]
IW(1,2)          0.35 ; kg-m2 ! Spin inertia for wheel R1 [I]
IW_XXZZ(1,1)        0 ; kg-m2 ! IXX/IZZ inertia for wheel L1 [I]
IW_XXZZ(1,2)        0 ; kg-m2 ! IXX/IZZ inertia for wheel R1 [I]
JNC_DESIGN(1,1)     0 ; mm ! Jounce when center of wheel L1 is at the reference
                      ! coordinate H_WC [I]
JNC_DESIGN(1,2)     0 ; mm ! Jounce when center of wheel R1 is at H_WC [I]
L_TRACK(1)       1280 ; mm ! Track width, wheel-center to wheel-center, axle 1 [I]
LX_AXLE(1)          0 ; mm ! [D] X dist. axle 1 is behind the sprung-mass origin [I]
M_US_IND(1,1)   1.425 ; kg ! Unsteered suspension mass for wheel L1 [I]
M_US_IND(1,2)   1.425 ; kg ! Unsteered suspension mass for wheel R1 [I]
M_US_STR(1,1)  12.825 ; kg ! Steered mass for wheel L1 [I]
M_US_STR(1,2)  12.825 ; kg ! Steered mass for wheel R1 [I]
! M_US(1)        28.5 ; kg ! CALC -- Total unsprung mass for axle 1
! R_US_STR(1)     0.9 ; - ! CALC -- Steered fraction of unsprung mass, axle 1
! Y_CG_SUSP(1)      0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 1 [I]
Y_CL_SUSP(1)        0 ; mm ! Y coord. for suspension centerline, axle 1 [I]

! Generic/independent suspension for axle 2
OPT_JNC_DESIGN(2)   1 ! Specify JNC_DESIGN explicitly for axle 2? [I]
A_CAMBER(2,1)    -1.5 ; deg ! Static camber for wheel L2 [I]
A_CAMBER(2,2)    -1.5 ; deg ! Static camber for wheel R2 [I]
A_TOE(2,1)       0.05 ; deg ! Static toe for wheel L2 [I]
A_TOE(2,2)       0.05 ; deg ! Static toe for wheel R2 [I]
H_WC(2,1)         260 ; mm ! Reference Z coordinate of wheel center L2 [I]
H_WC(2,2)         260 ; mm ! Reference Z coordinate of wheel center R2 [I]
! ISPIN(2,1)      0.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire L2 [I]
! ISPIN(2,2)      0.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire R2 [I]
! ISPIN_XXZZ(2,1)   0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire L2 [I]
! ISPIN_XXZZ(2,2)   0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire R2 [I]
IW(2,1)          0.35 ; kg-m2 ! Spin inertia for wheel L2 [I]
IW(2,2)          0.35 ; kg-m2 ! Spin inertia for wheel R2 [I]
IW_XXZZ(2,1)        0 ; kg-m2 ! IXX/IZZ inertia for wheel L2 [I]
IW_XXZZ(2,2)        0 ; kg-m2 ! IXX/IZZ inertia for wheel R2 [I]
JNC_DESIGN(2,1)     0 ; mm ! Jounce when center of wheel L2 is at H_WC [I]
JNC_DESIGN(2,2)     0 ; mm ! Jounce when center of wheel R2 is at H_WC [I]
L_TRACK(2)       1240 ; mm ! Track width, wheel-center to wheel-center, axle 2 [I]
LX_AXLE(2)       1700 ; mm ! X dist. axle 2 is behind the sprung-mass origin [I]
M_US_IND(2,1)     1.3 ; kg ! Unsteered suspension mass for wheel L2 [I]
M_US_IND(2,2)     1.3 ; kg ! Unsteered suspension mass for wheel R2 [I]
M_US_STR(2,1)    11.7 ; kg ! Steered mass for wheel L2 [I]
M_US_STR(2,2)    11.7 ; kg ! Steered mass for wheel R2 [I]
! M_US(2)          26 ; kg ! CALC -- Total unsprung mass for axle 2
! R_US_STR(2)     0.9 ; - ! CALC -- Steered fraction of unsprung mass, axle 2
! Y_CG_SUSP(2)      0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 2 [I]
Y_CL_SUSP(2)        0 ; mm ! Y coord. for suspension centerline, axle 2 [I]

!------------------------------------------------------------------------------------
! SUSPENSION SPRINGS AND DAMPERS
!------------------------------------------------------------------------------------
! Suspension springs and dampers are specified with the following parameters, along
! with the nonlinear Configurable Functions CMP_DAMP, CMP_JSTOP, CMP_RSTOP,
! CMP_SPR_SEAT, FD, F_JNC_STOP, F_REB_STOP, FS_COMP, FS_EXT, and MX_AUX. All
! suspension models calculate compliance effects using the functions CC_FX, CI_FY,
! CI_MZ, CS_FY, CS_MZ, and CT_FX. Independent suspensions also use the functions
! CD_MY, C_LAT, and C_LONG.

! Generic/independent suspension for axle 1
OPT_EXT_SP(1,1)     0 ! External option for spring L1: 0 -> use built-in spring
                      ! (with or without external model), 1 -> disable built-in
                      ! spring and use an external model [I]
OPT_EXT_SP(1,2)     0 ! Disable built-in spring R1? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1) 1 ! [D] Subtract offset from each compliance table to
                                ! avoid double-counting kinematical offset? 1 ->
                                ! Yes, subtract the offset, 0 -> No, use compliance
                                ! table as is [I]
CMP_OFFSET(1,1)     0 ; mm ! Initial compression of external spring L1 [I]
CMP_OFFSET(1,2)     0 ; mm ! Initial compression of external spring R1 [I]
! CMP_DESIGN(1,1) 20.80485053 ; mm ! CALC -- Compression at design load, spring L1
! CMP_DESIGN(1,2) 20.80485053 ; mm ! CALC -- Compression at design load, spring R1
DAUX(1)             0 ; N-m-s/deg ! Auxiliary roll damping, axle 1
! FSA_DESIGN(1) 761.4575294 ; N ! CALC -- Design Load (suspension, unladen), axle 1
! FSA_L(1) 1107.574588 ; N ! CALC -- Static suspension load, laden, axle  1
FS_OFFSET(1,1)      0 ; N ! Force offset subtracted from built-in spring L1 [I]
FS_OFFSET(1,2)      0 ; N ! Force offset subtracted from built-in spring R1 [I]
! FS_STATIC(1,1) 907.8480231 ; N ! CALC -- Static spring force, laden, spring L1
! FS_STATIC(1,2) 907.8480231 ; N ! CALC -- Static spring force, laden, spring R1
! FZA_L(1) 1387.064113 ; N ! CALC -- Static ground load, laden, axle 1
! FZA_UL(1) 1040.947054 ; N ! CALC -- Static ground load, unladen, axle 1
! FZ_STATIC(1,1) 693.5320566 ; N ! CALC -- Static ground force, laden, wheel L1
! FZ_STATIC(1,2) 693.5320566 ; N ! CALC -- Static ground force, laden, wheel R1
! KA_ROLL(1) 630.8674375 ; N-m/deg ! CALC -- Total roll stiffness, axle 1
L_SPG_ADJ(1,1)      0 ; mm ! Upper seat height increase for spring L1 to reduce
                      ! spring compression [I]
L_SPG_ADJ(1,2)      0 ; mm ! Upper seat height increase for spring R1 [I]
SPRING_COMP_BETA(1,1) 2 ; mm ! Reference hysteretic compression (1/3 of the
                        ! compression needed to go from the lower force boundary to
                        ! the upper force boundary) for ride spring L1 
SPRING_COMP_BETA(1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R1
SPRING_EXT_BETA(1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L1
SPRING_EXT_BETA(1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R1

! Generic/independent suspension for axle 2
OPT_EXT_SP(2,1)     0 ! Disable built-in spring L2? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,2)     0 ! Disable built-in spring R2? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2) 1 ! [D] Adjust compliance tables to avoid
                                ! double-counting? 1 -> Adjust, 0 -> Use as is [I]
CMP_OFFSET(2,1)     0 ; mm ! Initial compression of external spring L2 [I]
CMP_OFFSET(2,2)     0 ; mm ! Initial compression of external spring R2 [I]
! CMP_DESIGN(2,1) 22.84372588 ; mm ! CALC -- Compression at design load, spring L2
! CMP_DESIGN(2,2) 22.84372588 ; mm ! CALC -- Compression at design load, spring R2
DAUX(2)             0 ; N-m-s/deg ! Auxiliary roll damping, axle 2
! FSA_DESIGN(2) 856.6397206 ; N ! CALC -- Design Load (suspension, unladen), axle 2
! FSA_L(2) 1295.054662 ; N ! CALC -- Static suspension load, laden, axle  2
FS_OFFSET(2,1)      0 ; N ! Force offset subtracted from built-in spring L2 [I]
FS_OFFSET(2,2)      0 ; N ! Force offset subtracted from built-in spring R2 [I]
! FS_STATIC(2,1) 1036.043729 ; N ! CALC -- Static spring force, laden, spring L2
! FS_STATIC(2,2) 1036.043729 ; N ! CALC -- Static spring force, laden, spring R2
! FZA_L(2) 1550.027562 ; N ! CALC -- Static ground load, laden, axle 2
! FZA_UL(2) 1111.612621 ; N ! CALC -- Static ground load, unladen, axle 2
! FZ_STATIC(2,1) 775.0137809 ; N ! CALC -- Static ground force, laden, wheel L2
! FZ_STATIC(2,2) 775.0137809 ; N ! CALC -- Static ground force, laden, wheel R2
! KA_ROLL(2) 605.2928765 ; N-m/deg ! CALC -- Total roll stiffness, axle 2
L_SPG_ADJ(2,1)      0 ; mm ! Upper seat height increase for spring L2 [I]
L_SPG_ADJ(2,2)      0 ; mm ! Upper seat height increase for spring R2 [I]
SPRING_COMP_BETA(2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L2
SPRING_COMP_BETA(2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R2
SPRING_EXT_BETA(2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L2
SPRING_EXT_BETA(2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R2

!------------------------------------------------------------------------------------
! STEERING
!------------------------------------------------------------------------------------
! The steering system is specified with the following parameters along with the
! nonlinear Configurable Functions F_BOOST_R, GEAR_ROT, M_BOOST_G, M_SW, M_TBAR,
! MZ_PARKING_STEER, RACK_KIN, RACK_TRAVEL, R_STEER_SPEED, STEER_COMP, and
! STEER_KIN. Open-loop steering can be specified with the function STEER_SW (angle
! control) or M_STR_IN (torque control)

OPT_M_SW_CALC       1 ! Reaction torque wheel with angle input (OPT_STEER = 0): 0 ->
                      ! from table, 1 -> calculated (see the steering Help document
                      ! for details) [I]
OPT_POWER           0 ! Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist [I]
OPT_STEER_DEF       1 ! Define steer angles of knuckles: 1 -> with respect to the
                      ! sprung-mass X-Y plane, 0 -> as rotation angle about a
                      ! kingpin axis [L]
BETA_COL          0.1 ; deg ! Ref hysteretic angle for steering column friction
D_COL           0.002 ; N-m-s/deg ! Steering column viscous damping
HYS_COL           0.2 ; N-m ! Steering column friction torque
A_STR_STOP_L      -45 ; deg ! [D] Steer angle limit during torque control (Left)
A_STR_STOP_R       45 ; deg ! [D] Steer angle limit during torque control (Right)
K_STR_STOP_L        0 ; N-m/deg ! [D] Steering stop stiffness (Left)
K_STR_STOP_R        0 ; N-m/deg ! [D] Steering stop stiffness (Right)

OPT_STEER_EXT(1)    0 ! Steer model option for axle 1: 0 -> Internal model, 1 -> Not
                      ! steered, 2 -> External gear/rack, 3 -> External except
                      ! tie-rod linkage, 4 -> Full external model [I]
OPT_CS(1)           0 ! [D] Compliance steer option, axle 1: 1 -> control L wheel, 2
                      ! -> control R wheel, 0 -> symmetric
OPT_RACK(1)         1 ! Steering gear type for axle 1: 0 -> Recirculating ball, 1 ->
                      ! Rack and pinion [I]
A_CASTER(1,1)       4 ; deg ! Caster for wheel L1 [I]
A_CASTER(1,2)       4 ; deg ! Caster for wheel R1 [I]
A_KPI(1,1)          8 ; deg ! Kingpin inclination for wheel L1 [I]
A_KPI(1,2)          8 ; deg ! Kingpin inclination for wheel R1 [I]
A_MZ_BETA(1,1)    0.1 ; deg ! Ref. hysteresis angle for L1 parking steer torque
A_MZ_BETA(1,2)    0.1 ; deg ! Ref. hysteresis angle for R1 parking steer torque
BETA_RACK(1)      0.1 ; mm ! Ref hys. displ. for steering rack friction, axle 1
D_RACK(1)         4.5 ; N-s/mm ! Steering rack viscous damping, axle 1
HYS_RACK(1)        10 ; N ! Steering rack hysteresis, axle 1
L_KPO(1,1)         80 ; mm ! Lateral kingpin offset to center of wheel L1 [I]
L_KPO(1,2)         80 ; mm ! Lateral kingpin offset to center of wheel R1 [I]
X_KPO(1,1)          0 ; mm ! X coord. of kingpin at center of wheel L1 [I]
X_KPO(1,2)          0 ; mm ! X coord. of kingpin at center of wheel R1 [I]

OPT_STEER_EXT(2)    0 ! Steer model option for axle 2: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]
OPT_CS(2)           0 ! [D] Compliant steer option, axle 2: 1 -> L, 2 -> R, 0 -> sym
OPT_RACK(2)         1 ! Steering gear type for axle 2: 0 -> Recirculating ball, 1 ->
                      ! Rack and pinion [I]
A_CASTER(2,1)       4 ; deg ! Caster for wheel L2 [I]
A_CASTER(2,2)       4 ; deg ! Caster for wheel R2 [I]
A_KPI(2,1)          8 ; deg ! Kingpin inclination for wheel L2 [I]
A_KPI(2,2)          8 ; deg ! Kingpin inclination for wheel R2 [I]
A_MZ_BETA(2,1)    0.1 ; deg ! Ref. hysteresis angle for L2 parking steer torque
A_MZ_BETA(2,2)    0.1 ; deg ! Ref. hysteresis angle for R2 parking steer torque
BETA_RACK(2)      0.1 ; mm ! Ref hys. displ. for steering rack friction, axle 2
D_RACK(2)         4.5 ; N-s/mm ! Steering rack viscous damping, axle 2
HYS_RACK(2)        10 ; N ! Steering rack hysteresis, axle 2
L_KPO(2,1)         80 ; mm ! Lateral kingpin offset to center of wheel L2 [I]
L_KPO(2,2)         80 ; mm ! Lateral kingpin offset to center of wheel R2 [I]
X_KPO(2,1)          0 ; mm ! X coord. of kingpin at center of wheel L2 [I]
X_KPO(2,2)          0 ; mm ! X coord. of kingpin at center of wheel R2 [I]

!------------------------------------------------------------------------------------
! TIRES
!------------------------------------------------------------------------------------
! Tire behavior is specified with the following parameters. Depending on the
! selected options, the following nonlinear Configurable Functions might also be
! used: FX_TIRE, FY_TIRE, FYG_TIRE, FZ_TIRE, KGAMMA, L_CONTACT_X, L_CONTACT_Y,
! L_RELAX_X, L_RELAX_Y, MX_TIRE, MXG_TIRE, MZ_TIRE, STI_TYPARR, and Z_PROFILE

VLOW_DRIFT_X      0.1 ; km/h ! [D] Low speed limit: allow near-static Fx to avoid
                      ! drift when stopped on a grade
VLOW_DRIFT_Y      0.1 ; km/h ! [D] Low speed limit: allow near-static Fy to avoid
                      ! drift when stopped on a grade

OPT_TIRE_MODEL(1,1) 6 ! Internal tire shear-model option, tire L1: 1 -> original
                      ! tabular model; 0 -> fully external model; 2 -> built-in
                      ! lags; 3 -> built-in for Fx, My, and lags; 6 -> tabular with
                      ! camber extensions; 7 -> built-in Pacejka 5.2; 8 -> TNO
                      ! Delft-Tyre; 9 -> COSIN FTire; 10 -> third-party STI tire
                      ! model [I]
OPT_TIRE_COMB(1,1)  1 ! Option for combined slip calculation: 0 -> use only
                      ! theoretical combined slip; 1 -> use transition between the
                      ! normalized and theoretical combined slip
OPT_TIRE_LAG_ALPHA(1,1) 1 ! Options for handling lag in tire alpha: 1 -> transition
                          ! to using instant slip when the time constant is less
                          ! than 12*TSTEP, 0 -> use fixed time constant 12*TSTEP at
                          ! high speeds
OPT_TIRE_LAG_KAPPA(1,1) 2 ! Options for handling lag in tire kappa: 2 -> use instant
                          ! slip when absolute kappa is decreasing and transition
                          ! to instant slip when the time constant is less than
                          ! 12*TSTEP; 1 -> transition to instant slip when the time
                          ! constant is less than 12*TSTEP; 0 -> use fixed time
                          ! constant 12*TSTEP at high speeds
CRO_FY(1,1)         1 ; - ! Roll-off of Fyg with normalized combined slip, tire L1
CRO_MX(1,1)         0 ; - ! Roll-off of Mxg with normalized combined slip
CRO_MZ(1,1)       100 ; - ! Roll-off of Mzg with normalized combined slip
OPT_MX_CONICITY(1,1) 0 ! [D] Is MX data decoupled from conicity? 0 -> No; 1 -> Yes
FZ_MAX(1,1)    100000 ; N ! Maximum allowed vertical force, tire L1 [I]
FZ_REF(1,1)      6500 ; N ! Reference vertical force: Not used directly in the VS
                      ! Math Model; provided as a standard reference for advanced
                      ! users to scale other parameters and Configurable Functions
                      ! for this tire
IT(1,1)          0.25 ; kg-m2 ! Spin inertia for tire L1 [I]
IT_XXZZ(1,1)        0 ; kg-m2 ! XX/ZZ inertia for tire L1 [I]
M_TIRE(1,1)         0 ; kg ! Mass of tire L1
MU_REF_X(1,1)       1 ; - ! Ground friction during meas. of Fx data, tire L1
MU_REF_Y(1,1)       1 ; - ! Ground friction during meas. of Fy data, tire L1
R0(1,1)           265 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1)          260 ; mm ! Effective rolling radius (Vx/AVy), tire L1 [I]
RR_C(1,1)       0.004 ; - ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,1)          1 ; - ! Switch: 0 -> do not add the effect of tire Fx to the
                      ! rolling resistance moment MyRR; 1 add the effect
RR_V(1,1)     2.5e-05 ; h/km ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c +
                      ! RR_v*Vx)
R_TIRE_COMB(1,1)  1.1 ; - ! Combined slip transition factor: Factor used to
                      ! transition from normalized to theoretical combined slip
VLOW_ALPHA(1,1)     2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1)    0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1)     2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,2) 6 ! Internal tire shear-model option, R1 [I]
OPT_TIRE_COMB(1,2)  1 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2) 2 ! Options for handling lag in kappa
CRO_FY(1,2)         1 ; - ! Roll-off of Fyg with normalized combined slip, tire R1
CRO_MX(1,2)         0 ; - ! Roll-off of Mxg with normalized combined slip
CRO_MZ(1,2)       100 ; - ! Roll-off of Mzg with normalized combined slip
OPT_MX_CONICITY(1,2) 0 ! [D] Is MX data decoupled from conicity? 0 -> No; 1 -> Yes
FZ_MAX(1,2)    100000 ; N ! Maximum allowed vertical force, tire R1 [I]
FZ_REF(1,2)      6500 ; N ! Reference vertical force
IT(1,2)          0.25 ; kg-m2 ! Spin inertia for tire R1 [I]
IT_XXZZ(1,2)        0 ; kg-m2 ! XX/ZZ inertia for tire R1 [I]
M_TIRE(1,2)         0 ; kg ! Mass of tire R1
MU_REF_X(1,2)       1 ; - ! Ground friction during meas. of Fx data, tire R1
MU_REF_Y(1,2)       1 ; - ! Ground friction during meas. of Fy data, tire R1
R0(1,2)           265 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2)          260 ; mm ! Effective rolling radius (Vx/AVy), tire R1 [I]
RR_C(1,2)       0.004 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2)          1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2)     2.5e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
R_TIRE_COMB(1,2)  1.1 ; - ! Combined slip transition factor
VLOW_ALPHA(1,2)     2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2)    0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2)     2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1) 6 ! Internal tire shear-model option, L2 [I]
OPT_TIRE_COMB(2,1)  1 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1) 2 ! Options for handling lag in kappa
CRO_FY(2,1)         1 ; - ! Roll-off of Fyg with normalized combined slip, tire L2
CRO_MX(2,1)         0 ; - ! Roll-off of Mxg with normalized combined slip
CRO_MZ(2,1)       100 ; - ! Roll-off of Mzg with normalized combined slip
OPT_MX_CONICITY(2,1) 0 ! [D] Is MX data decoupled from conicity? 0 -> No; 1 -> Yes
FZ_MAX(2,1)    100000 ; N ! Maximum allowed vertical force, tire L2 [I]
FZ_REF(2,1)      6500 ; N ! Reference vertical force
IT(2,1)          0.25 ; kg-m2 ! Spin inertia for tire L2 [I]
IT_XXZZ(2,1)        0 ; kg-m2 ! XX/ZZ inertia for tire L2 [I]
M_TIRE(2,1)         0 ; kg ! Mass of tire L2
MU_REF_X(2,1)       1 ; - ! Ground friction during meas. of Fx data, tire L2
MU_REF_Y(2,1)       1 ; - ! Ground friction during meas. of Fy data, tire L2
R0(2,1)           265 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1)          260 ; mm ! Effective rolling radius (Vx/AVy), tire L2 [I]
RR_C(2,1)       0.004 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1)          1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1)     2.5e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
R_TIRE_COMB(2,1)  1.1 ; - ! Combined slip transition factor
VLOW_ALPHA(2,1)     2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1)    0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1)     2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2) 6 ! Internal tire shear-model option, R2 [I]
OPT_TIRE_COMB(2,2)  1 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2) 2 ! Options for handling lag in kappa
CRO_FY(2,2)         1 ; - ! Roll-off of Fyg with normalized combined slip, tire R2
CRO_MX(2,2)         0 ; - ! Roll-off of Mxg with normalized combined slip
CRO_MZ(2,2)       100 ; - ! Roll-off of Mzg with normalized combined slip
OPT_MX_CONICITY(2,2) 0 ! [D] Is MX data decoupled from conicity? 0 -> No; 1 -> Yes
FZ_MAX(2,2)    100000 ; N ! Maximum allowed vertical force, tire R2 [I]
FZ_REF(2,2)      6500 ; N ! Reference vertical force
IT(2,2)          0.25 ; kg-m2 ! Spin inertia for tire R2 [I]
IT_XXZZ(2,2)        0 ; kg-m2 ! XX/ZZ inertia for tire R2 [I]
M_TIRE(2,2)         0 ; kg ! Mass of tire R2
MU_REF_X(2,2)       1 ; - ! Ground friction during meas. of Fx data, tire R2
MU_REF_Y(2,2)       1 ; - ! Ground friction during meas. of Fy data, tire R2
R0(2,2)           265 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2)          260 ; mm ! Effective rolling radius (Vx/AVy), tire R2 [I]
RR_C(2,2)       0.004 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2)          1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2)     2.5e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
R_TIRE_COMB(2,2)  1.1 ; - ! Combined slip transition factor
VLOW_ALPHA(2,2)     2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2)    0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2)     2 ; km/h ! Minimum Vx used in ODE for lagged kappa

!------------------------------------------------------------------------------------
! BRAKES
!------------------------------------------------------------------------------------
! The brake system is specified with the following parameters along with the
! nonlinear Configurable Functions BRAKE_COOL, F_BRAKE_PEDAL_BOOST, MY_BRAKE,
! MY_BRAKE_TEMP, PBK_CALIPER, and PBK_DL. Open-loop braking can be specified with
! the function F_BRAKE_PEDAL (pedal force) or PBK_CON (master cylinder pressure)

LOCK_BK_R_FREQ     33 ; - ! [D] Ratio: simulation update frequency (1/dt) divided by
                      ! torsional natural frequency of a wheel during brake lockup
LOCK_BK_ZETA        2 ; - ! [D] Torsional damping ratio of each wheel during lockup

OPT_BK_PEDAL        0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost

OPT_BK_DYN(1,1)     1 ! Fluid dynamics: 1 -> time constant for actuator pressure, 2
                      ! -> hydraulic resistance for flow into actuator, 0 -> no
                      ! dynamics (instant actuator response)
OPT_BK_THERMAL(1,1) 0 ! [D] Brake L1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1)  0.5 ; N-m ! Bearing/brake friction, wheel L1
TC_BK(1,1)       0.02 ; s ! Time constant for brake actuator L1
TLAG_BK(1,1)        0 ; s ! Transport time delay for fluid to reach brake L1 [I]

OPT_BK_DYN(1,2)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2) 0 ! [D] Brake R1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2)  0.5 ; N-m ! Bearing/brake friction, wheel R1
TC_BK(1,2)       0.02 ; s ! Time constant for brake actuator R1
TLAG_BK(1,2)        0 ; s ! Transport time delay for fluid to reach brake R1 [I]

OPT_BK_DYN(2,1)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1) 0 ! [D] Brake L2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1)  0.5 ; N-m ! Bearing/brake friction, wheel L2
TC_BK(2,1)       0.02 ; s ! Time constant for brake actuator L2
TLAG_BK(2,1)        0 ; s ! Transport time delay for fluid to reach brake L2 [I]

OPT_BK_DYN(2,2)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,2) 0 ! [D] Brake R2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,2)  0.5 ; N-m ! Bearing/brake friction, wheel R2
TC_BK(2,2)       0.02 ; s ! Time constant for brake actuator R2
TLAG_BK(2,2)        0 ; s ! Transport time delay for fluid to reach brake R2 [I]

!------------------------------------------------------------------------------------
! POWERTRAIN
!------------------------------------------------------------------------------------
! The powertrain model is specified with the following parameters along with up to
! 25 nonlinear Configurable Functions. Open-loop throttle can be specified with the
! function THROTTLE_ENGINE. Engine behavior is specified in part with the functions
! MENGINE and FUEL_RATE.

OPT_PT              2 ! Powertrain type: 0 -> Simple, 1 -> FWD, 2 -> RWD, 3 -> AWD,
                      ! 7 -> AVL Cruise
OPT_HEV             2 ! Propulsion types: 0 -> internal-combustion engine, 1 ->
                      ! hybrid electric, 2 -> electric
OPT_MOTOR_ON_AXLE   0 ! Is electric motor placed on each drive axle?: 0 -> No, a
                      ! motor per vehicle; 1 -> Yes, a motor per drive axle
R_MDRIVE            1 ; - ! Multiplier for driveshaft torque acting on sprung mass
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect. [I]
VLOW_IW             0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable

! The powertrain differentials are specified with the following parameters along
! with the functions M_DIFF_VISC, CLUTCH_CONTROL_DIFF, CLUTCH_TORQUE_DIFF,
! CLUTCH_TORQUE_DIFF2, CLUTCH_TWIN, and M_TWIN.

OPT_DIFF_INTERNAL(2) 1 ! Rear differential model: 1 -> internal, 0 -> external [I]
OPT_LOCKED_DIFF(2)  0 ! Is the rear differential locked? 0 -> no, 1 -> yes [I]
LOCKED_DIFF_DAMP(2) 0.8 ; N-m-s/deg ! Torsional damping for locked rear diff [I]
LOCKED_DIFF_K(2)   80 ; N-m/deg ! Torsional spring rate for locked rear diff [I]
R_EFF_F_DIFF(2)     1 ; - ! Forward efficiency of rear differential [I]
R_EFF_R_DIFF(2)  0.99 ; - ! Reverse efficiency of rear differential [I]
R_GEAR_DIFF(2)      4 ; - ! Gear ratio of 2nd rear differential [I]
IDS(2)          0.015 ; kg-m2 ! Spin inertia of rear driveshaft [I]
IHS_L(2)        0.002 ; kg-m2 ! Spin inertia of half left shaft, 2nd rear diff [I]
IHS_R(2)        0.002 ; kg-m2 ! Spin inertia of half right shaft, rear diff [I]

OPT_CLUTCH_DIFF(2)  1 ! Clutch control for rear differential: 0 -> table lookup or
                      ! external, 1 -> Torsen parameters, 2 -> yaw control [I]
OPT_TORSEN(2)       0 ! Torsen logic for rear differential clutch: 0 -> add initial
                      ! and sensing torque, 1-> use max of initial and sensing
                      ! torque [I]
M_BIAS_DIFF(2)      0 ; - ! Initial torque bias at rear differential [I]
R_TB_F(2)        1.75 ; - ! Ratio: torque bias at rear differential. (positive
                      ! torque input) [I]
R_TB_R(2)        1.85 ; - ! Ratio: torque bias at rear differential. (negative
                      ! torque input) [I]
OPT_TWIN_CLUTCH(2)  0 ! [D] Twin clutches on rear differential? 0 -> no, 1 -> yes
                      ! [I]

!------------------------------------------------------------------------------------
! ENGINE
!------------------------------------------------------------------------------------
INSTALL_ENGINE        ! VS Command to install an engine

OPT_THROTTLE_DELAY  0 ! [D] Use throttle time constants: 0 -> no, 1 -> yes

! The Hybrid/Electric powertrain system parameters.

TC_PWR_HYBRID_AV  0.8 ; s ! Time constant for hybrid/electric available power

! The hybrid/electric powertrain battery parameters.

N_BATTERY          40 ; - ! Number of battery packs [I]
T_BATTERY_INIT     40 ; C ! Initial battery temperature [I]
BATTERY_CHARGE_INIT 0.8 ; - ! Initial battery charged level [I]
V_MOTOR_MIN        60 ; V ! Minimum voltage for electric motor [I]
V_BATTERY_MIN       6 ; V ! Minimum voltage per battery pack [I]
V_BATTERY_MAX       9 ; V ! Maximum voltage per battery pack [I]

! The hybrid/electric power management control parameters.

PWR_EV_MODE        78 ; kW ! Maximum power allowance operated with EV mode [I]
PWR_HEV_DRV_MAX    78 ; kW ! Maximum power available with HEV system (used by speed
                      ! control only) [I]
KPW_PBK_HEV        16 ; kW/MPa ! Brake power demand per master cylinder control
                      ! pressure [I]
CF_HEV_PBK       0.08 ; - ! [D] Control shape factor for regenerative motor power
                      ! around zero speed [I]
REGEN_BRK_OFF     0.8 ; - ! Battery charged level to turn off regenerative brake [I]

! The hybrid/electric powertrain motor parameters.

INSTALL_ELECTRIC_DRIVE_MOTORS  ! VS Command to install electric motors

IMOTOR         0.0226 ; kg-m2 ! Spin inertia of electric motor [I]
TC_MOTOR         0.05 ; s ! Time constant for electric motor torque

!------------------------------------------------------------------------------------
! REFERENCE PATHS
!------------------------------------------------------------------------------------
! Up to 500 reference paths may be installed to provide station-based coordinate
! systems used to define 3D road surfaces, targets for the driver model, and
! positions of moving objects. In addition to the parameters shown in this section,
! the paths may include spline X-Y tables (keyword = SEGMENT_XY_TABLE).

! NPATH             1 ! Number of installed paths available for roads, driver model,
                      ! and moving objects (read only)
DEFINE_PATHS        1 ! VS Command to install reference paths

PATH_ID(1)          1 ; Autocross Course #1
OPT_PATH_START(1)   1 ! Set initial heading and X-Y coordinates of the path? 0 -> no
                      ! (legacy, using table data), 1 -> yes
OPT_PATH_LOOP(1)    1 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(1)      0 ; m ! Station at the start of this path
! SPATH_LAP(1) 1225.672281 ; m ! CALC -- Lap distance for this path
HEADING_START(1)    0 ; deg ! Heading at the start of this path
X_PATH_START(1)     0 ; m ! Global X coordinate at the start of this path
Y_PATH_START(1)     0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(1)       44 ! Number of segments in this path
SEGMENT_TYPE(1,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(1,1) 10 ; m ! Segment length
! S_SEGMENT_END(1,1) 10 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,1) 10 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,1) 0 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,1)  0 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,2)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,2) 10 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,2)  120 ; deg ! Central angle of arc
! S_SEGMENT_END(1,2) 30.94395102 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,2) 18.66025404 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,2) 15 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,2) 120 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,3)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,3) 100 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,3)   10 ; deg ! Central angle of arc
! S_SEGMENT_END(1,3) 48.39724354 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,3) 8.662157971 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,3) 29.27876097 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,3) 130 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,4)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(1,4) 20 ; m ! Segment length
! S_SEGMENT_END(1,4) 68.39724354 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,4) -4.193594222 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,4) 44.59964983 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,4) 130 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,5)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,5) -20 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,5)  180 ; deg ! Central angle of arc
! S_SEGMENT_END(1,5) 131.2290966 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,5) 26.4481835 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,5) 70.31115422 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,5) -50 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,6)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(1,6) 40 ; m ! Segment length
! S_SEGMENT_END(1,6) 171.2290966 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,6) 52.15968789 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,6) 39.66937649 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,6) -50 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,7)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,7) 5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,7)  150 ; deg ! Central angle of arc
! S_SEGMENT_END(1,7) 184.319066 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,7) 60.91394887 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,7) 43.75155543 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,7) 100 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,8)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(1,8) 60 ; m ! Segment length
! S_SEGMENT_END(1,8) 244.319066 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,8) 50.49505821 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,8) 102.8400206 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,8) 100 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,9)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,9) -5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,9)   90 ; deg ! Central angle of arc
! S_SEGMENT_END(1,9) 252.1730476 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,9) 54.55085609 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,9) 108.6323003 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,9) 10 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,10)  0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(1,10) 15 ; m ! Segment length
! S_SEGMENT_END(1,10) 267.1730476 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,10) 69.32297238 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,10) 111.2370229 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,10) 10 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,11)  3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,11) -100 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,11)  20 ; deg ! Central angle of arc
! S_SEGMENT_END(1,11) 302.0796327 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,11) 104.0526079 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,11) 111.2370229 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,11) -10 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,12)  0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(1,12) 30 ; m ! Segment length
! S_SEGMENT_END(1,12) 332.0796327 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,12) 133.5968405 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,12) 106.0275776 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,12) -10 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,13)  3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,13) 5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,13)  90 ; deg ! Central angle of arc
! S_SEGMENT_END(1,13) 339.9336143 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,13) 139.3891202 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,13) 110.0833755 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,13) 80 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,14)  3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,14) 10 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,14)   5 ; deg ! Central angle of arc
! S_SEGMENT_END(1,14) 340.8062789 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,14) 139.5029896 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,14) 110.9482998 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,14) 85 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,15)  3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,15) 10 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,15)  80 ; deg ! Central angle of arc
! S_SEGMENT_END(1,15) 354.768913 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,15) 132.1292331 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,15) 121.4791155 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,15) 165 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,16)  0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(1,16) 5 ; m ! Segment length
! S_SEGMENT_END(1,16) 359.768913 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,16) 127.2996039 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,16) 122.7732107 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,16) 165 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,17)  3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,17) -5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,17) 100 ; deg ! Central angle of arc
! S_SEGMENT_END(1,17) 368.4955592 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,17) 124.0621602 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,17) 129.7159312 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,17) 65 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,18)  0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(1,18) 30 ; m ! Segment length
! S_SEGMENT_END(1,18) 398.4955592 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,18) 136.7407081 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,18) 156.9051648 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,18) 65 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,19)  3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,19) -100 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,19)  15 ; deg ! Central angle of arc
! S_SEGMENT_END(1,19) 424.675498 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,19) 150.7670425 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,19) 178.9220996 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,19) 50 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,20)  0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(1,20) 50 ; m ! Segment length
! S_SEGMENT_END(1,20) 474.675498 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,20) 182.906423 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,20) 217.2243217 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,20) 50 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,21)  3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,21) -20 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,21) 160 ; deg ! Central angle of arc
! S_SEGMENT_END(1,21) 530.5260341 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,21) 217.0211642 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,21) 197.5281667 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,21) -110 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,22)  3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,22) 20 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,22)  90 ; deg ! Central angle of arc
! S_SEGMENT_END(1,22) 561.9419606 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,22) 228.9746138 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,22) 171.8939114 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,22) -20 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,23)  0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(1,23) 50 ; m ! Segment length
! S_SEGMENT_END(1,23) 611.9419606 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,23) 275.9592448 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,23) 154.7929042 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,23) -20 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,24)  3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,24) 25 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,24)  15 ; deg ! Central angle of arc
! S_SEGMENT_END(1,24) 618.4869453 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,24) 282.3308548 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,24) 153.3803523 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,24) -5 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,25)  3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,25) -50 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,25) 180 ; deg ! Central angle of arc
! S_SEGMENT_END(1,25) 775.566578 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,25) 273.6152806 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,25) 53.76088249 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,25) 175 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,26)  3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,26) 25 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,26)  20 ; deg ! Central angle of arc
! S_SEGMENT_END(1,26) 784.2932242 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,26) 264.9659109 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,26) 53.0041607 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,26) -165 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,27)  0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(1,27) 20 ; m ! Segment length
! S_SEGMENT_END(1,27) 804.2932242 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,27) 245.6473944 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,27) 47.8277798 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,27) -165 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,28)  3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,28) 25 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,28)  45 ; deg ! Central angle of arc
! S_SEGMENT_END(1,28) 823.9281783 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,28) 230.4672354 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,28) 36.17963414 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,28) -120 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,29)  3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,29) 10 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,29)  50 ; deg ! Central angle of arc
! S_SEGMENT_END(1,29) 832.6548246 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,29) 229.7305632 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,29) 27.75943271 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,29) -70 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,30)  3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,30) -10 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,30) 100 ; deg ! Central angle of arc
! S_SEGMENT_END(1,30) 850.1081171 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,30) 222.0701188 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,30) 14.49115374 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,30) -170 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,31)  0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(1,31) 30 ; m ! Segment length
! S_SEGMENT_END(1,31) 880.1081171 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,31) 192.5258862 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,31) 9.281708412 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,31) -170 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,32)  3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,32) 50 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,32)  65 ; deg ! Central angle of arc
! S_SEGMENT_END(1,32) 936.8313178 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,32) 152.9120038 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,32) -27.01772698 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,32) -105 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,33)  3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,33) -70 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,33) 110 ; deg ! Central angle of arc
! S_SEGMENT_END(1,33) 1071.22167 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,33) 45.14684538 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,33) -66.24103693 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,33) 145 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,34)  3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,34) 5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,34)  75 ; deg ! Central angle of arc
! S_SEGMENT_END(1,34) 1077.766655 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,34) 39.06502515 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,34) -66.50657493 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,34) -140 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,35)  3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,35) -5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,35) 150 ; deg ! Central angle of arc
! S_SEGMENT_END(1,35) 1090.856624 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,35) 31.15262399 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,35) -60.966252 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,35) 70 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,36)  3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,36) 5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,36) 150 ; deg ! Central angle of arc
! S_SEGMENT_END(1,36) 1103.946594 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,36) 23.24022284 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,36) -55.42592907 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,36) -140 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,37)  3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,37) -5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,37) 150 ; deg ! Central angle of arc
! S_SEGMENT_END(1,37) 1117.036563 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,37) 15.32782169 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,37) -49.88560614 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,37) 70 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,38)  3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,38) 5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,38) 150 ; deg ! Central angle of arc
! S_SEGMENT_END(1,38) 1130.126532 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,38) 7.415420538 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,38) -44.3452832 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,38) -140 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,39)  3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,39) -5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,39) 150 ; deg ! Central angle of arc
! S_SEGMENT_END(1,39) 1143.216502 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,39) -0.4969806147 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,39) -38.80496027 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,39) 70 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,40)  3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,40) 5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,40) 150 ; deg ! Central angle of arc
! S_SEGMENT_END(1,40) 1156.306471 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,40) -8.409381767 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,40) -33.26463734 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,40) -140 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,41)  3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,41) -5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,41)  75 ; deg ! Central angle of arc
! S_SEGMENT_END(1,41) 1162.851456 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,41) -14.491202 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,41) -33.53017535 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,41) 145 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,42)  0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(1,42) 10 ; m ! Segment length
! S_SEGMENT_END(1,42) 1172.851456 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,42) -22.68272244 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,42) -27.79441098 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,42) 145 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,43)  3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,43) -15.3 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,43) 145 ; deg ! Central angle of arc
! S_SEGMENT_END(1,43) 1211.571585 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,43) -13.90700296 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,43) 0.03861529587 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,43) 4.579998741e-13 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(1,44)  0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(1,44) 14 ; m ! Segment length
! S_SEGMENT_END(1,44) 1225.571585 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,44) 0.09299703603 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,44) 0.03861529587 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,44) 5.406942958e-14 ; deg ! CALC -- Heading at end of segment

!------------------------------------------------------------------------------------
! ROAD SURFACES
!------------------------------------------------------------------------------------
! Road surfaces define elevation Z and friction MU as functions of global X and Y
! coordinates, using a station-based coordinate system defined with a Reference
! Path. Up to 200 surfaces may be installed to represent sections, intersections,
! multiple lanes, etc. The Z and MU values for a road surface are provided with
! Configurable Functions MU_ROAD, ROAD_DZ, and ROAD_ZS. Boundaries that control
! automatic switching from one road surface to another make use of the Configurable
! Functions ROAD_L_BOUNDARY, ROAD_NEW_ID, and ROAD_NEW_S.

! NROAD             1 ! Number of installed road surfaces (read only)
NROAD_DZ            1 ! Number of ROAD_DZ datasets
DEFINE_ROADS        1 ! VS Command to define road surfaces
CURRENT_ROAD_ID     1 ! ROAD_ID for the vehicle during initialization [I]

ROAD_ID(1)          1 ; Autocross Course #1
ROAD_PATH_ID(1)     1 ; PATH_ID for: Autocross Course #1
ROAD_SMAX_NEW_ID(1) 0 ! [D] 0 -> No SMAX boundary, -1 -> stop if S > ROAD_SMAX, > 0
                      ! -> switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(1) 0 ! [D] 0 -> No SMIN boundary, -1 -> stop if S < ROAD_SMIN, > 0
                      ! -> switch to road with this ID if S < ROAD_SMIN
RR_SURF(1)          1 ; - ! Tire rolling resistance surface-effect coefficient
ROAD_N_DZ(1)        1 ! Number of ROAD_DZ layers added to the surface
RD_DZ_ID(1,1)       1 ; ROAD_DZ_ID for: Flat

!------------------------------------------------------------------------------------
! DRIVER MODEL: STEERING CONTROLLER AND VEHICLE REFERENCE PATH
!------------------------------------------------------------------------------------
! The built-in steering controller is a closed-loop path follower that calculates
! steering wheel angle in order to follow a specified lateral offset (LTARG_ID =
! LTARG_ID_DM) relative to a specified reference path (PATH_ID = PATH_ID_DM).
! Preview time is calculated with the Configurable Function TPREV.

N_LTARG             1 ! Number of LTARG datasets that are used in this run
PATH_ID_DM          1 ! PATH_ID of reference path for the driver and vehicle [I]
LTARG_ID_DM         1 ! LTARG_ID of reference LTARG for the driver model (0 -> no
                      ! reference LTARG)
OPT_INIT_PATH       1 ! Set Xo, Yo, and Yaw to match path PATH_ID_DM and target
                      ! LTARG_ID_DM at station SSTART? 1 -> yes, 0 -> no [I]
OPT_DIRECTION       1 ! Travel direction along path PATH_ID_DM: 0 -> set to 1 or -1
                      ! using SSTART and SSTOP values (legacy); 1 -> increasing
                      ! station, -1 -> decreasing station [I]
SSTART              0 ; m ! Start the vehicle at this station on path PATH_ID_DM and
                      ! possibly with target LTARG_ID_DM. The current station on
                      ! this path is the output variable "Station", which is also a
                      ! state variable. [I]
SSTOP        1225.572 ; m ! Use to set OPT_DIRECTION (if OPT_DIRECTION = 0); stop
                      ! when the vehicle reaches this station (if OPT_STOP = 1)

OPT_DM              1 ! Driver model option: 0 -> no driver model; 1 -> use linear
                      ! dynamic model and 10 preview points; 2 -> same as 1, but
                      ! with no rear steer effect (legacy); 3 -> use geometry and a
                      ! single preview point [I]
OPT_DM_2019         1 ! Option: 0 -> use the documented equations, 1 -> use legacy
                      ! equations (2019.0 and earlier)
OPT_DRIVER_ACTION   1 ! [D] Use steer from driver model (Steer_DM) when OPT_DM > 0?
                      ! 1 -> use Steer_DM, 0 -> ignore Steer_DM [I]
OPT_STR_BY_TRQ      0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM       150 ; deg ! Limit steering wheel angle for the steer controller
AV_SW_MAX_DM     1200 ; deg/s ! Limit steering wheel rate for the steer controller
TLAG_DM           0.2 ; s ! Lag time in steer controller [I]
VLOW_DM            10 ; km/h ! Speed for switching the steering controller between
                      ! time preview (high speed) and distance preview (low speed)
! XREF_DM          -0 ; mm ! CALC -- Local X coordinate of DM reference point
! C_F_DM   1045.27575 ; N/deg ! CALC -- total cornering stiffness, all front tires
! C_R_DM  1111.077794 ; N/deg ! CALC -- total cornering stiffness, all rear tires
! IZZ_DM  215.7225876 ; kg-m2 ! CALC -- yaw moment of inertia assumed by DM
! LX_CG_DM 897.1619366 ; mm ! CALC -- distance between front axle(s) and mass center
! LX_WB_DM       1700 ; mm ! CALC -- wheelbase
! M_DM          299.5 ; kg ! CALC -- mass assumed by DM (total static loads)

INSTALL_DM_OUTPUTS    ! VS Command to install XYZ outputs DM preview point(s)
! NPREVIEW          5 ! No. of installed preview sensors for external DM (read only)
INSTALL_DRIVER_PREVIEW_SENSORS 5 ! VS Command to add preview sensors for external DM
                                 ! 
OPT_DRIVER_PREVIEW_SENSORS 1 ! Calculate preview outputs? 1 -> yes, 0 -> no
LX_DRVSEN(1)      0.5 ; m ! Lead distance to driver preview point
LX_DRVSEN(2)        0 ; m ! Lead distance to driver preview point
LX_DRVSEN(3)     -0.9 ; m ! Lead distance to driver preview point
LX_DRVSEN(4)     -1.7 ; m ! Lead distance to driver preview point
LX_DRVSEN(5)       -2 ; m ! Lead distance to driver preview point

!------------------------------------------------------------------------------------
! DRIVER MODEL: SPEED CONTROLLER
!------------------------------------------------------------------------------------
N_SPEED_TARGET      1 ! Number of SPEED_TARGET datasets for driver model, moving
                      ! objects, and VS Commands that are written below: 0 - 200

INSTALL_SPEED_CONTROLLER  ! VS Command to install the built-in speed controller
! The speed controller uses throttle and braking controls to follow target speed
! specified as a function of time and/or station along reference path PATH_ID_DM.
! The target speed is specified with Configurable Function SPEED_TARGET. If the
! speed is based on the path, then acceleration limits are specified using
! functions SPEED_AX_BRAKE, SPEED_AX_THROTTLE, SPEED_AY_LEFT, and SPEED_AY_RIGHT.

OPT_SC              3 ! Speed controller: 0 -> Off (open-loop), 1 - 3, target speed
                      ! is function of time and station, 4 -> target speed is
                      ! determined using path preview, 5 -> use acceleration
                      ! command Ax_SCcmd [I]
OPT_AUTO_RESET_IC   1 ! [D] Reset integral of speed error Vx_Err when Vx_Err changes
                      ! sign AND |Vx_IErr| > VX_IERR_DEAD_SC: 1 -> yes, 0 -> no
OPT_BK_SC           0 ! [D] Braking and SC: 0 -> turn controller off while brakes
                      ! are applied, 1 -> controller can use the brakes
OPT_SC_ENGINE_BRAKING 0 ! Use engine braking to control speed? 0 -> no, 1 -> yes
SPEED_ID_SC         1 ! SPEED_TARGET_ID for speed controller [I]
SPEED_KP         0.14 ; s/m ! [D] Speed controller: proportional control gain
SPEED_KP3           0 ; s3/m3 ! [D] Speed controller: cubic (verr^3) control gain
SPEED_KI         0.16 ; 1/m ! [D] Speed controller: integral control gain
VX_IERR_DEAD_SC     1 ; m ! [D] Integral control deadband for auto reset

!------------------------------------------------------------------------------------
! MOTION SENSORS
!------------------------------------------------------------------------------------
GPS_REF_ALT       250 ; m ! [D] GPS altitude when Z = 0
GPS_REF_LAT    42.231 ; deg ! [D] GPS latitude when Y = GPS_REF_Y [I]
GPS_REF_LONG  -83.727 ; deg ! [D] GPS longitude at GPS_REF_X and GPS_REF_Y
GPS_RANGE_Y      5000 ; m ! [D] Range in Y allowed before a GPS reset
GPS_REF_X           0 ; m ! [D] X coordinate at GPS_REF_LAT and GPS_REF_LONG
GPS_REF_Y           0 ; m ! [D] Y coordinate at GPS_REF_LAT

! NSENSOR_M         0 ! Number of installed custom motion sensors (read only)

!------------------------------------------------------------------------------------
! REFERENCE POINTS AND IMPORTED FORCES
!------------------------------------------------------------------------------------
! NREF_PT          10 ! Number of installed reference points and forces (read only)
DEFINE_REFERENCE_POINTS 10 ! VS Command to add reference points with imported forces

REFERENCE_POINT_NAME(1) 1 ! [D] Parameter not used: provided to show a name
OPT_RP_BODY_TYPE(1) 1 ! [D] Type of body where point is located: 1 -> sprung mass, 4
                      ! -> mounted engine, 0 -> not used
OPT_RP_BODY_ID(1)   1 ! [D] ID number of body where point is located
OPT_RP_FORCE_N(1)   0 ! [D] Axes for imported Fx, Fy, Fz: 0 -> body, 1 -> N
X_RP(1)             0 ; mm ! [D] X coordinate of reference point
Y_RP(1)             0 ; mm ! [D] Y coordinate of reference point
Z_RP(1)             0 ; mm ! [D] Z coordinate of reference point

REFERENCE_POINT_NAME(2) 2 ! [D] Parameter not used: provided to show a name
OPT_RP_BODY_TYPE(2) 1 ! [D] Type of body where point is located
OPT_RP_BODY_ID(2)   1 ! [D] ID number of body where point is located
OPT_RP_FORCE_N(2)   0 ! [D] Axes for imported Fx, Fy, Fz: 0 -> body, 1 -> N
X_RP(2)             0 ; mm ! [D] X coordinate of reference point
Y_RP(2)             0 ; mm ! [D] Y coordinate of reference point
Z_RP(2)             0 ; mm ! [D] Z coordinate of reference point

REFERENCE_POINT_NAME(3) 3 ! [D] Parameter not used: provided to show a name
OPT_RP_BODY_TYPE(3) 1 ! [D] Type of body where point is located
OPT_RP_BODY_ID(3)   1 ! [D] ID number of body where point is located
OPT_RP_FORCE_N(3)   0 ! [D] Axes for imported Fx, Fy, Fz: 0 -> body, 1 -> N
X_RP(3)             0 ; mm ! [D] X coordinate of reference point
Y_RP(3)             0 ; mm ! [D] Y coordinate of reference point
Z_RP(3)             0 ; mm ! [D] Z coordinate of reference point

REFERENCE_POINT_NAME(4) 4 ! [D] Parameter not used: provided to show a name
OPT_RP_BODY_TYPE(4) 1 ! [D] Type of body where point is located
OPT_RP_BODY_ID(4)   1 ! [D] ID number of body where point is located
OPT_RP_FORCE_N(4)   0 ! [D] Axes for imported Fx, Fy, Fz: 0 -> body, 1 -> N
X_RP(4)             0 ; mm ! [D] X coordinate of reference point
Y_RP(4)             0 ; mm ! [D] Y coordinate of reference point
Z_RP(4)             0 ; mm ! [D] Z coordinate of reference point

REFERENCE_POINT_NAME(5) 5 ! [D] Parameter not used: provided to show a name
OPT_RP_BODY_TYPE(5) 1 ! [D] Type of body where point is located
OPT_RP_BODY_ID(5)   1 ! [D] ID number of body where point is located
OPT_RP_FORCE_N(5)   0 ! [D] Axes for imported Fx, Fy, Fz: 0 -> body, 1 -> N
X_RP(5)             0 ; mm ! [D] X coordinate of reference point
Y_RP(5)             0 ; mm ! [D] Y coordinate of reference point
Z_RP(5)             0 ; mm ! [D] Z coordinate of reference point

REFERENCE_POINT_NAME(6) 6 ! [D] Parameter not used: provided to show a name
OPT_RP_BODY_TYPE(6) 1 ! [D] Type of body where point is located
OPT_RP_BODY_ID(6)   1 ! [D] ID number of body where point is located
OPT_RP_FORCE_N(6)   0 ! [D] Axes for imported Fx, Fy, Fz: 0 -> body, 1 -> N
X_RP(6)             0 ; mm ! [D] X coordinate of reference point
Y_RP(6)             0 ; mm ! [D] Y coordinate of reference point
Z_RP(6)             0 ; mm ! [D] Z coordinate of reference point

REFERENCE_POINT_NAME(7) 7 ! [D] Parameter not used: provided to show a name
OPT_RP_BODY_TYPE(7) 1 ! [D] Type of body where point is located
OPT_RP_BODY_ID(7)   1 ! [D] ID number of body where point is located
OPT_RP_FORCE_N(7)   0 ! [D] Axes for imported Fx, Fy, Fz: 0 -> body, 1 -> N
X_RP(7)             0 ; mm ! [D] X coordinate of reference point
Y_RP(7)             0 ; mm ! [D] Y coordinate of reference point
Z_RP(7)             0 ; mm ! [D] Z coordinate of reference point

REFERENCE_POINT_NAME(8) 8 ! [D] Parameter not used: provided to show a name
OPT_RP_BODY_TYPE(8) 1 ! [D] Type of body where point is located
OPT_RP_BODY_ID(8)   1 ! [D] ID number of body where point is located
OPT_RP_FORCE_N(8)   0 ! [D] Axes for imported Fx, Fy, Fz: 0 -> body, 1 -> N
X_RP(8)             0 ; mm ! [D] X coordinate of reference point
Y_RP(8)             0 ; mm ! [D] Y coordinate of reference point
Z_RP(8)             0 ; mm ! [D] Z coordinate of reference point

REFERENCE_POINT_NAME(9) 9 ; Point 1: K and C Table (X = -850mm, Z = 50mm)
OPT_RP_BODY_TYPE(9) 1 ! Type of body where point is located
OPT_RP_BODY_ID(9)   1 ! ID number of body where point is located
OPT_RP_FORCE_N(9)   0 ! Axes for imported Fx, Fy, Fz: 0 -> body, 1 -> N
X_RP(9)          -850 ; mm ! X coordinate of reference point
Y_RP(9)             0 ; mm ! Y coordinate of reference point
Z_RP(9)            50 ; mm ! Z coordinate of reference point

REFERENCE_POINT_NAME(10) 10 ; Point 2: K and C Table (X = -850mm, Z = 50mm)
OPT_RP_BODY_TYPE(10) 1 ! Type of body where point is located
OPT_RP_BODY_ID(10)  1 ! ID number of body where point is located
OPT_RP_FORCE_N(10)  0 ! Axes for imported Fx, Fy, Fz: 0 -> body, 1 -> N
X_RP(10)          900 ; mm ! X coordinate of reference point
Y_RP(10)         -100 ; mm ! Y coordinate of reference point
Z_RP(10)           90 ; mm ! Z coordinate of reference point

!------------------------------------------------------------------------------------
! ADAS RANGE AND TRACKING SENSORS
!------------------------------------------------------------------------------------
! Up to 99 ADAS Range and Tracking Sensors can be installed to detect moving
! objects. A set of detection variables is provided for each combination of the
! sensor and every installed target object. If indices shown below are not used,
! e.g., (2), the current value of the index ISENSOR is used to identify the sensor
! associated with the parameter when reading data. Three Configurable Functions
! affect the sensor sensitivity: SENSOR_ANTENNA_ELEVATION, SENSOR_ANTENNA_RANGE,
! and SENSOR_MAP.

! NSENSOR           1 ! Number of installed range and tracking sensors (read only)
DEFINE_SENSORS      1 ! VS Command to define ADAS sensors
N_MIN_DETECTIONS    1 ! [D] Minimum number of detections (used to define detection
                      ! outputs when sensors are defined before moving objects)
OPT_ALTERNATE_SENSORS 1 ! [D] 1 -> update only one sensor each time step (alternate
                        ! among sensors); 0 -> update all sensors every time step
OPT_INIT_SENSORS    1 ! [D] 1 -> initialize all sensors at the first time step to
                      ! include effects of VS Commands that might control target
                      ! objects); 0 -> initialize all sensors before the run starts

SENSOR_NAME(1)      1 ; Wide Sensor
OPT_BLOCK_SENSOR(1) 1 ! Can objects block the view of each other for this sensor? 1
                      ! -> yes, 0 -> no
OPT_LEGACY_SENSOR(1) 0 ! [D] Use legacy sensor method? The legacy method has better
                       ! computational efficiency, but reduced accuracy for certain
                       ! edge cases. 0 -> no, 1 -> yes
OPT_EXPORT_SENSOR(1) 0 ! Automatically export detection variables for this sensor to
                       ! Simulink/LabVIEW? 0 -> no, 1 -> yes
OPT_SORT_OUTPUTS_SENSOR(1) 1 ! Sort detection variables for sensor: 1 -> by
                             ! proximity (DisS1_1 is closest, DisS1_2 is next,
                             ! etc.), 0 -> by object number (DisS1_1 goes to object
                             ! 1, DisS1_2 to object 2, etc.)
TYPE_SENSOR(1)      1 ! Type (used in reflectiveness map function) of sensor
BEARING_MAX_SENSOR(1) 45 ; deg ! Maximum bearing angle (field of view)
BEARING_MIN_SENSOR(1) -45 ; deg ! Minimum bearing angle (field of view)
RANGE_LIMIT_SENSOR(1) 50 ; m ! Range limit (set 0 for no limit)
X_SENSOR(1)       250 ; mm ! X coordinate (in sprung mass) of sensor
Y_SENSOR(1)         0 ; mm ! [D] Y coordinate (in sprung mass) of sensor
Z_SENSOR(1)       225 ; mm ! Z coordinate (in sprung mass) of sensor
YAW_AIM_SENSOR(1)   0 ; deg ! Yaw of sensor axes about Z of sprung mass
PITCH_AIM_SENSOR(1) 0 ; deg ! Pitch of sensor axes about Y, after Yaw
ROLL_AIM_SENSOR(1)  0 ; deg ! Roll of sensor axes about X, after Pitch

!------------------------------------------------------------------------------------
! MOVING OBJECTS
!------------------------------------------------------------------------------------
! Up to 200 moving objects can be installed to provide more detailed animations
! and/or targets for ADAS Range and Detection sensors. The locations and
! orientations of these objects can be controlled with variables imported from
! external software or with VS Commands, using either global X-Y-Z coordinates or
! path/road S and L coordinates. If indices shown below are not used, e.g., (2),
! the current value of the index IOBJECT is used to identify the object associated
! with the parameter when reading data. If polygonal vertices are used, the vertex
! coordinates are provided with POLY_SHAPE_TABLE datasets.

! NOBJECT          32 ! Number of installed moving objects (read only)
DEFINE_MOVING_OBJECTS 32 ! VS Command to define moving objects

OBJECT_NAME(1)      1 ; Traffic Cones: Left, Object #1
PATH_ID_OBJ(1)      1 ! PATH_ID used to define location with S, L, Hdg; or 0 ->
                      ! define with global X, Y, Yaw [I]
LTARG_ID_OBJ(1)     0 ! [D] LTARG_ID for LTARG dataset for lateral offset relative
                      ! to path, or 0 (no LTARG dataset) [I]
OPT_SPEED_OBJ(1)    1 ! VS Command to specify how speed is used; 0 -> no ODEs, speed
                      ! is calculated from changes in X & Y coordinates, 1 -> ODE
                      ! for S, 2 -> ODEs for S and offtracking
OPT_DIR_OBJ(1)      1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(1)     0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 (not
                      ! used); if negative, then use -SPEED_TARGET with
                      ! ABS(SPEED_ID_OBJ) [I]
AX_BRK_OBJ_ON(1) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(1)    0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(1)  1 ! Can object recycle when it reaches limits relative to the
                      ! path and/or vehicle? 0 -> no, 1 -> yes
S_HIDE_OBJ(1)       5 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(1)      60 ; m ! Maximum station before recycling object; distance
                      ! leading ego vehicle if both share the same path or road
S_TRAIL_OBJ(1)     15 ; m ! Minimum station for before recycling object; distance
                      ! trailing ego vehicle if both share the same path or road
ROAD_ID_OBJ(1)      1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(1)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(1)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(1)   0 ! Shape type: 1 -> rectangle, 0 -> cylinder, 2 -> Segment, 3
                      ! -> Polygonal (vertices)
DIAMETER_OBJ(1)   0.5 ; m ! Diameter of cylinder object
H_OBJ(1)         0.25 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(1) 0 ! Material type for reflectiveness map (< 1 for no map, in
                       ! this case use REFLECT_OBJ )
REFLECT_OBJ(1)      1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
HeadO_1             0 ; deg ! Output: Heading of object relative to path
LatO_1              2 ; m ! Output: Lateral offset, object 1
MsgObj_1            0 ; - ! Output: User-defined Message (code) for object
S_Obj_1   1210.672281 ; m ! Output and possibly ODE SV: Station of object
TypeO_1             0 ; - ! Output: User-defined Type (code) for object
V_Obj_1             0 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(2)      2 ; Traffic Cones: Left, Object #2
PATH_ID_OBJ(2)      1 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(2)     0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(2)    1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(2)      1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(2)     0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(2) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(2)    0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(2)  1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(2)       5 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(2)      60 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(2)     15 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(2)      1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(2)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(2)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(2)   0 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
DIAMETER_OBJ(2)   0.5 ; m ! Diameter of cylinder object
H_OBJ(2)         0.25 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(2) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(2)      1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
HeadO_2             0 ; deg ! Output: Heading of object relative to path
LatO_2              2 ; m ! Output: Lateral offset, object 2
MsgObj_2            0 ; - ! Output: User-defined Message (code) for object
S_Obj_2   1218.172281 ; m ! Output and possibly ODE SV: Station of object
TypeO_2             0 ; - ! Output: User-defined Type (code) for object
V_Obj_2             0 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(3)      3 ; Traffic Cones: Left, Object #3
PATH_ID_OBJ(3)      1 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(3)     0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(3)    1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(3)      1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(3)     0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(3) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(3)    0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(3)  1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(3)       5 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(3)      60 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(3)     15 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(3)      1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(3)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(3)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(3)   0 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
DIAMETER_OBJ(3)   0.5 ; m ! Diameter of cylinder object
H_OBJ(3)         0.25 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(3) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(3)      1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
HeadO_3             0 ; deg ! Output: Heading of object relative to path
LatO_3              2 ; m ! Output: Lateral offset, object 3
MsgObj_3            0 ; - ! Output: User-defined Message (code) for object
S_Obj_3             0 ; m ! Output and possibly ODE SV: Station of object
TypeO_3             0 ; - ! Output: User-defined Type (code) for object
V_Obj_3             0 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(4)      4 ; Traffic Cones: Left, Object #4
PATH_ID_OBJ(4)      1 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(4)     0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(4)    1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(4)      1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(4)     0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(4) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(4)    0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(4)  1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(4)       5 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(4)      60 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(4)     15 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(4)      1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(4)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(4)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(4)   0 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
DIAMETER_OBJ(4)   0.5 ; m ! Diameter of cylinder object
H_OBJ(4)         0.25 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(4) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(4)      1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
HeadO_4             0 ; deg ! Output: Heading of object relative to path
LatO_4              2 ; m ! Output: Lateral offset, object 4
MsgObj_4            0 ; - ! Output: User-defined Message (code) for object
S_Obj_4           7.5 ; m ! Output and possibly ODE SV: Station of object
TypeO_4             0 ; - ! Output: User-defined Type (code) for object
V_Obj_4             0 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(5)      5 ; Traffic Cones: Left, Object #5
PATH_ID_OBJ(5)      1 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(5)     0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(5)    1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(5)      1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(5)     0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(5) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(5)    0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(5)  1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(5)       5 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(5)      60 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(5)     15 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(5)      1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(5)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(5)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(5)   0 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
DIAMETER_OBJ(5)   0.5 ; m ! Diameter of cylinder object
H_OBJ(5)         0.25 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(5) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(5)      1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
HeadO_5             0 ; deg ! Output: Heading of object relative to path
LatO_5              2 ; m ! Output: Lateral offset, object 5
MsgObj_5            0 ; - ! Output: User-defined Message (code) for object
S_Obj_5            15 ; m ! Output and possibly ODE SV: Station of object
TypeO_5             0 ; - ! Output: User-defined Type (code) for object
V_Obj_5             0 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(6)      6 ; Traffic Cones: Left, Object #6
PATH_ID_OBJ(6)      1 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(6)     0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(6)    1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(6)      1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(6)     0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(6) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(6)    0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(6)  1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(6)       5 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(6)      60 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(6)     15 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(6)      1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(6)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(6)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(6)   0 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
DIAMETER_OBJ(6)   0.5 ; m ! Diameter of cylinder object
H_OBJ(6)         0.25 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(6) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(6)      1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
HeadO_6             0 ; deg ! Output: Heading of object relative to path
LatO_6              2 ; m ! Output: Lateral offset, object 6
MsgObj_6            0 ; - ! Output: User-defined Message (code) for object
S_Obj_6          22.5 ; m ! Output and possibly ODE SV: Station of object
TypeO_6             0 ; - ! Output: User-defined Type (code) for object
V_Obj_6             0 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(7)      7 ; Traffic Cones: Left, Object #7
PATH_ID_OBJ(7)      1 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(7)     0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(7)    1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(7)      1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(7)     0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(7) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(7)    0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(7)  1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(7)       5 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(7)      60 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(7)     15 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(7)      1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(7)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(7)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(7)   0 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
DIAMETER_OBJ(7)   0.5 ; m ! Diameter of cylinder object
H_OBJ(7)         0.25 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(7) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(7)      1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
HeadO_7             0 ; deg ! Output: Heading of object relative to path
LatO_7              2 ; m ! Output: Lateral offset, object 7
MsgObj_7            0 ; - ! Output: User-defined Message (code) for object
S_Obj_7            30 ; m ! Output and possibly ODE SV: Station of object
TypeO_7             0 ; - ! Output: User-defined Type (code) for object
V_Obj_7             0 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(8)      8 ; Traffic Cones: Left, Object #8
PATH_ID_OBJ(8)      1 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(8)     0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(8)    1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(8)      1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(8)     0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(8) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(8)    0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(8)  1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(8)       5 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(8)      60 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(8)     15 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(8)      1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(8)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(8)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(8)   0 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
DIAMETER_OBJ(8)   0.5 ; m ! Diameter of cylinder object
H_OBJ(8)         0.25 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(8) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(8)      1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
HeadO_8             0 ; deg ! Output: Heading of object relative to path
LatO_8              2 ; m ! Output: Lateral offset, object 8
MsgObj_8            0 ; - ! Output: User-defined Message (code) for object
S_Obj_8          37.5 ; m ! Output and possibly ODE SV: Station of object
TypeO_8             0 ; - ! Output: User-defined Type (code) for object
V_Obj_8             0 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(9)      9 ; Traffic Cones: Left, Object #9
PATH_ID_OBJ(9)      1 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(9)     0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(9)    1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(9)      1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(9)     0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(9) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(9)    0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(9)  1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(9)       5 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(9)      60 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(9)     15 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(9)      1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(9)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(9)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(9)   0 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
DIAMETER_OBJ(9)   0.5 ; m ! Diameter of cylinder object
H_OBJ(9)         0.25 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(9) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(9)      1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
HeadO_9             0 ; deg ! Output: Heading of object relative to path
LatO_9              2 ; m ! Output: Lateral offset, object 9
MsgObj_9            0 ; - ! Output: User-defined Message (code) for object
S_Obj_9            45 ; m ! Output and possibly ODE SV: Station of object
TypeO_9             0 ; - ! Output: User-defined Type (code) for object
V_Obj_9             0 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(10)    10 ; Traffic Cones: Left, Object #10
PATH_ID_OBJ(10)     1 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(10)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(10)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(10)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(10)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(10) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(10)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(10) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(10)      5 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(10)     60 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(10)    15 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(10)     1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(10)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(10)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(10)  0 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
DIAMETER_OBJ(10)  0.5 ; m ! Diameter of cylinder object
H_OBJ(10)        0.25 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(10) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(10)     1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
HeadO_10            0 ; deg ! Output: Heading of object relative to path
LatO_10             2 ; m ! Output: Lateral offset, object 10
MsgObj_10           0 ; - ! Output: User-defined Message (code) for object
S_Obj_10         52.5 ; m ! Output and possibly ODE SV: Station of object
TypeO_10            0 ; - ! Output: User-defined Type (code) for object
V_Obj_10            0 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(11)    11 ; Traffic Cones: Left, Object #11
PATH_ID_OBJ(11)     1 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(11)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(11)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(11)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(11)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(11) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(11)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(11) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(11)      5 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(11)     60 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(11)    15 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(11)     1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(11)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(11)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(11)  0 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
DIAMETER_OBJ(11)  0.5 ; m ! Diameter of cylinder object
H_OBJ(11)        0.25 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(11) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(11)     1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
HeadO_11            0 ; deg ! Output: Heading of object relative to path
LatO_11             2 ; m ! Output: Lateral offset, object 11
MsgObj_11           0 ; - ! Output: User-defined Message (code) for object
S_Obj_11           60 ; m ! Output and possibly ODE SV: Station of object
TypeO_11            0 ; - ! Output: User-defined Type (code) for object
V_Obj_11            0 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(12)    12 ; Traffic Cones: Right, Object #1
PATH_ID_OBJ(12)     1 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(12)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(12)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(12)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(12)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(12) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(12)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(12) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(12)      5 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(12)     60 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(12)    15 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(12)     1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(12)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(12)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(12)  0 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
DIAMETER_OBJ(12)  0.5 ; m ! Diameter of cylinder object
H_OBJ(12)        0.25 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(12) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(12)     1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
HeadO_12            0 ; deg ! Output: Heading of object relative to path
LatO_12            -2 ; m ! Output: Lateral offset, object 12
MsgObj_12           0 ; - ! Output: User-defined Message (code) for object
S_Obj_12  1210.672281 ; m ! Output and possibly ODE SV: Station of object
TypeO_12            0 ; - ! Output: User-defined Type (code) for object
V_Obj_12            0 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(13)    13 ; Traffic Cones: Right, Object #2
PATH_ID_OBJ(13)     1 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(13)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(13)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(13)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(13)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(13) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(13)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(13) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(13)      5 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(13)     60 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(13)    15 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(13)     1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(13)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(13)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(13)  0 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
DIAMETER_OBJ(13)  0.5 ; m ! Diameter of cylinder object
H_OBJ(13)        0.25 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(13) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(13)     1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
HeadO_13            0 ; deg ! Output: Heading of object relative to path
LatO_13            -2 ; m ! Output: Lateral offset, object 13
MsgObj_13           0 ; - ! Output: User-defined Message (code) for object
S_Obj_13  1218.172281 ; m ! Output and possibly ODE SV: Station of object
TypeO_13            0 ; - ! Output: User-defined Type (code) for object
V_Obj_13            0 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(14)    14 ; Traffic Cones: Right, Object #3
PATH_ID_OBJ(14)     1 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(14)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(14)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(14)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(14)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(14) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(14)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(14) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(14)      5 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(14)     60 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(14)    15 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(14)     1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(14)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(14)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(14)  0 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
DIAMETER_OBJ(14)  0.5 ; m ! Diameter of cylinder object
H_OBJ(14)        0.25 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(14) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(14)     1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
HeadO_14            0 ; deg ! Output: Heading of object relative to path
LatO_14            -2 ; m ! Output: Lateral offset, object 14
MsgObj_14           0 ; - ! Output: User-defined Message (code) for object
S_Obj_14            0 ; m ! Output and possibly ODE SV: Station of object
TypeO_14            0 ; - ! Output: User-defined Type (code) for object
V_Obj_14            0 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(15)    15 ; Traffic Cones: Right, Object #4
PATH_ID_OBJ(15)     1 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(15)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(15)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(15)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(15)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(15) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(15)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(15) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(15)      5 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(15)     60 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(15)    15 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(15)     1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(15)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(15)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(15)  0 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
DIAMETER_OBJ(15)  0.5 ; m ! Diameter of cylinder object
H_OBJ(15)        0.25 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(15) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(15)     1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
HeadO_15            0 ; deg ! Output: Heading of object relative to path
LatO_15            -2 ; m ! Output: Lateral offset, object 15
MsgObj_15           0 ; - ! Output: User-defined Message (code) for object
S_Obj_15          7.5 ; m ! Output and possibly ODE SV: Station of object
TypeO_15            0 ; - ! Output: User-defined Type (code) for object
V_Obj_15            0 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(16)    16 ; Traffic Cones: Right, Object #5
PATH_ID_OBJ(16)     1 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(16)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(16)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(16)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(16)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(16) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(16)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(16) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(16)      5 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(16)     60 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(16)    15 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(16)     1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(16)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(16)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(16)  0 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
DIAMETER_OBJ(16)  0.5 ; m ! Diameter of cylinder object
H_OBJ(16)        0.25 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(16) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(16)     1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
HeadO_16            0 ; deg ! Output: Heading of object relative to path
LatO_16            -2 ; m ! Output: Lateral offset, object 16
MsgObj_16           0 ; - ! Output: User-defined Message (code) for object
S_Obj_16           15 ; m ! Output and possibly ODE SV: Station of object
TypeO_16            0 ; - ! Output: User-defined Type (code) for object
V_Obj_16            0 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(17)    17 ; Traffic Cones: Right, Object #6
PATH_ID_OBJ(17)     1 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(17)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(17)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(17)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(17)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(17) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(17)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(17) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(17)      5 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(17)     60 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(17)    15 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(17)     1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(17)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(17)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(17)  0 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
DIAMETER_OBJ(17)  0.5 ; m ! Diameter of cylinder object
H_OBJ(17)        0.25 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(17) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(17)     1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
HeadO_17            0 ; deg ! Output: Heading of object relative to path
LatO_17            -2 ; m ! Output: Lateral offset, object 17
MsgObj_17           0 ; - ! Output: User-defined Message (code) for object
S_Obj_17         22.5 ; m ! Output and possibly ODE SV: Station of object
TypeO_17            0 ; - ! Output: User-defined Type (code) for object
V_Obj_17            0 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(18)    18 ; Traffic Cones: Right, Object #7
PATH_ID_OBJ(18)     1 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(18)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(18)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(18)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(18)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(18) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(18)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(18) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(18)      5 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(18)     60 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(18)    15 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(18)     1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(18)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(18)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(18)  0 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
DIAMETER_OBJ(18)  0.5 ; m ! Diameter of cylinder object
H_OBJ(18)        0.25 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(18) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(18)     1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
HeadO_18            0 ; deg ! Output: Heading of object relative to path
LatO_18            -2 ; m ! Output: Lateral offset, object 18
MsgObj_18           0 ; - ! Output: User-defined Message (code) for object
S_Obj_18           30 ; m ! Output and possibly ODE SV: Station of object
TypeO_18            0 ; - ! Output: User-defined Type (code) for object
V_Obj_18            0 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(19)    19 ; Traffic Cones: Right, Object #8
PATH_ID_OBJ(19)     1 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(19)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(19)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(19)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(19)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(19) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(19)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(19) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(19)      5 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(19)     60 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(19)    15 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(19)     1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(19)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(19)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(19)  0 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
DIAMETER_OBJ(19)  0.5 ; m ! Diameter of cylinder object
H_OBJ(19)        0.25 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(19) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(19)     1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
HeadO_19            0 ; deg ! Output: Heading of object relative to path
LatO_19            -2 ; m ! Output: Lateral offset, object 19
MsgObj_19           0 ; - ! Output: User-defined Message (code) for object
S_Obj_19         37.5 ; m ! Output and possibly ODE SV: Station of object
TypeO_19            0 ; - ! Output: User-defined Type (code) for object
V_Obj_19            0 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(20)    20 ; Traffic Cones: Right, Object #9
PATH_ID_OBJ(20)     1 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(20)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(20)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(20)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(20)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(20) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(20)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(20) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(20)      5 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(20)     60 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(20)    15 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(20)     1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(20)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(20)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(20)  0 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
DIAMETER_OBJ(20)  0.5 ; m ! Diameter of cylinder object
H_OBJ(20)        0.25 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(20) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(20)     1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
HeadO_20            0 ; deg ! Output: Heading of object relative to path
LatO_20            -2 ; m ! Output: Lateral offset, object 20
MsgObj_20           0 ; - ! Output: User-defined Message (code) for object
S_Obj_20           45 ; m ! Output and possibly ODE SV: Station of object
TypeO_20            0 ; - ! Output: User-defined Type (code) for object
V_Obj_20            0 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(21)    21 ; Traffic Cones: Right, Object #10
PATH_ID_OBJ(21)     1 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(21)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(21)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(21)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(21)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(21) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(21)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(21) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(21)      5 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(21)     60 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(21)    15 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(21)     1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(21)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(21)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(21)  0 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
DIAMETER_OBJ(21)  0.5 ; m ! Diameter of cylinder object
H_OBJ(21)        0.25 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(21) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(21)     1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
HeadO_21            0 ; deg ! Output: Heading of object relative to path
LatO_21            -2 ; m ! Output: Lateral offset, object 21
MsgObj_21           0 ; - ! Output: User-defined Message (code) for object
S_Obj_21         52.5 ; m ! Output and possibly ODE SV: Station of object
TypeO_21            0 ; - ! Output: User-defined Type (code) for object
V_Obj_21            0 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(22)    22 ; Traffic Cones: Right, Object #11
PATH_ID_OBJ(22)     1 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(22)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(22)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(22)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(22)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(22) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(22)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(22) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(22)      5 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(22)     60 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(22)    15 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(22)     1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(22)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(22)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(22)  0 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
DIAMETER_OBJ(22)  0.5 ; m ! Diameter of cylinder object
H_OBJ(22)        0.25 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(22) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(22)     1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
HeadO_22            0 ; deg ! Output: Heading of object relative to path
LatO_22            -2 ; m ! Output: Lateral offset, object 22
MsgObj_22           0 ; - ! Output: User-defined Message (code) for object
S_Obj_22           60 ; m ! Output and possibly ODE SV: Station of object
TypeO_22            0 ; - ! Output: User-defined Type (code) for object
V_Obj_22            0 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(23)    23 ; 10 Driver Preview Points, Object #1
PATH_ID_OBJ(23)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(23)     1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(23)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(23)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(23)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(23)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(23)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(23)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(23) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(23)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(23)       2 ; m ! [D] Width of rectangular object
MsgObj_23           0 ; - ! Output: User-defined Message (code) for object
S_RdO_23            0 ; m ! Output: Station of object on road path
TypeO_23            0 ; - ! Output: User-defined Type (code) for object
V_Obj_23            0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_23          0.5 ; m ! Output: X coordinate of object 23
Y_Obj_23            0 ; m ! Output: Y coordinate of object 23
YawO_23             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(24)    24 ; 10 Driver Preview Points, Object #2
PATH_ID_OBJ(24)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(24)     1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(24)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(24)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(24)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(24)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(24)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(24)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(24) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(24)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(24)       2 ; m ! [D] Width of rectangular object
MsgObj_24           0 ; - ! Output: User-defined Message (code) for object
S_RdO_24            0 ; m ! Output: Station of object on road path
TypeO_24            0 ; - ! Output: User-defined Type (code) for object
V_Obj_24            0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_24            1 ; m ! Output: X coordinate of object 24
Y_Obj_24            0 ; m ! Output: Y coordinate of object 24
YawO_24             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(25)    25 ; 10 Driver Preview Points, Object #3
PATH_ID_OBJ(25)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(25)     1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(25)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(25)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(25)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(25)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(25)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(25)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(25) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(25)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(25)       2 ; m ! [D] Width of rectangular object
MsgObj_25           0 ; - ! Output: User-defined Message (code) for object
S_RdO_25            0 ; m ! Output: Station of object on road path
TypeO_25            0 ; - ! Output: User-defined Type (code) for object
V_Obj_25            0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_25          1.5 ; m ! Output: X coordinate of object 25
Y_Obj_25            0 ; m ! Output: Y coordinate of object 25
YawO_25             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(26)    26 ; 10 Driver Preview Points, Object #4
PATH_ID_OBJ(26)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(26)     1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(26)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(26)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(26)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(26)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(26)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(26)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(26) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(26)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(26)       2 ; m ! [D] Width of rectangular object
MsgObj_26           0 ; - ! Output: User-defined Message (code) for object
S_RdO_26            0 ; m ! Output: Station of object on road path
TypeO_26            0 ; - ! Output: User-defined Type (code) for object
V_Obj_26            0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_26            2 ; m ! Output: X coordinate of object 26
Y_Obj_26            0 ; m ! Output: Y coordinate of object 26
YawO_26             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(27)    27 ; 10 Driver Preview Points, Object #5
PATH_ID_OBJ(27)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(27)     1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(27)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(27)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(27)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(27)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(27)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(27)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(27) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(27)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(27)       2 ; m ! [D] Width of rectangular object
MsgObj_27           0 ; - ! Output: User-defined Message (code) for object
S_RdO_27            0 ; m ! Output: Station of object on road path
TypeO_27            0 ; - ! Output: User-defined Type (code) for object
V_Obj_27            0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_27          2.5 ; m ! Output: X coordinate of object 27
Y_Obj_27            0 ; m ! Output: Y coordinate of object 27
YawO_27             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(28)    28 ; 10 Driver Preview Points, Object #6
PATH_ID_OBJ(28)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(28)     1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(28)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(28)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(28)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(28)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(28)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(28)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(28) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(28)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(28)       2 ; m ! [D] Width of rectangular object
MsgObj_28           0 ; - ! Output: User-defined Message (code) for object
S_RdO_28            0 ; m ! Output: Station of object on road path
TypeO_28            0 ; - ! Output: User-defined Type (code) for object
V_Obj_28            0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_28            3 ; m ! Output: X coordinate of object 28
Y_Obj_28            0 ; m ! Output: Y coordinate of object 28
YawO_28             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(29)    29 ; 10 Driver Preview Points, Object #7
PATH_ID_OBJ(29)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(29)     1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(29)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(29)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(29)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(29)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(29)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(29)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(29) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(29)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(29)       2 ; m ! [D] Width of rectangular object
MsgObj_29           0 ; - ! Output: User-defined Message (code) for object
S_RdO_29            0 ; m ! Output: Station of object on road path
TypeO_29            0 ; - ! Output: User-defined Type (code) for object
V_Obj_29            0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_29          3.5 ; m ! Output: X coordinate of object 29
Y_Obj_29            0 ; m ! Output: Y coordinate of object 29
YawO_29             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(30)    30 ; 10 Driver Preview Points, Object #8
PATH_ID_OBJ(30)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(30)     1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(30)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(30)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(30)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(30)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(30)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(30)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(30) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(30)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(30)       2 ; m ! [D] Width of rectangular object
MsgObj_30           0 ; - ! Output: User-defined Message (code) for object
S_RdO_30            0 ; m ! Output: Station of object on road path
TypeO_30            0 ; - ! Output: User-defined Type (code) for object
V_Obj_30            0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_30            4 ; m ! Output: X coordinate of object 30
Y_Obj_30            0 ; m ! Output: Y coordinate of object 30
YawO_30             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(31)    31 ; 10 Driver Preview Points, Object #9
PATH_ID_OBJ(31)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(31)     1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(31)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(31)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(31)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(31)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(31)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(31)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(31) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(31)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(31)       2 ; m ! [D] Width of rectangular object
MsgObj_31           0 ; - ! Output: User-defined Message (code) for object
S_RdO_31            0 ; m ! Output: Station of object on road path
TypeO_31            0 ; - ! Output: User-defined Type (code) for object
V_Obj_31            0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_31          4.5 ; m ! Output: X coordinate of object 31
Y_Obj_31            0 ; m ! Output: Y coordinate of object 31
YawO_31             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(32)    32 ; 10 Driver Preview Points, Object #10
PATH_ID_OBJ(32)     0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(32)     1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(32)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(32)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(32)  1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(32)           0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(32)      4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(32)    0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(32) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(32)     0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(32)       2 ; m ! [D] Width of rectangular object
MsgObj_32           0 ; - ! Output: User-defined Message (code) for object
S_RdO_32            0 ; m ! Output: Station of object on road path
TypeO_32            0 ; - ! Output: User-defined Type (code) for object
V_Obj_32            0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_32            5 ; m ! Output: X coordinate of object 32
Y_Obj_32            0 ; m ! Output: Y coordinate of object 32
YawO_32             0 ; deg ! Output and possibly ODE SV: Yaw angle of object

!------------------------------------------------------------------------------------
! CONFIGURABLE FUNCTIONS
!------------------------------------------------------------------------------------

! CAMBER: Suspension camber (measured at zero steer). Camber can be a nonlinear
! CARPET function of jounce (other side) and jounce or a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! SUSP_CAMBER_JNC_OTHER_SIDE of jounce (other side) (CONSTANT, COEFFICIENT, or
! TABLE). Camber from the calculation can be adjusted with CAMBER_GAIN and
! CAMBER_OFFSET. Jounce used in the calculation can be adjusted with JNC_SCALE_CAMBER
! and JNC_START_CAMBER. Jounce (other side) used in the calculation can be adjusted
! with JNC2_SCALE_CAMBER and JNC2_START_CAMBER. The derivative of this function is
! used internally. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,1) LINEAR ! axle 1, left side
 -200, 0.895
 -100, 0.895
 -75, 0.895
 -65, 0.895
 -60, 0.895
 -57.5, 0.895
 -55, 0.895
 -52.5, 0.89
 -50.8, 0.88
 -48.26, 0.843
 -45.72, 0.806
 -43.18, 0.768
 -40.64, 0.729
 -38.1, 0.69
 -35.56, 0.649
 -33.02, 0.608
 -30.48, 0.566
 -27.94, 0.524
 -25.4, 0.48
 -22.86, 0.436
 -20.32, 0.391
 -17.78, 0.345
 -15.24, 0.298
 -12.7, 0.25
 -10.16, 0.202
 -7.62, 0.153
 -5.08, 0.103
 -2.54, 0.052
 0, 0
 2.54, -0.053
 5.08, -0.106
 7.62, -0.16
 10.16, -0.215
 12.7, -0.271
 15.24, -0.328
 17.78, -0.386
 20.32, -0.444
 22.86, -0.504
 25.4, -0.564
 30, -0.57
 32.5, -0.571
 35, -0.572
 40, -0.573
 50, -0.575
 100, -0.575
 200, -0.575
ENDTABLE
CAMBER_GAIN(1,1)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,1)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,1) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; deg ! Constant camber component due to
                                           ! jounce (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,2) LINEAR ! axle 1, right side
 -200, 0.895
 -100, 0.895
 -75, 0.895
 -65, 0.895
 -60, 0.895
 -57.5, 0.895
 -55, 0.895
 -52.5, 0.89
 -50.8, 0.88
 -48.26, 0.843
 -45.72, 0.806
 -43.18, 0.768
 -40.64, 0.729
 -38.1, 0.69
 -35.56, 0.649
 -33.02, 0.608
 -30.48, 0.566
 -27.94, 0.524
 -25.4, 0.48
 -22.86, 0.436
 -20.32, 0.391
 -17.78, 0.345
 -15.24, 0.298
 -12.7, 0.25
 -10.16, 0.202
 -7.62, 0.153
 -5.08, 0.103
 -2.54, 0.052
 0, 0
 2.54, -0.053
 5.08, -0.106
 7.62, -0.16
 10.16, -0.215
 12.7, -0.271
 15.24, -0.328
 17.78, -0.386
 20.32, -0.444
 22.86, -0.504
 25.4, -0.564
 30, -0.57
 32.5, -0.571
 35, -0.572
 40, -0.573
 50, -0.575
 100, -0.575
 200, -0.575
ENDTABLE
CAMBER_GAIN(1,2)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,2)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,2) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; deg ! Constant camber component due to
                                           ! jounce (other side), axle 1, right
                                           ! side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(2,1) LINEAR ! axle 2, left side
 -200, -1.056
 -100, -1.056
 -40, -1.056
 -35, -1.055
 -30, -1.05
 -25.4, -1.046
 -22.86, -0.939
 -20.32, -0.833
 -17.78, -0.727
 -15.24, -0.622
 -12.7, -0.517
 -10.16, -0.413
 -7.62, -0.309
 -5.08, -0.206
 -2.54, -0.103
 0, 0
 2.54, 0.102
 5.08, 0.204
 7.62, 0.305
 10.16, 0.406
 12.7, 0.506
 15.24, 0.606
 17.78, 0.706
 20.32, 0.805
 22.86, 0.904
 25.4, 1.002
 27.94, 1.1
 30.48, 1.198
 33.02, 1.295
 35.56, 1.392
 38.1, 1.489
 40.64, 1.585
 43.18, 1.681
 45.72, 1.776
 48.26, 1.871
 50.8, 1.966
 55, 1.97
 60, 1.975
 65, 1.976
 100, 1.976
 200, 1.976
ENDTABLE
CAMBER_GAIN(2,1)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(2,1)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(2,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(2,1) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(2,1) 0 ; deg ! Constant camber component due to
                                           ! jounce (other side), axle 2, left side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(2,2) LINEAR ! axle 2, right side
 -200, -1.056
 -100, -1.056
 -40, -1.056
 -35, -1.055
 -30, -1.05
 -25.4, -1.046
 -22.86, -0.939
 -20.32, -0.833
 -17.78, -0.727
 -15.24, -0.622
 -12.7, -0.517
 -10.16, -0.413
 -7.62, -0.309
 -5.08, -0.206
 -2.54, -0.103
 0, 0
 2.54, 0.102
 5.08, 0.204
 7.62, 0.305
 10.16, 0.406
 12.7, 0.506
 15.24, 0.606
 17.78, 0.706
 20.32, 0.805
 22.86, 0.904
 25.4, 1.002
 27.94, 1.1
 30.48, 1.198
 33.02, 1.295
 35.56, 1.392
 38.1, 1.489
 40.64, 1.585
 43.18, 1.681
 45.72, 1.776
 48.26, 1.871
 50.8, 1.966
 55, 1.97
 60, 1.975
 65, 1.976
 100, 1.976
 200, 1.976
ENDTABLE
CAMBER_GAIN(2,2)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(2,2)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(2,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(2,2) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(2,2) 0 ; deg ! Constant camber component due to
                                           ! jounce (other side), axle 2, right
                                           ! side

! CAP_BATTERY_MAX: Battery maximum capacity. Battery full capacity is a function of
! Temperature (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. Battery full capacity from the calculation can be adjusted
! with CAP_BATTERY_MAX_GAIN and CAP_BATTERY_MAX_OFFSET. Temperature used in the
! calculation can be adjusted with TEMP_SCALE_CAP_BATTERY and TEMP_START_CAP_BATTERY.

CAP_BATTERY_MAX_CONSTANT 6 ; A-h ! Constant Battery full capacity
CAP_BATTERY_MAX_GAIN 1 ! Gain multiplied with calculated value to get Battery full
                       ! capacity
CAP_BATTERY_MAX_OFFSET 0 ; A-h ! Offset added (after gain) to get Battery full
                         ! capacity

! CC_FX: Compliance: wheel camber due to in- and out-phase Fx. Camber displacement
! can be a nonlinear CARPET function of force (other side) and force or a function of
! force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Camber displacement from the calculation can be adjusted with
! CC_FX_GAIN and CC_FX_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_CC_FX and F_START_CC_FX. Force (other side) used in the calculation can be
! adjusted with F2_SCALE_CC_FX and F2_START_CC_FX. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

CC_FX_COEFFICIENT(1,1) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 1, left side
CC_FX_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 1, right side
CC_FX_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 2, left side
CC_FX_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,2) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 2, right side
CC_FX_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,2)  1 ! Scale factor divided into (force - F_START_CC_FX)

! CD_MY: Compliance: suspension dive due to in- and out-phase My. Dive displacement
! can be a nonlinear CARPET function of moment (other side) and moment or a function
! of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. Dive displacement from the calculation can be adjusted with
! CD_MY_GAIN and CD_MY_OFFSET. Moment used in the calculation can be adjusted with
! M_SCALE_CD_MY and M_START_CD_MY. Moment (other side) used in the calculation can be
! adjusted with M2_SCALE_CD_MY and M2_START_CD_MY. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

CD_MY_COEFFICIENT(1,1) 0 ! Coefficient: dive displacement per unit moment (deg/N-m),
                         ! axle 1, left side
CD_MY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,1)  1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(1,2) 0 ! Coefficient: dive displacement per unit moment (deg/N-m),
                         ! axle 1, right side
CD_MY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,2)  1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(2,1) 0 ! Coefficient: dive displacement per unit moment (deg/N-m),
                         ! axle 2, left side
CD_MY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(2,1)  1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(2,2) 0 ! Coefficient: dive displacement per unit moment (deg/N-m),
                         ! axle 2, right side
CD_MY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(2,2)  1 ! Scale factor divided into (moment - M_START_CD_MY)

! CI_FY: Compliance: inclination of wheel due in- and out-phase Fy. Inclination
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_FY_GAIN and CI_FY_OFFSET. Force used in the calculation can
! be adjusted with F_SCALE_CI_FY and F_START_CI_FY. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_CI_FY and F2_START_CI_FY. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CI_FY_COEFFICIENT(1,1) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 1, left side
CI_FY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 1, right side
CI_FY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 2, left side
CI_FY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,2) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 2, right side
CI_FY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,2)  1 ! Scale factor divided into (force - F_START_CI_FY)

! CI_MZ: Compliance: inclination of wheel due to in- and out-phase Mz. Inclination
! displacement can be a nonlinear CARPET function of moment (other side) and moment
! or a function of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_MZ_GAIN and CI_MZ_OFFSET. Moment used in the calculation
! can be adjusted with M_SCALE_CI_MZ and M_START_CI_MZ. Moment (other side) used in
! the calculation can be adjusted with M2_SCALE_CI_MZ and M2_START_CI_MZ. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CI_MZ_COEFFICIENT(1,1) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 1, left side
CI_MZ_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 1, right side
CI_MZ_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 2, left side
CI_MZ_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,2) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 2, right side
CI_MZ_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,2)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

! CMP_DAMP: Damper compression. Damper compression is a function of jounce at wheel
! (CONSTANT, COEFFICIENT, or TABLE). Damper compression from the calculation can be
! adjusted with CMP_DAMP_GAIN and CMP_DAMP_OFFSET. Jounce at wheel used in the
! calculation can be adjusted with JNC_SCALE_CMP_DAMP and JNC_START_CMP_DAMP. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_DAMP_COEFFICIENT(1,1) 0.61 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), axle 1, left side
CMP_DAMP_GAIN(1,1)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2) 0.61 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), axle 1, right side
CMP_DAMP_GAIN(1,2)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1) 0.625 ! Coefficient: damper compression per unit jounce at
                                ! wheel (mm/mm), axle 2, left side
CMP_DAMP_GAIN(2,1)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2) 0.625 ! Coefficient: damper compression per unit jounce at
                                ! wheel (mm/mm), axle 2, right side
CMP_DAMP_GAIN(2,2)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

! CMP_JSTOP: Jounce bumper deflection. Jounce stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Jounce stop deflection from the
! calculation can be adjusted with CMP_JSTOP_GAIN and CMP_JSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_JSTOP and
! JNC_START_CMP_JSTOP. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CMP_JSTOP_COEFFICIENT(1,1) 0.61 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), axle 1, left side
CMP_JSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2) 0.61 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), axle 1, right side
CMP_JSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1) 0.625 ! Coefficient: jounce stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 2, left side
CMP_JSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2) 0.625 ! Coefficient: jounce stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 2, right side
CMP_JSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

! CMP_RSTOP: Rebound stop deflection. Rebound stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Rebound stop deflection from the
! calculation can be adjusted with CMP_RSTOP_GAIN and CMP_RSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_RSTOP and
! JNC_START_CMP_RSTOP. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CMP_RSTOP_COEFFICIENT(1,1) 0.61 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), axle 1, left side
CMP_RSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2) 0.61 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), axle 1, right side
CMP_RSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1) 0.625 ! Coefficient: rebound stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 2, left side
CMP_RSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2) 0.625 ! Coefficient: rebound stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 2, right side
CMP_RSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

! CMP_SPR_SEAT: Lower spring seat movement. Lower spring seat movement is a function
! of jounce at wheel (COEFFICIENT or TABLE). Lower spring seat movement from the
! calculation can be adjusted with CMP_SPR_SEAT_GAIN and CMP_SPR_SEAT_OFFSET. Jounce
! at wheel used in the calculation can be adjusted with JNC_SCALE_CMP_SPR_SEAT and
! JNC_START_CMP_SPR_SEAT. An inverse version of this function is used internally. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_SPR_SEAT_COEFFICIENT(1,1) 0.61 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), axle 1, left
                                   ! side
CMP_SPR_SEAT_GAIN(1,1) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2) 0.61 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), axle 1, right
                                   ! side
CMP_SPR_SEAT_GAIN(1,2) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1) 0.625 ! Coefficient: lower spring seat movement per
                                    ! unit jounce at wheel (mm/mm), axle 2, left
                                    ! side
CMP_SPR_SEAT_GAIN(2,1) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2) 0.625 ! Coefficient: lower spring seat movement per
                                    ! unit jounce at wheel (mm/mm), axle 2, right
                                    ! side
CMP_SPR_SEAT_GAIN(2,2) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

! CS_FY: Compliance: steer due to in- and out-phase Fy. Steer displacement can be a
! nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Steer displacement from the calculation can be adjusted with CS_FY_GAIN
! and CS_FY_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CS_FY
! and F_START_CS_FY. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CS_FY and F2_START_CS_FY. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

CS_FY_COEFFICIENT(1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                         ! axle 1, left side
CS_FY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                         ! axle 1, right side
CS_FY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                         ! axle 2, left side
CS_FY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                         ! axle 2, right side
CS_FY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,2)  1 ! Scale factor divided into (force - F_START_CS_FY)

! CS_MZ: Compliance: steer due to in- and out-phase Mz. Steer displacement can be a
! nonlinear CARPET function of moment and moment or a function of moment (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steer displacement from the calculation can be adjusted with CS_MZ_GAIN and
! CS_MZ_OFFSET. Moment used in the calculation can be adjusted with M_SCALE_CS_MZ and
! M_START_CS_MZ. Moment used in the calculation can be adjusted with M2_SCALE_CS_MZ
! and M2_START_CS_MZ. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

CS_MZ_COEFFICIENT(1,1) 0 ! Coefficient: steer displacement per unit moment
                         ! (deg/N-m), axle 1, left side
CS_MZ_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2) 0 ! Coefficient: steer displacement per unit moment
                         ! (deg/N-m), axle 1, right side
CS_MZ_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1) 0 ! Coefficient: steer displacement per unit moment
                         ! (deg/N-m), axle 2, left side
CS_MZ_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,2) 0 ! Coefficient: steer displacement per unit moment
                         ! (deg/N-m), axle 2, right side
CS_MZ_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,2)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

! CT_FX: Compliance: wheel toe due to in- and out-phase Fx. Toe displacement can be
! a nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Toe displacement from the calculation can be adjusted with CT_FX_GAIN
! and CT_FX_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CT_FX
! and F_START_CT_FX. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CT_FX and F2_START_CT_FX. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

CT_FX_COEFFICIENT(1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 1, left side
CT_FX_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 1, right side
CT_FX_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 2, left side
CT_FX_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 2, right side
CT_FX_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,2)  1 ! Scale factor divided into (force - F_START_CT_FX)

! C_LAT: Compliance: lateral displacement of wheel due to in- and out-phase Fy .
! Lateral displacement can be a nonlinear CARPET function of force (other side) and
! force or a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Lateral displacement from the
! calculation can be adjusted with C_LAT_GAIN and C_LAT_OFFSET. Force used in the
! calculation can be adjusted with F_SCALE_C_LAT and F_START_C_LAT. Force (other
! side) used in the calculation can be adjusted with F2_SCALE_C_LAT and
! F2_START_C_LAT. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

C_LAT_COEFFICIENT(1,1) 0 ! Coefficient: lateral displacement per unit force (mm/N),
                         ! axle 1, left side
C_LAT_OFFSET(1,1)   0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,1)  1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(1,2) 0 ! Coefficient: lateral displacement per unit force (mm/N),
                         ! axle 1, right side
C_LAT_OFFSET(1,2)   0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,2)  1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(2,1) 0 ! Coefficient: lateral displacement per unit force (mm/N),
                         ! axle 2, left side
C_LAT_OFFSET(2,1)   0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(2,1)  1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(2,2) 0 ! Coefficient: lateral displacement per unit force (mm/N),
                         ! axle 2, right side
C_LAT_OFFSET(2,2)   0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(2,2)  1 ! Scale factor divided into (force - F_START_C_LAT)

! C_LONG: Compliance: wheel longitudinal displacement due to in- and out-phase Fx. X
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. X displacement from the calculation can be
! adjusted with C_LONG_GAIN and C_LONG_OFFSET. Force used in the calculation can be
! adjusted with F_SCALE_C_LONG and F_START_C_LONG. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_C_LONG and F2_START_C_LONG. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

C_LONG_COEFFICIENT(1,1) 0 ! Coefficient: X displacement per unit force (mm/N), axle
                          ! 1, left side
C_LONG_OFFSET(1,1)  0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(1,2) 0 ! Coefficient: X displacement per unit force (mm/N), axle
                          ! 1, right side
C_LONG_OFFSET(1,2)  0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(2,1) 0 ! Coefficient: X displacement per unit force (mm/N), axle
                          ! 2, left side
C_LONG_OFFSET(2,1)  0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(2,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(2,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(2,2) 0 ! Coefficient: X displacement per unit force (mm/N), axle
                          ! 2, right side
C_LONG_OFFSET(2,2)  0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(2,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

! FD: Suspension damper force (1 side). Damper force is a function of compression
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Damper force from the calculation can be adjusted with FD_GAIN
! and FD_OFFSET. Compression speed used in the calculation can be adjusted with
! CMP_R_SCALE_FD and CMP_R_START_FD. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

FD_COEFFICIENT(1,1) 3 ! Coefficient: damper force per unit compression speed
                      ! (N/[mm/s]), axle 1, left side
FD_GAIN(1,1)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

FD_COEFFICIENT(1,2) 3 ! Coefficient: damper force per unit compression speed
                      ! (N/[mm/s]), axle 1, right side
FD_GAIN(1,2)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

FD_COEFFICIENT(2,1) 3 ! Coefficient: damper force per unit compression speed
                      ! (N/[mm/s]), axle 2, left side
FD_GAIN(2,1)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

FD_COEFFICIENT(2,2) 3 ! Coefficient: damper force per unit compression speed
                      ! (N/[mm/s]), axle 2, right side
FD_GAIN(2,2)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! FS_COMP: Compression (upper) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_COMP_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_COMP_GAIN and FS_COMP_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_COMP and CMP_START_FS_COMP. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_COMP and
! FSTATIC_START_FS_COMP. An inverse version of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

FS_COMP_COEFFICIENT(1,1) 30 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 1, left side
FS_COMP_GAIN(1,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1) 2.5 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 1, left side

FS_COMP_COEFFICIENT(1,2) 30 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 1, right side
FS_COMP_GAIN(1,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2) 2.5 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 1, right side

FS_COMP_COEFFICIENT(2,1) 30 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 2, left side
FS_COMP_GAIN(2,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1) 2.5 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 2, left side

FS_COMP_COEFFICIENT(2,2) 30 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 2, right side
FS_COMP_GAIN(2,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2) 2.5 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 2, right side

! FS_EXT: Extension (lower) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_EXT_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_EXT_GAIN and FS_EXT_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_EXT and CMP_START_FS_EXT. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_EXT and FSTATIC_START_FS_EXT.
! An inverse version of this function is used internally. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

FS_EXT_COEFFICIENT(1,1) 30 ! Coefficient: spring force per unit spring compression
                           ! (N/mm), axle 1, left side
FS_EXT_GAIN(1,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1) -2.5 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 1, left side

FS_EXT_COEFFICIENT(1,2) 30 ! Coefficient: spring force per unit spring compression
                           ! (N/mm), axle 1, right side
FS_EXT_GAIN(1,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2) -2.5 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 1, right side

FS_EXT_COEFFICIENT(2,1) 30 ! Coefficient: spring force per unit spring compression
                           ! (N/mm), axle 2, left side
FS_EXT_GAIN(2,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1) -2.5 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 2, left side

FS_EXT_COEFFICIENT(2,2) 30 ! Coefficient: spring force per unit spring compression
                           ! (N/mm), axle 2, right side
FS_EXT_GAIN(2,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2) -2.5 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 2, right side

! FX_AERO_SHAPING: Coefficient CFX for for X component of aerodynamic force. CFX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFX from the
! calculation can be adjusted with FX_AERO_SHAPING_GAIN and FX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FX_AERO and SLIP_START_FX_AERO.

FX_AERO_SHAPING_CONSTANT 1 ; - ! Constant CFX
FX_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFX

! FX_AERO_SHAPING_2: Coefficient CFX2 for X component of aerodynamic force. CFX2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FX_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFX2 from the calculation can be adjusted with
! FX_AERO_SHAPING_2_GAIN and FX_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FX_AERO and PITCH_START_FX_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FX_AERO and Z_START_FX_AERO.

! 2D table: row 1 has "0" (place holder) followed by 3 values of ride height (mm).
! Other rows have pitch (deg) followed by 3 values of CFX2 (-).
FX_AERO_SHAPING_2_CARPET 2D_LINEAR
 0, 0, 6.35, 12.7
 -2.68, 0.80622, 0.809769, 0.81924
 0, 0.79805, 0.801566, 0.810941
ENDTABLE
FX_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CFX2
FX_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CFX2
PITCH_START_FX_AERO 0 ; deg ! Offset subtracted from pitch
PITCH_SCALE_FX_AERO 1 ! Scale factor divided into (pitch - PITCH_START_FX_AERO)
Z_START_FX_AERO     0 ; mm ! Offset subtracted from ride height
Z_SCALE_FX_AERO     1 ! Scale factor divided into (ride height - Z_START_FX_AERO)

! FX_TIRE: Tire longitudinal force (Fx) as a function of vertical load (Fz) and
! longitudinal slip (Kappa). Fx can be a nonlinear CARPET function of Fz and Kappa or
! a function of Kappa multiplied by a function FX_TIRE_FZ of Fz (CONSTANT,
! COEFFICIENT, or TABLE). Fx from the calculation can be adjusted with FX_TIRE_GAIN
! and FX_TIRE_OFFSET. Kappa used in the calculation can be adjusted with
! KAPPA_SCALE_FX_TIRE and KAPPA_START_FX_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FX_TIRE and FZ_START_FX_TIRE. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1) 2D_FROM_ZERO ! axle 1, left side
 0, 222.41, 667.23, 1112.06, 1556.88, 2001.7
 0.005, 427.092502, 272.340707, 195.266844, 198.772486, 283.045793
 0.01, 552.60837, 468.221633, 442.558518, 494.882485, 626.602731
 0.015, 644.544181, 650.682725, 679.880841, 781.625422, 960.187203
 0.02, 707.111064, 815.566675, 903.396334, 1055.170045, 1279.646798
 0.025, 748.484848, 960.861109, 1110.384465, 1312.55562, 1581.693836
 0.03, 775.70751, 1086.392546, 1299.280797, 1551.770216, 1863.999229
 0.035, 793.668532, 1193.283718, 1469.561327, 1771.720905, 2125.180914
 0.04, 805.526153, 1283.391755, 1621.537877, 1972.123892, 2364.711779
 0.045, 813.290965, 1358.866483, 1756.122777, 2153.343485, 2582.775533
 0.05, 818.254289, 1421.853723, 1874.606899, 2316.224401, 2780.100797
 0.055, 821.263955, 1474.332043, 1978.473281, 2461.929406, 2957.800958
 0.06, 822.88711, 1518.037584, 2069.261896, 2591.802751, 3117.229611
 0.065, 823.515199, 1554.450713, 2148.474018, 2707.263418, 3259.864454
 0.07, 823.420452, 1584.808925, 2217.51662, 2809.727721, 3387.216548
 0.075, 822.798146, 1610.137089, 2277.671679, 2900.554591, 3500.76715
 0.08, 821.790624, 1631.275921, 2330.084165, 2981.015329, 3601.925455
 0.085, 820.50153, 1648.916671, 2375.762937, 3052.275813, 3692.004134
 0.09, 819.009152, 1663.625156, 2415.58874, 3115.389827, 3772.204651
 0.095, 817.371318, 1675.866212, 2450.326669, 3171.299949, 3843.61593
 0.1, 815.632953, 1686.023723, 2480.636395, 3220.843334, 3907.214356
 0.105, 813.826976, 1694.413955, 2507.087291, 3264.759721, 3963.870444
 0.11, 811.98052, 1701.300245, 2530.169549, 3303.699438, 4014.357741
 0.115, 810.112267, 1706.901443, 2550.304862, 3338.234084, 4059.359938
 0.12, 808.238232, 1711.401263, 2567.857093, 3368.864527, 4099.480659
 0.125, 806.36998, 1714.954946, 2583.139843, 3396.029806, 4135.252354
 0.13, 804.516851, 1717.691935, 2596.424452, 3420.115139, 4167.144757
 0.135, 802.685074, 1719.722993, 2607.945786, 3441.458143, 4195.571107
 0.14, 800.880432, 1721.143309, 2617.90713, 3460.355071, 4220.896603
 0.145, 799.106037, 1722.032953, 2626.486857, 3477.066144, 4243.443295
 0.15, 797.365893, 1722.461317, 2633.838875, 3491.821335, 4263.496761
 0.155, 795.66089, 1722.488006, 2640.0993, 3504.822592, 4281.307879
 0.16, 793.992808, 1722.16462, 2645.386009, 3516.24918, 4297.100839
 0.165, 792.36209, 1721.536087, 2649.803536, 3526.259009, 4311.074032
 0.17, 790.769628, 1720.641105, 2653.443515, 3534.993089, 4323.403164
 0.175, 789.215419, 1719.513926, 2656.387792, 3542.57508, 4334.246145
 0.18, 787.699466, 1718.184353, 2658.707983, 3549.117077, 4343.74265
 0.185, 786.220433, 1716.677741, 2660.467254, 3554.717831, 4352.018563
 0.19, 784.778765, 1715.017221, 2661.722542, 3559.466306, 4359.18598
 0.195, 783.373572, 1713.223253, 2662.525001, 3563.441235, 4365.34543
 0.2, 782.003965, 1711.313188, 2662.919113, 3566.714235, 4370.588102
 0.205, 780.669499, 1709.303037, 2662.944913, 3569.348916, 4374.994954
 0.21, 779.36884, 1707.206591, 2662.639765, 3571.403994, 4378.639825
 0.215, 778.101542, 1705.03586, 2662.035252, 3572.930178, 4381.58944
 0.22, 776.866271, 1702.802408, 2661.160732, 3573.975065, 4383.903404
 0.225, 775.662138, 1700.515134, 2660.042894, 3574.581357, 4385.636875
 0.23, 774.489142, 1698.182932, 2658.704869, 3574.78731, 4386.838784
 0.235, 773.34506, 1695.81381, 2657.168899, 3574.628064, 4387.554058
 0.24, 772.230336, 1693.41444, 2655.45411, 3574.135201, 4387.82451
 0.245, 771.142746, 1690.99105, 2653.578296, 3573.33808, 4387.68617
 0.25, 770.082291, 1688.548532, 2651.557025, 3572.2625, 4387.17418
 0.255, 769.048524, 1686.092225, 2649.404976, 3570.932482, 4386.319232
 0.26, 768.039223, 1683.626132, 2647.135494, 3569.370712, 4385.149795
 0.265, 767.054832, 1681.154256, 2644.760589, 3567.596762, 4383.691669
 0.27, 766.094462, 1678.680156, 2642.291383, 3565.629315, 4381.969318
 0.275, 765.156777, 1676.206946, 2639.737215, 3563.485273, 4380.004539
 0.28, 764.241333, 1673.736849, 2637.107872, 3561.17976, 4377.816905
 0.285, 763.347241, 1671.27298, 2634.411806, 3558.727456, 4375.425986
 0.29, 762.4745, 1668.816673, 2631.655688, 3556.141261, 4372.847798
 0.295, 761.621776, 1666.370597, 2628.847527, 3553.43274, 4370.098798
 0.3, 760.788625, 1663.936086, 2625.993104, 3550.613903, 4367.193666
 0.305, 759.974156, 1661.51492, 2623.098203, 3547.694092, 4364.144856
 0.31, 759.178369, 1659.107988, 2620.168605, 3544.683091, 4360.965268
 0.315, 758.400375, 1656.71707, 2617.20876, 3541.589354, 4357.666468
 0.32, 757.63973, 1654.34261, 2614.223559, 3538.420887, 4354.259131
 0.325, 756.895543, 1651.985498, 2611.217007, 3535.185697, 4350.7526
 0.33, 756.167814, 1649.647069, 2608.192218, 3531.890011, 4347.155769
 0.335, 755.455654, 1647.327767, 2605.153639, 3528.540056, 4343.477536
 0.34, 754.758618, 1645.028037, 2602.103939, 3525.142061, 4339.725907
 0.345, 754.076706, 1642.748325, 2599.046232, 3521.701363, 4335.90711
 0.35, 753.409028, 1640.489519, 2595.983188, 3518.222855, 4332.028707
 0.355, 752.755139, 1638.251174, 2592.91703, 3514.710985, 4328.096481
 0.36, 752.115041, 1636.034626, 2589.849982, 3511.170647, 4324.116213
 0.365, 751.487842, 1633.838985, 2586.784269, 3507.604954, 4320.093688
 0.37, 750.873542, 1631.66514, 2583.722115, 3504.018354, 4316.033353
 0.375, 750.271698, 1629.513536, 2580.664408, 3500.413961, 4311.939656
 0.38, 749.681419, 1627.383283, 2577.613819, 3496.794889, 4307.81749
 0.385, 749.103151, 1625.275272, 2574.570792, 3493.163807, 4303.67086
 0.39, 748.536003, 1623.189057, 2571.537106, 3489.524274, 4299.502878
 0.395, 747.98042, 1621.125082, 2568.514095, 3485.878068, 4295.317103
 0.4, 747.435068, 1619.082905, 2565.50265, 3482.227858, 4291.117538
 0.405, 746.900392, 1617.062523, 2562.504105, 3478.575425, 4286.905963
 0.41, 746.375502, 1615.063938, 2559.518905, 3474.922992, 4282.686382
 0.415, 745.860843, 1613.087149, 2556.547939, 3471.272782, 4278.460128
 0.42, 745.355525, 1611.132156, 2553.592541, 3467.626132, 4274.230761
 0.425, 744.859549, 1609.198515, 2550.652713, 3463.984374, 4269.999614
 0.43, 744.372914, 1607.28578, 2547.729342, 3460.349733, 4265.769356
 0.435, 743.89473, 1605.394842, 2544.822876, 3456.722655, 4261.541768
 0.44, 743.425443, 1603.524366, 2541.934201, 3453.105362, 4257.318628
 0.445, 742.964607, 1601.674796, 2539.06332, 3449.498301, 4253.101271
 0.45, 742.511778, 1599.846132, 2536.211122, 3445.902804, 4248.891475
 0.455, 742.066956, 1598.037931, 2533.377161, 3442.319763, 4244.691021
 0.46, 741.629696, 1596.249747, 2530.562772, 3438.750511, 4240.500798
 0.465, 741.200443, 1594.481579, 2527.76751, 3435.195049, 4236.32214
 0.47, 740.778307, 1592.732984, 2524.991821, 3431.655156, 4232.155937
 0.475, 740.363288, 1591.004406, 2522.235704, 3428.130386, 4228.003969
 0.48, 739.955386, 1589.294955, 2519.500049, 3424.62252, 4223.866679
 0.485, 739.554157, 1587.604631, 2516.783966, 3421.131557, 4219.744959
 0.49, 739.160045, 1585.933435, 2514.088344, 3417.658387, 4215.639696
 0.495, 738.77216, 1584.280921, 2511.413185, 3414.203009, 4211.551337
 0.5, 738.390503, 1582.64709, 2508.758487, 3410.766315, 4207.481661
 0.505, 738.015073, 1581.031052, 2506.124251, 3407.348302, 4203.430222
 0.51, 737.645871, 1579.433251, 2503.510032, 3403.949417, 4199.397911
 0.515, 737.282451, 1577.853688, 2500.91672, 3400.570549, 4195.385616
 0.52, 736.924814, 1576.291028, 2498.34387, 3397.211699, 4191.393339
 0.525, 736.57296, 1574.746161, 2495.791481, 3393.87242, 4187.421968
 0.53, 736.226444, 1573.218198, 2493.259999, 3390.554048, 4183.471504
 0.535, 735.885265, 1571.707138, 2490.748534, 3387.256137, 4179.542836
 0.54, 735.549424, 1570.21298, 2488.257531, 3383.979134, 4175.635519
 0.545, 735.218922, 1568.734837, 2485.786989, 3380.723037, 4171.750889
 0.55, 734.893312, 1567.273597, 2483.336465, 3377.488291, 4167.888499
 0.555, 734.572595, 1565.827925, 2480.906402, 3374.274452, 4164.048796
 0.56, 734.256327, 1564.398267, 2478.495912, 3371.081965, 4160.232223
 0.565, 733.945396, 1562.983733, 2476.105883, 3367.910829, 4156.438336
 0.57, 733.638469, 1561.585213, 2473.735872, 3364.761489, 4152.66758
 0.575, 733.336435, 1560.201372, 2471.385432, 3361.633501, 4148.920845
 0.58, 733.038849, 1558.832654, 2469.054565, 3358.526864, 4145.19724
 0.585, 732.745267, 1557.478616, 2466.74327, 3355.441578, 4141.49721
 0.59, 732.456132, 1556.139257, 2464.451102, 3352.378089, 4137.820756
 0.595, 732.171001, 1554.814132, 2462.178951, 3349.336396, 4134.168323
 0.6, 731.889874, 1553.503242, 2459.925483, 3346.31561, 4130.539465
 0.605, 731.61275, 1552.206586, 2457.690697, 3343.31662, 4126.934628
 0.61, 731.339629, 1550.923274, 2455.475484, 3340.338982, 4123.35381
 0.615, 731.070067, 1549.653752, 2453.278508, 3337.38314, 4119.796569
 0.62, 730.804508, 1548.39713, 2451.100215, 3334.448204, 4116.263348
 0.625, 730.542508, 1547.154298, 2448.940159, 3331.53462, 4112.753702
 0.63, 730.284066, 1545.924365, 2446.798786, 3328.641942, 4109.268077
 0.635, 730.028739, 1544.706887, 2444.675206, 3325.770616, 4105.806027
 0.64, 729.777414, 1543.502309, 2442.569863, 3322.920197, 4102.367998
 0.645, 729.529203, 1542.310186, 2440.481869, 3320.090684, 4098.9531
 0.65, 729.284107, 1541.130518, 2438.412112, 3317.281633, 4095.562222
 0.655, 729.042568, 1539.96286, 2436.359258, 3314.493934, 4092.194919
 0.66, 728.803699, 1538.807213, 2434.324198, 3311.726251, 4088.850747
 0.665, 728.568388, 1537.663131, 2432.30604, 3308.979476, 4085.530151
 0.67, 728.336191, 1536.531059, 2430.305231, 3306.252717, 4082.232686
 0.675, 728.106663, 1535.410107, 2428.32088, 3303.54642, 4078.958351
 0.68, 727.880248, 1534.300721, 2426.353432, 3300.859695, 4075.706702
 0.685, 727.656503, 1533.202456, 2424.402443, 3298.193432, 4072.478184
 0.69, 727.435871, 1532.115311, 2422.467467, 3295.546741, 4069.272797
 0.695, 727.217908, 1531.038841, 2420.549395, 3292.920067, 4066.08965
 0.7, 727.002615, 1529.973048, 2418.646891, 3290.312965, 4062.92919
 0.705, 726.78999, 1528.917485, 2416.760401, 3287.724991, 4059.791416
 0.71, 726.579589, 1527.873043, 2414.88948, 3285.156589, 4056.675437
 0.715, 726.372302, 1526.838387, 2413.034572, 3282.606869, 4053.582145
 0.72, 726.167239, 1525.813962, 2411.194788, 3280.076721, 4050.510205
 0.725, 725.964845, 1524.799323, 2409.370128, 3277.565256, 4047.460505
 0.73, 725.76512, 1523.794915, 2407.561037, 3275.072029, 4044.432602
 0.735, 725.567174, 1522.800293, 2405.766625, 3272.597929, 4041.426495
 0.74, 725.371897, 1521.815012, 2403.986892, 3270.142067, 4038.441294
 0.745, 725.178844, 1520.839073, 2402.221839, 3267.704887, 4035.477445
 0.75, 724.988461, 1519.87292, 2400.471464, 3265.2855, 4032.534948
 0.755, 724.799856, 1518.915663, 2398.735769, 3262.883906, 4029.613357
 0.76, 724.613476, 1517.967302, 2397.013863, 3260.500105, 4026.712672
 0.765, 724.429319, 1517.028283, 2395.305746, 3258.134542, 4023.832895
 0.77, 724.247387, 1516.09816, 2393.611864, 3255.786326, 4020.973134
 0.775, 724.067234, 1515.176489, 2391.931771, 3253.455014, 4018.13428
 0.78, 723.88975, 1514.263269, 2390.265468, 3251.141495, 4015.314998
 0.785, 723.713601, 1513.358946, 2388.61251, 3248.844879, 4012.516178
 0.79, 723.539675, 1512.463075, 2386.972896, 3246.565166, 4009.737375
 0.795, 723.367529, 1511.57521, 2385.346627, 3244.302357, 4006.978144
 0.8, 723.197607, 1510.695352, 2383.733257, 3242.05645, 4004.238486
 0.805, 723.029465, 1509.823946, 2382.132788, 3239.826558, 4001.518399
 0.81, 722.863101, 1508.960546, 2380.545218, 3237.613568, 3998.81744
 0.815, 722.698517, 1508.104709, 2378.970103, 3235.416592, 3996.135608
 0.82, 722.535712, 1507.256433, 2377.407443, 3233.23563, 3993.472904
 0.825, 722.374686, 1506.416164, 2375.857684, 3231.070682, 3990.828882
 0.83, 722.21544, 1505.583458, 2374.319934, 3228.921302, 3988.203542
 0.835, 722.057973, 1504.758313, 2372.794195, 3226.787935, 3985.59644
 0.84, 721.902285, 1503.940285, 2371.280465, 3224.669693, 3983.008021
 0.845, 721.747932, 1503.129819, 2369.778746, 3222.567019, 3980.43784
 0.85, 721.595358, 1502.326026, 2368.288592, 3220.479915, 3977.885451
 0.855, 721.444564, 1501.529795, 2366.810449, 3218.407489, 3975.350855
 0.86, 721.295103, 1500.740236, 2365.343426, 3216.350187, 3972.834497
 0.865, 721.146978, 1499.957794, 2363.887968, 3214.307564, 3970.335042
 0.87, 721.000631, 1499.182024, 2362.444076, 3212.279621, 3967.853381
 0.875, 720.856064, 1498.413372, 2361.01086, 3210.266357, 3965.389067
 0.88, 720.712387, 1497.650947, 2359.588764, 3208.267771, 3962.942101
 0.885, 720.570489, 1496.895194, 2358.177788, 3206.282976, 3960.511593
 0.89, 720.430369, 1496.146114, 2356.777489, 3204.312414, 3958.098434
 0.895, 720.29114, 1495.403261, 2355.38831, 3202.356087, 3955.701288
 0.9, 720.15369, 1494.667081, 2354.009361, 3200.413549, 3953.321491
 0.905, 720.01713, 1493.936683, 2352.640644, 3198.484801, 3950.957707
 0.91, 719.882349, 1493.212513, 2351.282603, 3196.569842, 3948.609936
 0.915, 719.748457, 1492.49457, 2349.934792, 3194.668228, 3946.278624
 0.92, 719.616345, 1491.782855, 2348.597212, 3192.780404, 3943.963325
 0.925, 719.485568, 1491.076923, 2347.269419, 3190.905479, 3941.663596
 0.93, 719.35568, 1490.376773, 2345.951856, 3189.043454, 3939.379435
 0.935, 719.227126, 1489.682406, 2344.643634, 3187.194774, 3937.111287
 0.94, 719.099907, 1488.994266, 2343.345644, 3185.358994, 3934.858264
 0.945, 718.974022, 1488.311464, 2342.057439, 3183.536113, 3932.620809
 0.95, 718.849027, 1487.634, 2340.778131, 3181.725687, 3930.398034
 0.955, 718.725367, 1486.962319, 2339.508609, 3179.928162, 3928.190827
 0.96, 718.603041, 1486.295976, 2338.248428, 3178.142646, 3925.998299
 0.965, 718.481604, 1485.635415, 2336.997589, 3176.369586, 3923.820451
 0.97, 718.361502, 1484.979747, 2335.756091, 3174.608535, 3921.657281
 0.975, 718.24229, 1484.329862, 2334.523044, 3172.85994, 3919.508346
 0.98, 718.124412, 1483.684871, 2333.299339, 3171.123355, 3917.37409
 0.985, 718.007424, 1483.044772, 2332.08453, 3169.398335, 3915.254069
 0.99, 717.89177, 1482.410456, 2330.878617, 3167.684881, 3913.147837
 0.995, 717.777006, 1481.780588, 2329.681157, 3165.983437, 3911.055839
 1, 717.777006, 1481.780588, 2329.681157, 3165.983437, 3911.055839
ENDTABLE
FX_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1) 1 ! Scale factor divided into (Kappa - KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2) 2D_FROM_ZERO ! axle 1, right side
 0, 222.41, 667.23, 1112.06, 1556.88, 2001.7
 0.005, 427.092502, 272.340707, 195.266844, 198.772486, 283.045793
 0.01, 552.60837, 468.221633, 442.558518, 494.882485, 626.602731
 0.015, 644.544181, 650.682725, 679.880841, 781.625422, 960.187203
 0.02, 707.111064, 815.566675, 903.396334, 1055.170045, 1279.646798
 0.025, 748.484848, 960.861109, 1110.384465, 1312.55562, 1581.693836
 0.03, 775.70751, 1086.392546, 1299.280797, 1551.770216, 1863.999229
 0.035, 793.668532, 1193.283718, 1469.561327, 1771.720905, 2125.180914
 0.04, 805.526153, 1283.391755, 1621.537877, 1972.123892, 2364.711779
 0.045, 813.290965, 1358.866483, 1756.122777, 2153.343485, 2582.775533
 0.05, 818.254289, 1421.853723, 1874.606899, 2316.224401, 2780.100797
 0.055, 821.263955, 1474.332043, 1978.473281, 2461.929406, 2957.800958
 0.06, 822.88711, 1518.037584, 2069.261896, 2591.802751, 3117.229611
 0.065, 823.515199, 1554.450713, 2148.474018, 2707.263418, 3259.864454
 0.07, 823.420452, 1584.808925, 2217.51662, 2809.727721, 3387.216548
 0.075, 822.798146, 1610.137089, 2277.671679, 2900.554591, 3500.76715
 0.08, 821.790624, 1631.275921, 2330.084165, 2981.015329, 3601.925455
 0.085, 820.50153, 1648.916671, 2375.762937, 3052.275813, 3692.004134
 0.09, 819.009152, 1663.625156, 2415.58874, 3115.389827, 3772.204651
 0.095, 817.371318, 1675.866212, 2450.326669, 3171.299949, 3843.61593
 0.1, 815.632953, 1686.023723, 2480.636395, 3220.843334, 3907.214356
 0.105, 813.826976, 1694.413955, 2507.087291, 3264.759721, 3963.870444
 0.11, 811.98052, 1701.300245, 2530.169549, 3303.699438, 4014.357741
 0.115, 810.112267, 1706.901443, 2550.304862, 3338.234084, 4059.359938
 0.12, 808.238232, 1711.401263, 2567.857093, 3368.864527, 4099.480659
 0.125, 806.36998, 1714.954946, 2583.139843, 3396.029806, 4135.252354
 0.13, 804.516851, 1717.691935, 2596.424452, 3420.115139, 4167.144757
 0.135, 802.685074, 1719.722993, 2607.945786, 3441.458143, 4195.571107
 0.14, 800.880432, 1721.143309, 2617.90713, 3460.355071, 4220.896603
 0.145, 799.106037, 1722.032953, 2626.486857, 3477.066144, 4243.443295
 0.15, 797.365893, 1722.461317, 2633.838875, 3491.821335, 4263.496761
 0.155, 795.66089, 1722.488006, 2640.0993, 3504.822592, 4281.307879
 0.16, 793.992808, 1722.16462, 2645.386009, 3516.24918, 4297.100839
 0.165, 792.36209, 1721.536087, 2649.803536, 3526.259009, 4311.074032
 0.17, 790.769628, 1720.641105, 2653.443515, 3534.993089, 4323.403164
 0.175, 789.215419, 1719.513926, 2656.387792, 3542.57508, 4334.246145
 0.18, 787.699466, 1718.184353, 2658.707983, 3549.117077, 4343.74265
 0.185, 786.220433, 1716.677741, 2660.467254, 3554.717831, 4352.018563
 0.19, 784.778765, 1715.017221, 2661.722542, 3559.466306, 4359.18598
 0.195, 783.373572, 1713.223253, 2662.525001, 3563.441235, 4365.34543
 0.2, 782.003965, 1711.313188, 2662.919113, 3566.714235, 4370.588102
 0.205, 780.669499, 1709.303037, 2662.944913, 3569.348916, 4374.994954
 0.21, 779.36884, 1707.206591, 2662.639765, 3571.403994, 4378.639825
 0.215, 778.101542, 1705.03586, 2662.035252, 3572.930178, 4381.58944
 0.22, 776.866271, 1702.802408, 2661.160732, 3573.975065, 4383.903404
 0.225, 775.662138, 1700.515134, 2660.042894, 3574.581357, 4385.636875
 0.23, 774.489142, 1698.182932, 2658.704869, 3574.78731, 4386.838784
 0.235, 773.34506, 1695.81381, 2657.168899, 3574.628064, 4387.554058
 0.24, 772.230336, 1693.41444, 2655.45411, 3574.135201, 4387.82451
 0.245, 771.142746, 1690.99105, 2653.578296, 3573.33808, 4387.68617
 0.25, 770.082291, 1688.548532, 2651.557025, 3572.2625, 4387.17418
 0.255, 769.048524, 1686.092225, 2649.404976, 3570.932482, 4386.319232
 0.26, 768.039223, 1683.626132, 2647.135494, 3569.370712, 4385.149795
 0.265, 767.054832, 1681.154256, 2644.760589, 3567.596762, 4383.691669
 0.27, 766.094462, 1678.680156, 2642.291383, 3565.629315, 4381.969318
 0.275, 765.156777, 1676.206946, 2639.737215, 3563.485273, 4380.004539
 0.28, 764.241333, 1673.736849, 2637.107872, 3561.17976, 4377.816905
 0.285, 763.347241, 1671.27298, 2634.411806, 3558.727456, 4375.425986
 0.29, 762.4745, 1668.816673, 2631.655688, 3556.141261, 4372.847798
 0.295, 761.621776, 1666.370597, 2628.847527, 3553.43274, 4370.098798
 0.3, 760.788625, 1663.936086, 2625.993104, 3550.613903, 4367.193666
 0.305, 759.974156, 1661.51492, 2623.098203, 3547.694092, 4364.144856
 0.31, 759.178369, 1659.107988, 2620.168605, 3544.683091, 4360.965268
 0.315, 758.400375, 1656.71707, 2617.20876, 3541.589354, 4357.666468
 0.32, 757.63973, 1654.34261, 2614.223559, 3538.420887, 4354.259131
 0.325, 756.895543, 1651.985498, 2611.217007, 3535.185697, 4350.7526
 0.33, 756.167814, 1649.647069, 2608.192218, 3531.890011, 4347.155769
 0.335, 755.455654, 1647.327767, 2605.153639, 3528.540056, 4343.477536
 0.34, 754.758618, 1645.028037, 2602.103939, 3525.142061, 4339.725907
 0.345, 754.076706, 1642.748325, 2599.046232, 3521.701363, 4335.90711
 0.35, 753.409028, 1640.489519, 2595.983188, 3518.222855, 4332.028707
 0.355, 752.755139, 1638.251174, 2592.91703, 3514.710985, 4328.096481
 0.36, 752.115041, 1636.034626, 2589.849982, 3511.170647, 4324.116213
 0.365, 751.487842, 1633.838985, 2586.784269, 3507.604954, 4320.093688
 0.37, 750.873542, 1631.66514, 2583.722115, 3504.018354, 4316.033353
 0.375, 750.271698, 1629.513536, 2580.664408, 3500.413961, 4311.939656
 0.38, 749.681419, 1627.383283, 2577.613819, 3496.794889, 4307.81749
 0.385, 749.103151, 1625.275272, 2574.570792, 3493.163807, 4303.67086
 0.39, 748.536003, 1623.189057, 2571.537106, 3489.524274, 4299.502878
 0.395, 747.98042, 1621.125082, 2568.514095, 3485.878068, 4295.317103
 0.4, 747.435068, 1619.082905, 2565.50265, 3482.227858, 4291.117538
 0.405, 746.900392, 1617.062523, 2562.504105, 3478.575425, 4286.905963
 0.41, 746.375502, 1615.063938, 2559.518905, 3474.922992, 4282.686382
 0.415, 745.860843, 1613.087149, 2556.547939, 3471.272782, 4278.460128
 0.42, 745.355525, 1611.132156, 2553.592541, 3467.626132, 4274.230761
 0.425, 744.859549, 1609.198515, 2550.652713, 3463.984374, 4269.999614
 0.43, 744.372914, 1607.28578, 2547.729342, 3460.349733, 4265.769356
 0.435, 743.89473, 1605.394842, 2544.822876, 3456.722655, 4261.541768
 0.44, 743.425443, 1603.524366, 2541.934201, 3453.105362, 4257.318628
 0.445, 742.964607, 1601.674796, 2539.06332, 3449.498301, 4253.101271
 0.45, 742.511778, 1599.846132, 2536.211122, 3445.902804, 4248.891475
 0.455, 742.066956, 1598.037931, 2533.377161, 3442.319763, 4244.691021
 0.46, 741.629696, 1596.249747, 2530.562772, 3438.750511, 4240.500798
 0.465, 741.200443, 1594.481579, 2527.76751, 3435.195049, 4236.32214
 0.47, 740.778307, 1592.732984, 2524.991821, 3431.655156, 4232.155937
 0.475, 740.363288, 1591.004406, 2522.235704, 3428.130386, 4228.003969
 0.48, 739.955386, 1589.294955, 2519.500049, 3424.62252, 4223.866679
 0.485, 739.554157, 1587.604631, 2516.783966, 3421.131557, 4219.744959
 0.49, 739.160045, 1585.933435, 2514.088344, 3417.658387, 4215.639696
 0.495, 738.77216, 1584.280921, 2511.413185, 3414.203009, 4211.551337
 0.5, 738.390503, 1582.64709, 2508.758487, 3410.766315, 4207.481661
 0.505, 738.015073, 1581.031052, 2506.124251, 3407.348302, 4203.430222
 0.51, 737.645871, 1579.433251, 2503.510032, 3403.949417, 4199.397911
 0.515, 737.282451, 1577.853688, 2500.91672, 3400.570549, 4195.385616
 0.52, 736.924814, 1576.291028, 2498.34387, 3397.211699, 4191.393339
 0.525, 736.57296, 1574.746161, 2495.791481, 3393.87242, 4187.421968
 0.53, 736.226444, 1573.218198, 2493.259999, 3390.554048, 4183.471504
 0.535, 735.885265, 1571.707138, 2490.748534, 3387.256137, 4179.542836
 0.54, 735.549424, 1570.21298, 2488.257531, 3383.979134, 4175.635519
 0.545, 735.218922, 1568.734837, 2485.786989, 3380.723037, 4171.750889
 0.55, 734.893312, 1567.273597, 2483.336465, 3377.488291, 4167.888499
 0.555, 734.572595, 1565.827925, 2480.906402, 3374.274452, 4164.048796
 0.56, 734.256327, 1564.398267, 2478.495912, 3371.081965, 4160.232223
 0.565, 733.945396, 1562.983733, 2476.105883, 3367.910829, 4156.438336
 0.57, 733.638469, 1561.585213, 2473.735872, 3364.761489, 4152.66758
 0.575, 733.336435, 1560.201372, 2471.385432, 3361.633501, 4148.920845
 0.58, 733.038849, 1558.832654, 2469.054565, 3358.526864, 4145.19724
 0.585, 732.745267, 1557.478616, 2466.74327, 3355.441578, 4141.49721
 0.59, 732.456132, 1556.139257, 2464.451102, 3352.378089, 4137.820756
 0.595, 732.171001, 1554.814132, 2462.178951, 3349.336396, 4134.168323
 0.6, 731.889874, 1553.503242, 2459.925483, 3346.31561, 4130.539465
 0.605, 731.61275, 1552.206586, 2457.690697, 3343.31662, 4126.934628
 0.61, 731.339629, 1550.923274, 2455.475484, 3340.338982, 4123.35381
 0.615, 731.070067, 1549.653752, 2453.278508, 3337.38314, 4119.796569
 0.62, 730.804508, 1548.39713, 2451.100215, 3334.448204, 4116.263348
 0.625, 730.542508, 1547.154298, 2448.940159, 3331.53462, 4112.753702
 0.63, 730.284066, 1545.924365, 2446.798786, 3328.641942, 4109.268077
 0.635, 730.028739, 1544.706887, 2444.675206, 3325.770616, 4105.806027
 0.64, 729.777414, 1543.502309, 2442.569863, 3322.920197, 4102.367998
 0.645, 729.529203, 1542.310186, 2440.481869, 3320.090684, 4098.9531
 0.65, 729.284107, 1541.130518, 2438.412112, 3317.281633, 4095.562222
 0.655, 729.042568, 1539.96286, 2436.359258, 3314.493934, 4092.194919
 0.66, 728.803699, 1538.807213, 2434.324198, 3311.726251, 4088.850747
 0.665, 728.568388, 1537.663131, 2432.30604, 3308.979476, 4085.530151
 0.67, 728.336191, 1536.531059, 2430.305231, 3306.252717, 4082.232686
 0.675, 728.106663, 1535.410107, 2428.32088, 3303.54642, 4078.958351
 0.68, 727.880248, 1534.300721, 2426.353432, 3300.859695, 4075.706702
 0.685, 727.656503, 1533.202456, 2424.402443, 3298.193432, 4072.478184
 0.69, 727.435871, 1532.115311, 2422.467467, 3295.546741, 4069.272797
 0.695, 727.217908, 1531.038841, 2420.549395, 3292.920067, 4066.08965
 0.7, 727.002615, 1529.973048, 2418.646891, 3290.312965, 4062.92919
 0.705, 726.78999, 1528.917485, 2416.760401, 3287.724991, 4059.791416
 0.71, 726.579589, 1527.873043, 2414.88948, 3285.156589, 4056.675437
 0.715, 726.372302, 1526.838387, 2413.034572, 3282.606869, 4053.582145
 0.72, 726.167239, 1525.813962, 2411.194788, 3280.076721, 4050.510205
 0.725, 725.964845, 1524.799323, 2409.370128, 3277.565256, 4047.460505
 0.73, 725.76512, 1523.794915, 2407.561037, 3275.072029, 4044.432602
 0.735, 725.567174, 1522.800293, 2405.766625, 3272.597929, 4041.426495
 0.74, 725.371897, 1521.815012, 2403.986892, 3270.142067, 4038.441294
 0.745, 725.178844, 1520.839073, 2402.221839, 3267.704887, 4035.477445
 0.75, 724.988461, 1519.87292, 2400.471464, 3265.2855, 4032.534948
 0.755, 724.799856, 1518.915663, 2398.735769, 3262.883906, 4029.613357
 0.76, 724.613476, 1517.967302, 2397.013863, 3260.500105, 4026.712672
 0.765, 724.429319, 1517.028283, 2395.305746, 3258.134542, 4023.832895
 0.77, 724.247387, 1516.09816, 2393.611864, 3255.786326, 4020.973134
 0.775, 724.067234, 1515.176489, 2391.931771, 3253.455014, 4018.13428
 0.78, 723.88975, 1514.263269, 2390.265468, 3251.141495, 4015.314998
 0.785, 723.713601, 1513.358946, 2388.61251, 3248.844879, 4012.516178
 0.79, 723.539675, 1512.463075, 2386.972896, 3246.565166, 4009.737375
 0.795, 723.367529, 1511.57521, 2385.346627, 3244.302357, 4006.978144
 0.8, 723.197607, 1510.695352, 2383.733257, 3242.05645, 4004.238486
 0.805, 723.029465, 1509.823946, 2382.132788, 3239.826558, 4001.518399
 0.81, 722.863101, 1508.960546, 2380.545218, 3237.613568, 3998.81744
 0.815, 722.698517, 1508.104709, 2378.970103, 3235.416592, 3996.135608
 0.82, 722.535712, 1507.256433, 2377.407443, 3233.23563, 3993.472904
 0.825, 722.374686, 1506.416164, 2375.857684, 3231.070682, 3990.828882
 0.83, 722.21544, 1505.583458, 2374.319934, 3228.921302, 3988.203542
 0.835, 722.057973, 1504.758313, 2372.794195, 3226.787935, 3985.59644
 0.84, 721.902285, 1503.940285, 2371.280465, 3224.669693, 3983.008021
 0.845, 721.747932, 1503.129819, 2369.778746, 3222.567019, 3980.43784
 0.85, 721.595358, 1502.326026, 2368.288592, 3220.479915, 3977.885451
 0.855, 721.444564, 1501.529795, 2366.810449, 3218.407489, 3975.350855
 0.86, 721.295103, 1500.740236, 2365.343426, 3216.350187, 3972.834497
 0.865, 721.146978, 1499.957794, 2363.887968, 3214.307564, 3970.335042
 0.87, 721.000631, 1499.182024, 2362.444076, 3212.279621, 3967.853381
 0.875, 720.856064, 1498.413372, 2361.01086, 3210.266357, 3965.389067
 0.88, 720.712387, 1497.650947, 2359.588764, 3208.267771, 3962.942101
 0.885, 720.570489, 1496.895194, 2358.177788, 3206.282976, 3960.511593
 0.89, 720.430369, 1496.146114, 2356.777489, 3204.312414, 3958.098434
 0.895, 720.29114, 1495.403261, 2355.38831, 3202.356087, 3955.701288
 0.9, 720.15369, 1494.667081, 2354.009361, 3200.413549, 3953.321491
 0.905, 720.01713, 1493.936683, 2352.640644, 3198.484801, 3950.957707
 0.91, 719.882349, 1493.212513, 2351.282603, 3196.569842, 3948.609936
 0.915, 719.748457, 1492.49457, 2349.934792, 3194.668228, 3946.278624
 0.92, 719.616345, 1491.782855, 2348.597212, 3192.780404, 3943.963325
 0.925, 719.485568, 1491.076923, 2347.269419, 3190.905479, 3941.663596
 0.93, 719.35568, 1490.376773, 2345.951856, 3189.043454, 3939.379435
 0.935, 719.227126, 1489.682406, 2344.643634, 3187.194774, 3937.111287
 0.94, 719.099907, 1488.994266, 2343.345644, 3185.358994, 3934.858264
 0.945, 718.974022, 1488.311464, 2342.057439, 3183.536113, 3932.620809
 0.95, 718.849027, 1487.634, 2340.778131, 3181.725687, 3930.398034
 0.955, 718.725367, 1486.962319, 2339.508609, 3179.928162, 3928.190827
 0.96, 718.603041, 1486.295976, 2338.248428, 3178.142646, 3925.998299
 0.965, 718.481604, 1485.635415, 2336.997589, 3176.369586, 3923.820451
 0.97, 718.361502, 1484.979747, 2335.756091, 3174.608535, 3921.657281
 0.975, 718.24229, 1484.329862, 2334.523044, 3172.85994, 3919.508346
 0.98, 718.124412, 1483.684871, 2333.299339, 3171.123355, 3917.37409
 0.985, 718.007424, 1483.044772, 2332.08453, 3169.398335, 3915.254069
 0.99, 717.89177, 1482.410456, 2330.878617, 3167.684881, 3913.147837
 0.995, 717.777006, 1481.780588, 2329.681157, 3165.983437, 3911.055839
 1, 717.777006, 1481.780588, 2329.681157, 3165.983437, 3911.055839
ENDTABLE
FX_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2) 1 ! Scale factor divided into (Kappa - KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1) 2D_FROM_ZERO ! axle 2, left side
 0, 222.41, 667.23, 1112.06, 1556.88, 2001.7
 0.005, 427.092502, 272.340707, 195.266844, 198.772486, 283.045793
 0.01, 552.60837, 468.221633, 442.558518, 494.882485, 626.602731
 0.015, 644.544181, 650.682725, 679.880841, 781.625422, 960.187203
 0.02, 707.111064, 815.566675, 903.396334, 1055.170045, 1279.646798
 0.025, 748.484848, 960.861109, 1110.384465, 1312.55562, 1581.693836
 0.03, 775.70751, 1086.392546, 1299.280797, 1551.770216, 1863.999229
 0.035, 793.668532, 1193.283718, 1469.561327, 1771.720905, 2125.180914
 0.04, 805.526153, 1283.391755, 1621.537877, 1972.123892, 2364.711779
 0.045, 813.290965, 1358.866483, 1756.122777, 2153.343485, 2582.775533
 0.05, 818.254289, 1421.853723, 1874.606899, 2316.224401, 2780.100797
 0.055, 821.263955, 1474.332043, 1978.473281, 2461.929406, 2957.800958
 0.06, 822.88711, 1518.037584, 2069.261896, 2591.802751, 3117.229611
 0.065, 823.515199, 1554.450713, 2148.474018, 2707.263418, 3259.864454
 0.07, 823.420452, 1584.808925, 2217.51662, 2809.727721, 3387.216548
 0.075, 822.798146, 1610.137089, 2277.671679, 2900.554591, 3500.76715
 0.08, 821.790624, 1631.275921, 2330.084165, 2981.015329, 3601.925455
 0.085, 820.50153, 1648.916671, 2375.762937, 3052.275813, 3692.004134
 0.09, 819.009152, 1663.625156, 2415.58874, 3115.389827, 3772.204651
 0.095, 817.371318, 1675.866212, 2450.326669, 3171.299949, 3843.61593
 0.1, 815.632953, 1686.023723, 2480.636395, 3220.843334, 3907.214356
 0.105, 813.826976, 1694.413955, 2507.087291, 3264.759721, 3963.870444
 0.11, 811.98052, 1701.300245, 2530.169549, 3303.699438, 4014.357741
 0.115, 810.112267, 1706.901443, 2550.304862, 3338.234084, 4059.359938
 0.12, 808.238232, 1711.401263, 2567.857093, 3368.864527, 4099.480659
 0.125, 806.36998, 1714.954946, 2583.139843, 3396.029806, 4135.252354
 0.13, 804.516851, 1717.691935, 2596.424452, 3420.115139, 4167.144757
 0.135, 802.685074, 1719.722993, 2607.945786, 3441.458143, 4195.571107
 0.14, 800.880432, 1721.143309, 2617.90713, 3460.355071, 4220.896603
 0.145, 799.106037, 1722.032953, 2626.486857, 3477.066144, 4243.443295
 0.15, 797.365893, 1722.461317, 2633.838875, 3491.821335, 4263.496761
 0.155, 795.66089, 1722.488006, 2640.0993, 3504.822592, 4281.307879
 0.16, 793.992808, 1722.16462, 2645.386009, 3516.24918, 4297.100839
 0.165, 792.36209, 1721.536087, 2649.803536, 3526.259009, 4311.074032
 0.17, 790.769628, 1720.641105, 2653.443515, 3534.993089, 4323.403164
 0.175, 789.215419, 1719.513926, 2656.387792, 3542.57508, 4334.246145
 0.18, 787.699466, 1718.184353, 2658.707983, 3549.117077, 4343.74265
 0.185, 786.220433, 1716.677741, 2660.467254, 3554.717831, 4352.018563
 0.19, 784.778765, 1715.017221, 2661.722542, 3559.466306, 4359.18598
 0.195, 783.373572, 1713.223253, 2662.525001, 3563.441235, 4365.34543
 0.2, 782.003965, 1711.313188, 2662.919113, 3566.714235, 4370.588102
 0.205, 780.669499, 1709.303037, 2662.944913, 3569.348916, 4374.994954
 0.21, 779.36884, 1707.206591, 2662.639765, 3571.403994, 4378.639825
 0.215, 778.101542, 1705.03586, 2662.035252, 3572.930178, 4381.58944
 0.22, 776.866271, 1702.802408, 2661.160732, 3573.975065, 4383.903404
 0.225, 775.662138, 1700.515134, 2660.042894, 3574.581357, 4385.636875
 0.23, 774.489142, 1698.182932, 2658.704869, 3574.78731, 4386.838784
 0.235, 773.34506, 1695.81381, 2657.168899, 3574.628064, 4387.554058
 0.24, 772.230336, 1693.41444, 2655.45411, 3574.135201, 4387.82451
 0.245, 771.142746, 1690.99105, 2653.578296, 3573.33808, 4387.68617
 0.25, 770.082291, 1688.548532, 2651.557025, 3572.2625, 4387.17418
 0.255, 769.048524, 1686.092225, 2649.404976, 3570.932482, 4386.319232
 0.26, 768.039223, 1683.626132, 2647.135494, 3569.370712, 4385.149795
 0.265, 767.054832, 1681.154256, 2644.760589, 3567.596762, 4383.691669
 0.27, 766.094462, 1678.680156, 2642.291383, 3565.629315, 4381.969318
 0.275, 765.156777, 1676.206946, 2639.737215, 3563.485273, 4380.004539
 0.28, 764.241333, 1673.736849, 2637.107872, 3561.17976, 4377.816905
 0.285, 763.347241, 1671.27298, 2634.411806, 3558.727456, 4375.425986
 0.29, 762.4745, 1668.816673, 2631.655688, 3556.141261, 4372.847798
 0.295, 761.621776, 1666.370597, 2628.847527, 3553.43274, 4370.098798
 0.3, 760.788625, 1663.936086, 2625.993104, 3550.613903, 4367.193666
 0.305, 759.974156, 1661.51492, 2623.098203, 3547.694092, 4364.144856
 0.31, 759.178369, 1659.107988, 2620.168605, 3544.683091, 4360.965268
 0.315, 758.400375, 1656.71707, 2617.20876, 3541.589354, 4357.666468
 0.32, 757.63973, 1654.34261, 2614.223559, 3538.420887, 4354.259131
 0.325, 756.895543, 1651.985498, 2611.217007, 3535.185697, 4350.7526
 0.33, 756.167814, 1649.647069, 2608.192218, 3531.890011, 4347.155769
 0.335, 755.455654, 1647.327767, 2605.153639, 3528.540056, 4343.477536
 0.34, 754.758618, 1645.028037, 2602.103939, 3525.142061, 4339.725907
 0.345, 754.076706, 1642.748325, 2599.046232, 3521.701363, 4335.90711
 0.35, 753.409028, 1640.489519, 2595.983188, 3518.222855, 4332.028707
 0.355, 752.755139, 1638.251174, 2592.91703, 3514.710985, 4328.096481
 0.36, 752.115041, 1636.034626, 2589.849982, 3511.170647, 4324.116213
 0.365, 751.487842, 1633.838985, 2586.784269, 3507.604954, 4320.093688
 0.37, 750.873542, 1631.66514, 2583.722115, 3504.018354, 4316.033353
 0.375, 750.271698, 1629.513536, 2580.664408, 3500.413961, 4311.939656
 0.38, 749.681419, 1627.383283, 2577.613819, 3496.794889, 4307.81749
 0.385, 749.103151, 1625.275272, 2574.570792, 3493.163807, 4303.67086
 0.39, 748.536003, 1623.189057, 2571.537106, 3489.524274, 4299.502878
 0.395, 747.98042, 1621.125082, 2568.514095, 3485.878068, 4295.317103
 0.4, 747.435068, 1619.082905, 2565.50265, 3482.227858, 4291.117538
 0.405, 746.900392, 1617.062523, 2562.504105, 3478.575425, 4286.905963
 0.41, 746.375502, 1615.063938, 2559.518905, 3474.922992, 4282.686382
 0.415, 745.860843, 1613.087149, 2556.547939, 3471.272782, 4278.460128
 0.42, 745.355525, 1611.132156, 2553.592541, 3467.626132, 4274.230761
 0.425, 744.859549, 1609.198515, 2550.652713, 3463.984374, 4269.999614
 0.43, 744.372914, 1607.28578, 2547.729342, 3460.349733, 4265.769356
 0.435, 743.89473, 1605.394842, 2544.822876, 3456.722655, 4261.541768
 0.44, 743.425443, 1603.524366, 2541.934201, 3453.105362, 4257.318628
 0.445, 742.964607, 1601.674796, 2539.06332, 3449.498301, 4253.101271
 0.45, 742.511778, 1599.846132, 2536.211122, 3445.902804, 4248.891475
 0.455, 742.066956, 1598.037931, 2533.377161, 3442.319763, 4244.691021
 0.46, 741.629696, 1596.249747, 2530.562772, 3438.750511, 4240.500798
 0.465, 741.200443, 1594.481579, 2527.76751, 3435.195049, 4236.32214
 0.47, 740.778307, 1592.732984, 2524.991821, 3431.655156, 4232.155937
 0.475, 740.363288, 1591.004406, 2522.235704, 3428.130386, 4228.003969
 0.48, 739.955386, 1589.294955, 2519.500049, 3424.62252, 4223.866679
 0.485, 739.554157, 1587.604631, 2516.783966, 3421.131557, 4219.744959
 0.49, 739.160045, 1585.933435, 2514.088344, 3417.658387, 4215.639696
 0.495, 738.77216, 1584.280921, 2511.413185, 3414.203009, 4211.551337
 0.5, 738.390503, 1582.64709, 2508.758487, 3410.766315, 4207.481661
 0.505, 738.015073, 1581.031052, 2506.124251, 3407.348302, 4203.430222
 0.51, 737.645871, 1579.433251, 2503.510032, 3403.949417, 4199.397911
 0.515, 737.282451, 1577.853688, 2500.91672, 3400.570549, 4195.385616
 0.52, 736.924814, 1576.291028, 2498.34387, 3397.211699, 4191.393339
 0.525, 736.57296, 1574.746161, 2495.791481, 3393.87242, 4187.421968
 0.53, 736.226444, 1573.218198, 2493.259999, 3390.554048, 4183.471504
 0.535, 735.885265, 1571.707138, 2490.748534, 3387.256137, 4179.542836
 0.54, 735.549424, 1570.21298, 2488.257531, 3383.979134, 4175.635519
 0.545, 735.218922, 1568.734837, 2485.786989, 3380.723037, 4171.750889
 0.55, 734.893312, 1567.273597, 2483.336465, 3377.488291, 4167.888499
 0.555, 734.572595, 1565.827925, 2480.906402, 3374.274452, 4164.048796
 0.56, 734.256327, 1564.398267, 2478.495912, 3371.081965, 4160.232223
 0.565, 733.945396, 1562.983733, 2476.105883, 3367.910829, 4156.438336
 0.57, 733.638469, 1561.585213, 2473.735872, 3364.761489, 4152.66758
 0.575, 733.336435, 1560.201372, 2471.385432, 3361.633501, 4148.920845
 0.58, 733.038849, 1558.832654, 2469.054565, 3358.526864, 4145.19724
 0.585, 732.745267, 1557.478616, 2466.74327, 3355.441578, 4141.49721
 0.59, 732.456132, 1556.139257, 2464.451102, 3352.378089, 4137.820756
 0.595, 732.171001, 1554.814132, 2462.178951, 3349.336396, 4134.168323
 0.6, 731.889874, 1553.503242, 2459.925483, 3346.31561, 4130.539465
 0.605, 731.61275, 1552.206586, 2457.690697, 3343.31662, 4126.934628
 0.61, 731.339629, 1550.923274, 2455.475484, 3340.338982, 4123.35381
 0.615, 731.070067, 1549.653752, 2453.278508, 3337.38314, 4119.796569
 0.62, 730.804508, 1548.39713, 2451.100215, 3334.448204, 4116.263348
 0.625, 730.542508, 1547.154298, 2448.940159, 3331.53462, 4112.753702
 0.63, 730.284066, 1545.924365, 2446.798786, 3328.641942, 4109.268077
 0.635, 730.028739, 1544.706887, 2444.675206, 3325.770616, 4105.806027
 0.64, 729.777414, 1543.502309, 2442.569863, 3322.920197, 4102.367998
 0.645, 729.529203, 1542.310186, 2440.481869, 3320.090684, 4098.9531
 0.65, 729.284107, 1541.130518, 2438.412112, 3317.281633, 4095.562222
 0.655, 729.042568, 1539.96286, 2436.359258, 3314.493934, 4092.194919
 0.66, 728.803699, 1538.807213, 2434.324198, 3311.726251, 4088.850747
 0.665, 728.568388, 1537.663131, 2432.30604, 3308.979476, 4085.530151
 0.67, 728.336191, 1536.531059, 2430.305231, 3306.252717, 4082.232686
 0.675, 728.106663, 1535.410107, 2428.32088, 3303.54642, 4078.958351
 0.68, 727.880248, 1534.300721, 2426.353432, 3300.859695, 4075.706702
 0.685, 727.656503, 1533.202456, 2424.402443, 3298.193432, 4072.478184
 0.69, 727.435871, 1532.115311, 2422.467467, 3295.546741, 4069.272797
 0.695, 727.217908, 1531.038841, 2420.549395, 3292.920067, 4066.08965
 0.7, 727.002615, 1529.973048, 2418.646891, 3290.312965, 4062.92919
 0.705, 726.78999, 1528.917485, 2416.760401, 3287.724991, 4059.791416
 0.71, 726.579589, 1527.873043, 2414.88948, 3285.156589, 4056.675437
 0.715, 726.372302, 1526.838387, 2413.034572, 3282.606869, 4053.582145
 0.72, 726.167239, 1525.813962, 2411.194788, 3280.076721, 4050.510205
 0.725, 725.964845, 1524.799323, 2409.370128, 3277.565256, 4047.460505
 0.73, 725.76512, 1523.794915, 2407.561037, 3275.072029, 4044.432602
 0.735, 725.567174, 1522.800293, 2405.766625, 3272.597929, 4041.426495
 0.74, 725.371897, 1521.815012, 2403.986892, 3270.142067, 4038.441294
 0.745, 725.178844, 1520.839073, 2402.221839, 3267.704887, 4035.477445
 0.75, 724.988461, 1519.87292, 2400.471464, 3265.2855, 4032.534948
 0.755, 724.799856, 1518.915663, 2398.735769, 3262.883906, 4029.613357
 0.76, 724.613476, 1517.967302, 2397.013863, 3260.500105, 4026.712672
 0.765, 724.429319, 1517.028283, 2395.305746, 3258.134542, 4023.832895
 0.77, 724.247387, 1516.09816, 2393.611864, 3255.786326, 4020.973134
 0.775, 724.067234, 1515.176489, 2391.931771, 3253.455014, 4018.13428
 0.78, 723.88975, 1514.263269, 2390.265468, 3251.141495, 4015.314998
 0.785, 723.713601, 1513.358946, 2388.61251, 3248.844879, 4012.516178
 0.79, 723.539675, 1512.463075, 2386.972896, 3246.565166, 4009.737375
 0.795, 723.367529, 1511.57521, 2385.346627, 3244.302357, 4006.978144
 0.8, 723.197607, 1510.695352, 2383.733257, 3242.05645, 4004.238486
 0.805, 723.029465, 1509.823946, 2382.132788, 3239.826558, 4001.518399
 0.81, 722.863101, 1508.960546, 2380.545218, 3237.613568, 3998.81744
 0.815, 722.698517, 1508.104709, 2378.970103, 3235.416592, 3996.135608
 0.82, 722.535712, 1507.256433, 2377.407443, 3233.23563, 3993.472904
 0.825, 722.374686, 1506.416164, 2375.857684, 3231.070682, 3990.828882
 0.83, 722.21544, 1505.583458, 2374.319934, 3228.921302, 3988.203542
 0.835, 722.057973, 1504.758313, 2372.794195, 3226.787935, 3985.59644
 0.84, 721.902285, 1503.940285, 2371.280465, 3224.669693, 3983.008021
 0.845, 721.747932, 1503.129819, 2369.778746, 3222.567019, 3980.43784
 0.85, 721.595358, 1502.326026, 2368.288592, 3220.479915, 3977.885451
 0.855, 721.444564, 1501.529795, 2366.810449, 3218.407489, 3975.350855
 0.86, 721.295103, 1500.740236, 2365.343426, 3216.350187, 3972.834497
 0.865, 721.146978, 1499.957794, 2363.887968, 3214.307564, 3970.335042
 0.87, 721.000631, 1499.182024, 2362.444076, 3212.279621, 3967.853381
 0.875, 720.856064, 1498.413372, 2361.01086, 3210.266357, 3965.389067
 0.88, 720.712387, 1497.650947, 2359.588764, 3208.267771, 3962.942101
 0.885, 720.570489, 1496.895194, 2358.177788, 3206.282976, 3960.511593
 0.89, 720.430369, 1496.146114, 2356.777489, 3204.312414, 3958.098434
 0.895, 720.29114, 1495.403261, 2355.38831, 3202.356087, 3955.701288
 0.9, 720.15369, 1494.667081, 2354.009361, 3200.413549, 3953.321491
 0.905, 720.01713, 1493.936683, 2352.640644, 3198.484801, 3950.957707
 0.91, 719.882349, 1493.212513, 2351.282603, 3196.569842, 3948.609936
 0.915, 719.748457, 1492.49457, 2349.934792, 3194.668228, 3946.278624
 0.92, 719.616345, 1491.782855, 2348.597212, 3192.780404, 3943.963325
 0.925, 719.485568, 1491.076923, 2347.269419, 3190.905479, 3941.663596
 0.93, 719.35568, 1490.376773, 2345.951856, 3189.043454, 3939.379435
 0.935, 719.227126, 1489.682406, 2344.643634, 3187.194774, 3937.111287
 0.94, 719.099907, 1488.994266, 2343.345644, 3185.358994, 3934.858264
 0.945, 718.974022, 1488.311464, 2342.057439, 3183.536113, 3932.620809
 0.95, 718.849027, 1487.634, 2340.778131, 3181.725687, 3930.398034
 0.955, 718.725367, 1486.962319, 2339.508609, 3179.928162, 3928.190827
 0.96, 718.603041, 1486.295976, 2338.248428, 3178.142646, 3925.998299
 0.965, 718.481604, 1485.635415, 2336.997589, 3176.369586, 3923.820451
 0.97, 718.361502, 1484.979747, 2335.756091, 3174.608535, 3921.657281
 0.975, 718.24229, 1484.329862, 2334.523044, 3172.85994, 3919.508346
 0.98, 718.124412, 1483.684871, 2333.299339, 3171.123355, 3917.37409
 0.985, 718.007424, 1483.044772, 2332.08453, 3169.398335, 3915.254069
 0.99, 717.89177, 1482.410456, 2330.878617, 3167.684881, 3913.147837
 0.995, 717.777006, 1481.780588, 2329.681157, 3165.983437, 3911.055839
 1, 717.777006, 1481.780588, 2329.681157, 3165.983437, 3911.055839
ENDTABLE
FX_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1) 1 ! Scale factor divided into (Kappa - KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2) 2D_FROM_ZERO ! axle 2, right side
 0, 222.41, 667.23, 1112.06, 1556.88, 2001.7
 0.005, 427.092502, 272.340707, 195.266844, 198.772486, 283.045793
 0.01, 552.60837, 468.221633, 442.558518, 494.882485, 626.602731
 0.015, 644.544181, 650.682725, 679.880841, 781.625422, 960.187203
 0.02, 707.111064, 815.566675, 903.396334, 1055.170045, 1279.646798
 0.025, 748.484848, 960.861109, 1110.384465, 1312.55562, 1581.693836
 0.03, 775.70751, 1086.392546, 1299.280797, 1551.770216, 1863.999229
 0.035, 793.668532, 1193.283718, 1469.561327, 1771.720905, 2125.180914
 0.04, 805.526153, 1283.391755, 1621.537877, 1972.123892, 2364.711779
 0.045, 813.290965, 1358.866483, 1756.122777, 2153.343485, 2582.775533
 0.05, 818.254289, 1421.853723, 1874.606899, 2316.224401, 2780.100797
 0.055, 821.263955, 1474.332043, 1978.473281, 2461.929406, 2957.800958
 0.06, 822.88711, 1518.037584, 2069.261896, 2591.802751, 3117.229611
 0.065, 823.515199, 1554.450713, 2148.474018, 2707.263418, 3259.864454
 0.07, 823.420452, 1584.808925, 2217.51662, 2809.727721, 3387.216548
 0.075, 822.798146, 1610.137089, 2277.671679, 2900.554591, 3500.76715
 0.08, 821.790624, 1631.275921, 2330.084165, 2981.015329, 3601.925455
 0.085, 820.50153, 1648.916671, 2375.762937, 3052.275813, 3692.004134
 0.09, 819.009152, 1663.625156, 2415.58874, 3115.389827, 3772.204651
 0.095, 817.371318, 1675.866212, 2450.326669, 3171.299949, 3843.61593
 0.1, 815.632953, 1686.023723, 2480.636395, 3220.843334, 3907.214356
 0.105, 813.826976, 1694.413955, 2507.087291, 3264.759721, 3963.870444
 0.11, 811.98052, 1701.300245, 2530.169549, 3303.699438, 4014.357741
 0.115, 810.112267, 1706.901443, 2550.304862, 3338.234084, 4059.359938
 0.12, 808.238232, 1711.401263, 2567.857093, 3368.864527, 4099.480659
 0.125, 806.36998, 1714.954946, 2583.139843, 3396.029806, 4135.252354
 0.13, 804.516851, 1717.691935, 2596.424452, 3420.115139, 4167.144757
 0.135, 802.685074, 1719.722993, 2607.945786, 3441.458143, 4195.571107
 0.14, 800.880432, 1721.143309, 2617.90713, 3460.355071, 4220.896603
 0.145, 799.106037, 1722.032953, 2626.486857, 3477.066144, 4243.443295
 0.15, 797.365893, 1722.461317, 2633.838875, 3491.821335, 4263.496761
 0.155, 795.66089, 1722.488006, 2640.0993, 3504.822592, 4281.307879
 0.16, 793.992808, 1722.16462, 2645.386009, 3516.24918, 4297.100839
 0.165, 792.36209, 1721.536087, 2649.803536, 3526.259009, 4311.074032
 0.17, 790.769628, 1720.641105, 2653.443515, 3534.993089, 4323.403164
 0.175, 789.215419, 1719.513926, 2656.387792, 3542.57508, 4334.246145
 0.18, 787.699466, 1718.184353, 2658.707983, 3549.117077, 4343.74265
 0.185, 786.220433, 1716.677741, 2660.467254, 3554.717831, 4352.018563
 0.19, 784.778765, 1715.017221, 2661.722542, 3559.466306, 4359.18598
 0.195, 783.373572, 1713.223253, 2662.525001, 3563.441235, 4365.34543
 0.2, 782.003965, 1711.313188, 2662.919113, 3566.714235, 4370.588102
 0.205, 780.669499, 1709.303037, 2662.944913, 3569.348916, 4374.994954
 0.21, 779.36884, 1707.206591, 2662.639765, 3571.403994, 4378.639825
 0.215, 778.101542, 1705.03586, 2662.035252, 3572.930178, 4381.58944
 0.22, 776.866271, 1702.802408, 2661.160732, 3573.975065, 4383.903404
 0.225, 775.662138, 1700.515134, 2660.042894, 3574.581357, 4385.636875
 0.23, 774.489142, 1698.182932, 2658.704869, 3574.78731, 4386.838784
 0.235, 773.34506, 1695.81381, 2657.168899, 3574.628064, 4387.554058
 0.24, 772.230336, 1693.41444, 2655.45411, 3574.135201, 4387.82451
 0.245, 771.142746, 1690.99105, 2653.578296, 3573.33808, 4387.68617
 0.25, 770.082291, 1688.548532, 2651.557025, 3572.2625, 4387.17418
 0.255, 769.048524, 1686.092225, 2649.404976, 3570.932482, 4386.319232
 0.26, 768.039223, 1683.626132, 2647.135494, 3569.370712, 4385.149795
 0.265, 767.054832, 1681.154256, 2644.760589, 3567.596762, 4383.691669
 0.27, 766.094462, 1678.680156, 2642.291383, 3565.629315, 4381.969318
 0.275, 765.156777, 1676.206946, 2639.737215, 3563.485273, 4380.004539
 0.28, 764.241333, 1673.736849, 2637.107872, 3561.17976, 4377.816905
 0.285, 763.347241, 1671.27298, 2634.411806, 3558.727456, 4375.425986
 0.29, 762.4745, 1668.816673, 2631.655688, 3556.141261, 4372.847798
 0.295, 761.621776, 1666.370597, 2628.847527, 3553.43274, 4370.098798
 0.3, 760.788625, 1663.936086, 2625.993104, 3550.613903, 4367.193666
 0.305, 759.974156, 1661.51492, 2623.098203, 3547.694092, 4364.144856
 0.31, 759.178369, 1659.107988, 2620.168605, 3544.683091, 4360.965268
 0.315, 758.400375, 1656.71707, 2617.20876, 3541.589354, 4357.666468
 0.32, 757.63973, 1654.34261, 2614.223559, 3538.420887, 4354.259131
 0.325, 756.895543, 1651.985498, 2611.217007, 3535.185697, 4350.7526
 0.33, 756.167814, 1649.647069, 2608.192218, 3531.890011, 4347.155769
 0.335, 755.455654, 1647.327767, 2605.153639, 3528.540056, 4343.477536
 0.34, 754.758618, 1645.028037, 2602.103939, 3525.142061, 4339.725907
 0.345, 754.076706, 1642.748325, 2599.046232, 3521.701363, 4335.90711
 0.35, 753.409028, 1640.489519, 2595.983188, 3518.222855, 4332.028707
 0.355, 752.755139, 1638.251174, 2592.91703, 3514.710985, 4328.096481
 0.36, 752.115041, 1636.034626, 2589.849982, 3511.170647, 4324.116213
 0.365, 751.487842, 1633.838985, 2586.784269, 3507.604954, 4320.093688
 0.37, 750.873542, 1631.66514, 2583.722115, 3504.018354, 4316.033353
 0.375, 750.271698, 1629.513536, 2580.664408, 3500.413961, 4311.939656
 0.38, 749.681419, 1627.383283, 2577.613819, 3496.794889, 4307.81749
 0.385, 749.103151, 1625.275272, 2574.570792, 3493.163807, 4303.67086
 0.39, 748.536003, 1623.189057, 2571.537106, 3489.524274, 4299.502878
 0.395, 747.98042, 1621.125082, 2568.514095, 3485.878068, 4295.317103
 0.4, 747.435068, 1619.082905, 2565.50265, 3482.227858, 4291.117538
 0.405, 746.900392, 1617.062523, 2562.504105, 3478.575425, 4286.905963
 0.41, 746.375502, 1615.063938, 2559.518905, 3474.922992, 4282.686382
 0.415, 745.860843, 1613.087149, 2556.547939, 3471.272782, 4278.460128
 0.42, 745.355525, 1611.132156, 2553.592541, 3467.626132, 4274.230761
 0.425, 744.859549, 1609.198515, 2550.652713, 3463.984374, 4269.999614
 0.43, 744.372914, 1607.28578, 2547.729342, 3460.349733, 4265.769356
 0.435, 743.89473, 1605.394842, 2544.822876, 3456.722655, 4261.541768
 0.44, 743.425443, 1603.524366, 2541.934201, 3453.105362, 4257.318628
 0.445, 742.964607, 1601.674796, 2539.06332, 3449.498301, 4253.101271
 0.45, 742.511778, 1599.846132, 2536.211122, 3445.902804, 4248.891475
 0.455, 742.066956, 1598.037931, 2533.377161, 3442.319763, 4244.691021
 0.46, 741.629696, 1596.249747, 2530.562772, 3438.750511, 4240.500798
 0.465, 741.200443, 1594.481579, 2527.76751, 3435.195049, 4236.32214
 0.47, 740.778307, 1592.732984, 2524.991821, 3431.655156, 4232.155937
 0.475, 740.363288, 1591.004406, 2522.235704, 3428.130386, 4228.003969
 0.48, 739.955386, 1589.294955, 2519.500049, 3424.62252, 4223.866679
 0.485, 739.554157, 1587.604631, 2516.783966, 3421.131557, 4219.744959
 0.49, 739.160045, 1585.933435, 2514.088344, 3417.658387, 4215.639696
 0.495, 738.77216, 1584.280921, 2511.413185, 3414.203009, 4211.551337
 0.5, 738.390503, 1582.64709, 2508.758487, 3410.766315, 4207.481661
 0.505, 738.015073, 1581.031052, 2506.124251, 3407.348302, 4203.430222
 0.51, 737.645871, 1579.433251, 2503.510032, 3403.949417, 4199.397911
 0.515, 737.282451, 1577.853688, 2500.91672, 3400.570549, 4195.385616
 0.52, 736.924814, 1576.291028, 2498.34387, 3397.211699, 4191.393339
 0.525, 736.57296, 1574.746161, 2495.791481, 3393.87242, 4187.421968
 0.53, 736.226444, 1573.218198, 2493.259999, 3390.554048, 4183.471504
 0.535, 735.885265, 1571.707138, 2490.748534, 3387.256137, 4179.542836
 0.54, 735.549424, 1570.21298, 2488.257531, 3383.979134, 4175.635519
 0.545, 735.218922, 1568.734837, 2485.786989, 3380.723037, 4171.750889
 0.55, 734.893312, 1567.273597, 2483.336465, 3377.488291, 4167.888499
 0.555, 734.572595, 1565.827925, 2480.906402, 3374.274452, 4164.048796
 0.56, 734.256327, 1564.398267, 2478.495912, 3371.081965, 4160.232223
 0.565, 733.945396, 1562.983733, 2476.105883, 3367.910829, 4156.438336
 0.57, 733.638469, 1561.585213, 2473.735872, 3364.761489, 4152.66758
 0.575, 733.336435, 1560.201372, 2471.385432, 3361.633501, 4148.920845
 0.58, 733.038849, 1558.832654, 2469.054565, 3358.526864, 4145.19724
 0.585, 732.745267, 1557.478616, 2466.74327, 3355.441578, 4141.49721
 0.59, 732.456132, 1556.139257, 2464.451102, 3352.378089, 4137.820756
 0.595, 732.171001, 1554.814132, 2462.178951, 3349.336396, 4134.168323
 0.6, 731.889874, 1553.503242, 2459.925483, 3346.31561, 4130.539465
 0.605, 731.61275, 1552.206586, 2457.690697, 3343.31662, 4126.934628
 0.61, 731.339629, 1550.923274, 2455.475484, 3340.338982, 4123.35381
 0.615, 731.070067, 1549.653752, 2453.278508, 3337.38314, 4119.796569
 0.62, 730.804508, 1548.39713, 2451.100215, 3334.448204, 4116.263348
 0.625, 730.542508, 1547.154298, 2448.940159, 3331.53462, 4112.753702
 0.63, 730.284066, 1545.924365, 2446.798786, 3328.641942, 4109.268077
 0.635, 730.028739, 1544.706887, 2444.675206, 3325.770616, 4105.806027
 0.64, 729.777414, 1543.502309, 2442.569863, 3322.920197, 4102.367998
 0.645, 729.529203, 1542.310186, 2440.481869, 3320.090684, 4098.9531
 0.65, 729.284107, 1541.130518, 2438.412112, 3317.281633, 4095.562222
 0.655, 729.042568, 1539.96286, 2436.359258, 3314.493934, 4092.194919
 0.66, 728.803699, 1538.807213, 2434.324198, 3311.726251, 4088.850747
 0.665, 728.568388, 1537.663131, 2432.30604, 3308.979476, 4085.530151
 0.67, 728.336191, 1536.531059, 2430.305231, 3306.252717, 4082.232686
 0.675, 728.106663, 1535.410107, 2428.32088, 3303.54642, 4078.958351
 0.68, 727.880248, 1534.300721, 2426.353432, 3300.859695, 4075.706702
 0.685, 727.656503, 1533.202456, 2424.402443, 3298.193432, 4072.478184
 0.69, 727.435871, 1532.115311, 2422.467467, 3295.546741, 4069.272797
 0.695, 727.217908, 1531.038841, 2420.549395, 3292.920067, 4066.08965
 0.7, 727.002615, 1529.973048, 2418.646891, 3290.312965, 4062.92919
 0.705, 726.78999, 1528.917485, 2416.760401, 3287.724991, 4059.791416
 0.71, 726.579589, 1527.873043, 2414.88948, 3285.156589, 4056.675437
 0.715, 726.372302, 1526.838387, 2413.034572, 3282.606869, 4053.582145
 0.72, 726.167239, 1525.813962, 2411.194788, 3280.076721, 4050.510205
 0.725, 725.964845, 1524.799323, 2409.370128, 3277.565256, 4047.460505
 0.73, 725.76512, 1523.794915, 2407.561037, 3275.072029, 4044.432602
 0.735, 725.567174, 1522.800293, 2405.766625, 3272.597929, 4041.426495
 0.74, 725.371897, 1521.815012, 2403.986892, 3270.142067, 4038.441294
 0.745, 725.178844, 1520.839073, 2402.221839, 3267.704887, 4035.477445
 0.75, 724.988461, 1519.87292, 2400.471464, 3265.2855, 4032.534948
 0.755, 724.799856, 1518.915663, 2398.735769, 3262.883906, 4029.613357
 0.76, 724.613476, 1517.967302, 2397.013863, 3260.500105, 4026.712672
 0.765, 724.429319, 1517.028283, 2395.305746, 3258.134542, 4023.832895
 0.77, 724.247387, 1516.09816, 2393.611864, 3255.786326, 4020.973134
 0.775, 724.067234, 1515.176489, 2391.931771, 3253.455014, 4018.13428
 0.78, 723.88975, 1514.263269, 2390.265468, 3251.141495, 4015.314998
 0.785, 723.713601, 1513.358946, 2388.61251, 3248.844879, 4012.516178
 0.79, 723.539675, 1512.463075, 2386.972896, 3246.565166, 4009.737375
 0.795, 723.367529, 1511.57521, 2385.346627, 3244.302357, 4006.978144
 0.8, 723.197607, 1510.695352, 2383.733257, 3242.05645, 4004.238486
 0.805, 723.029465, 1509.823946, 2382.132788, 3239.826558, 4001.518399
 0.81, 722.863101, 1508.960546, 2380.545218, 3237.613568, 3998.81744
 0.815, 722.698517, 1508.104709, 2378.970103, 3235.416592, 3996.135608
 0.82, 722.535712, 1507.256433, 2377.407443, 3233.23563, 3993.472904
 0.825, 722.374686, 1506.416164, 2375.857684, 3231.070682, 3990.828882
 0.83, 722.21544, 1505.583458, 2374.319934, 3228.921302, 3988.203542
 0.835, 722.057973, 1504.758313, 2372.794195, 3226.787935, 3985.59644
 0.84, 721.902285, 1503.940285, 2371.280465, 3224.669693, 3983.008021
 0.845, 721.747932, 1503.129819, 2369.778746, 3222.567019, 3980.43784
 0.85, 721.595358, 1502.326026, 2368.288592, 3220.479915, 3977.885451
 0.855, 721.444564, 1501.529795, 2366.810449, 3218.407489, 3975.350855
 0.86, 721.295103, 1500.740236, 2365.343426, 3216.350187, 3972.834497
 0.865, 721.146978, 1499.957794, 2363.887968, 3214.307564, 3970.335042
 0.87, 721.000631, 1499.182024, 2362.444076, 3212.279621, 3967.853381
 0.875, 720.856064, 1498.413372, 2361.01086, 3210.266357, 3965.389067
 0.88, 720.712387, 1497.650947, 2359.588764, 3208.267771, 3962.942101
 0.885, 720.570489, 1496.895194, 2358.177788, 3206.282976, 3960.511593
 0.89, 720.430369, 1496.146114, 2356.777489, 3204.312414, 3958.098434
 0.895, 720.29114, 1495.403261, 2355.38831, 3202.356087, 3955.701288
 0.9, 720.15369, 1494.667081, 2354.009361, 3200.413549, 3953.321491
 0.905, 720.01713, 1493.936683, 2352.640644, 3198.484801, 3950.957707
 0.91, 719.882349, 1493.212513, 2351.282603, 3196.569842, 3948.609936
 0.915, 719.748457, 1492.49457, 2349.934792, 3194.668228, 3946.278624
 0.92, 719.616345, 1491.782855, 2348.597212, 3192.780404, 3943.963325
 0.925, 719.485568, 1491.076923, 2347.269419, 3190.905479, 3941.663596
 0.93, 719.35568, 1490.376773, 2345.951856, 3189.043454, 3939.379435
 0.935, 719.227126, 1489.682406, 2344.643634, 3187.194774, 3937.111287
 0.94, 719.099907, 1488.994266, 2343.345644, 3185.358994, 3934.858264
 0.945, 718.974022, 1488.311464, 2342.057439, 3183.536113, 3932.620809
 0.95, 718.849027, 1487.634, 2340.778131, 3181.725687, 3930.398034
 0.955, 718.725367, 1486.962319, 2339.508609, 3179.928162, 3928.190827
 0.96, 718.603041, 1486.295976, 2338.248428, 3178.142646, 3925.998299
 0.965, 718.481604, 1485.635415, 2336.997589, 3176.369586, 3923.820451
 0.97, 718.361502, 1484.979747, 2335.756091, 3174.608535, 3921.657281
 0.975, 718.24229, 1484.329862, 2334.523044, 3172.85994, 3919.508346
 0.98, 718.124412, 1483.684871, 2333.299339, 3171.123355, 3917.37409
 0.985, 718.007424, 1483.044772, 2332.08453, 3169.398335, 3915.254069
 0.99, 717.89177, 1482.410456, 2330.878617, 3167.684881, 3913.147837
 0.995, 717.777006, 1481.780588, 2329.681157, 3165.983437, 3911.055839
 1, 717.777006, 1481.780588, 2329.681157, 3165.983437, 3911.055839
ENDTABLE
FX_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2) 1 ! Scale factor divided into (Kappa - KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! FYG_TIRE: Tire lateral force (Fy) as a function of vertical load (Fz) and
! inclination angle (Gamma). Fy can be a nonlinear CARPET function of Fz and Gamma or
! a function of Gamma (CONSTANT, COEFFICIENT, or TABLE) multiplied by a function
! FYG_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or TABLE). Fy from the calculation can be
! adjusted with FYG_TIRE_GAIN and FYG_TIRE_OFFSET. Gamma used in the calculation can
! be adjusted with GAMMA_SCALE_FYG_TIRE and GAMMA_START_FYG_TIRE. Fz used in the
! calculation can be adjusted with FZ_SCALE_FYG_TIRE and FZ_START_FYG_TIRE. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Gamma (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FYG_TIRE_CARPET(1,1) 2D_FROM_ZERO ! axle 1, left side
 0, 2362.81, 4725.61, 7088.42, 9451.23, 11814
 0.5, -13.94, -36.56, -53.48, -67.28, -80.54
 1, -27.84, -72.9, -106.77, -134.48, -161.1
 1.5, -41.67, -108.83, -159.67, -201.52, -241.68
 2, -55.39, -144.12, -212.01, -268.32, -322.31
 2.5, -68.97, -178.57, -263.58, -334.8, -402.99
 3, -82.37, -211.96, -314.2, -400.87, -483.74
 3.5, -95.55, -244.08, -363.67, -466.46, -564.57
 4, -108.47, -274.73, -411.81, -531.48, -645.5
 4.5, -121.11, -303.69, -458.42, -595.86, -726.55
 5, -133.42, -330.75, -503.32, -659.51, -807.71
 5.5, -145.37, -355.7, -546.31, -722.36, -889.02
 6, -156.92, -378.33, -587.2, -784.32, -970.47
ENDTABLE
FYG_TIRE_GAIN(1,1)  1 ! Gain multiplied with calculated value to get Fy
FYG_TIRE_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get Fy
GAMMA_START_FYG_TIRE(1,1) 0 ; deg ! Offset subtracted from Gamma
GAMMA_SCALE_FYG_TIRE(1,1) 1 ! Scale factor divided into (Gamma -
                            ! GAMMA_START_FYG_TIRE)
FZ_START_FYG_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FYG_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_FYG_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Gamma (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FYG_TIRE_CARPET(1,2) 2D_FROM_ZERO ! axle 1, right side
 0, 2362.81, 4725.61, 7088.42, 9451.23, 11814
 0.5, -13.94, -36.56, -53.48, -67.28, -80.54
 1, -27.84, -72.9, -106.77, -134.48, -161.1
 1.5, -41.67, -108.83, -159.67, -201.52, -241.68
 2, -55.39, -144.12, -212.01, -268.32, -322.31
 2.5, -68.97, -178.57, -263.58, -334.8, -402.99
 3, -82.37, -211.96, -314.2, -400.87, -483.74
 3.5, -95.55, -244.08, -363.67, -466.46, -564.57
 4, -108.47, -274.73, -411.81, -531.48, -645.5
 4.5, -121.11, -303.69, -458.42, -595.86, -726.55
 5, -133.42, -330.75, -503.32, -659.51, -807.71
 5.5, -145.37, -355.7, -546.31, -722.36, -889.02
 6, -156.92, -378.33, -587.2, -784.32, -970.47
ENDTABLE
FYG_TIRE_GAIN(1,2)  1 ! Gain multiplied with calculated value to get Fy
FYG_TIRE_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get Fy
GAMMA_START_FYG_TIRE(1,2) 0 ; deg ! Offset subtracted from Gamma
GAMMA_SCALE_FYG_TIRE(1,2) 1 ! Scale factor divided into (Gamma -
                            ! GAMMA_START_FYG_TIRE)
FZ_START_FYG_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FYG_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_FYG_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Gamma (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FYG_TIRE_CARPET(2,1) 2D_FROM_ZERO ! axle 2, left side
 0, 2362.81, 4725.61, 7088.42, 9451.23, 11814
 0.5, -13.94, -36.56, -53.48, -67.28, -80.54
 1, -27.84, -72.9, -106.77, -134.48, -161.1
 1.5, -41.67, -108.83, -159.67, -201.52, -241.68
 2, -55.39, -144.12, -212.01, -268.32, -322.31
 2.5, -68.97, -178.57, -263.58, -334.8, -402.99
 3, -82.37, -211.96, -314.2, -400.87, -483.74
 3.5, -95.55, -244.08, -363.67, -466.46, -564.57
 4, -108.47, -274.73, -411.81, -531.48, -645.5
 4.5, -121.11, -303.69, -458.42, -595.86, -726.55
 5, -133.42, -330.75, -503.32, -659.51, -807.71
 5.5, -145.37, -355.7, -546.31, -722.36, -889.02
 6, -156.92, -378.33, -587.2, -784.32, -970.47
ENDTABLE
FYG_TIRE_GAIN(2,1)  1 ! Gain multiplied with calculated value to get Fy
FYG_TIRE_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get Fy
GAMMA_START_FYG_TIRE(2,1) 0 ; deg ! Offset subtracted from Gamma
GAMMA_SCALE_FYG_TIRE(2,1) 1 ! Scale factor divided into (Gamma -
                            ! GAMMA_START_FYG_TIRE)
FZ_START_FYG_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FYG_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_FYG_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Gamma (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FYG_TIRE_CARPET(2,2) 2D_FROM_ZERO ! axle 2, right side
 0, 2362.81, 4725.61, 7088.42, 9451.23, 11814
 0.5, -13.94, -36.56, -53.48, -67.28, -80.54
 1, -27.84, -72.9, -106.77, -134.48, -161.1
 1.5, -41.67, -108.83, -159.67, -201.52, -241.68
 2, -55.39, -144.12, -212.01, -268.32, -322.31
 2.5, -68.97, -178.57, -263.58, -334.8, -402.99
 3, -82.37, -211.96, -314.2, -400.87, -483.74
 3.5, -95.55, -244.08, -363.67, -466.46, -564.57
 4, -108.47, -274.73, -411.81, -531.48, -645.5
 4.5, -121.11, -303.69, -458.42, -595.86, -726.55
 5, -133.42, -330.75, -503.32, -659.51, -807.71
 5.5, -145.37, -355.7, -546.31, -722.36, -889.02
 6, -156.92, -378.33, -587.2, -784.32, -970.47
ENDTABLE
FYG_TIRE_GAIN(2,2)  1 ! Gain multiplied with calculated value to get Fy
FYG_TIRE_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get Fy
GAMMA_START_FYG_TIRE(2,2) 0 ; deg ! Offset subtracted from Gamma
GAMMA_SCALE_FYG_TIRE(2,2) 1 ! Scale factor divided into (Gamma -
                            ! GAMMA_START_FYG_TIRE)
FZ_START_FYG_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FYG_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_FYG_TIRE)

! FY_AERO_SHAPING: Coefficient CFY for for Y component of aerodynamic force. CFY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFY from the
! calculation can be adjusted with FY_AERO_SHAPING_GAIN and FY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FY_AERO and SLIP_START_FY_AERO.

FY_AERO_SHAPING_CONSTANT 0 ; - ! Constant CFY
FY_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFY

! FY_AERO_SHAPING_2: Coefficient CFY2 for Y component of aerodynamic force. CFY2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FY_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFY2 from the calculation can be adjusted with
! FY_AERO_SHAPING_2_GAIN and FY_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FY_AERO and PITCH_START_FY_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FY_AERO and Z_START_FY_AERO.

FY_AERO_SHAPING_2_CONSTANT 1 ; - ! Constant CFY2 component due to pitch
FY_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CFY2
FY_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CFY2
FY_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
FY_AERO_SHAPING_Z_CONSTANT 1 ; - ! Constant CFY2 component due to ride height

! FY_TIRE: Tire lateral force (Fy) as a function of vertical load (Fz) and lateral
! slip (Alpha). Fy can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function FY_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Fy from the calculation can be adjusted with FY_TIRE_GAIN and
! FY_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_FY_TIRE and ALPHA_START_FY_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FY_TIRE and FZ_START_FY_TIRE. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

! 2D table: row 1 has "0" (place holder) followed by 3 values of Fz (N). Other rows
! have Alpha (deg) followed by 3 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1) 2D_FROM_ZERO ! axle 1, left side
 0, 222.41, 667.23, 1112.06
 0.1, 10.16645, 44.226471, 61.944621
 0.2, 30.135844, 97.638028, 133.303411
 0.3, 49.972681, 150.780467, 204.417993
 0.4, 69.612462, 203.523012, 275.169157
 0.5, 88.995136, 255.739777, 345.440357
 0.6, 108.063766, 307.310215, 415.119054
 0.7, 126.765417, 358.123122, 484.096267
 0.8, 145.053829, 408.073519, 552.270577
 0.9, 162.887632, 457.067103, 619.544566
 1, 180.230352, 505.018025, 685.827937
 1.1, 197.053076, 551.852444, 751.038843
 1.2, 213.331781, 597.504971, 815.100328
 1.3, 229.048232, 641.922227, 877.94567
 1.4, 244.189973, 685.060175, 939.513927
 1.5, 258.748997, 726.885008, 999.752612
 1.6, 272.722636, 767.372262, 1058.616797
 1.7, 286.111778, 806.506367, 1116.069562
 1.8, 298.921762, 844.279761, 1172.080659
 1.9, 311.160594, 880.693335, 1226.627401
 2, 322.839396, 915.753315, 1279.693776
 2.1, 333.970622, 949.473047, 1331.269108
 2.2, 344.56984, 981.871658, 1381.349837
 2.3, 354.653955, 1012.971388, 1429.9373
 2.4, 364.239424, 1042.799372, 1477.037722
 2.5, 373.34582, 1071.386302, 1522.66267
 2.6, 381.991381, 1098.764652, 1566.826822
 2.7, 390.195233, 1124.969116, 1609.548861
 2.8, 397.976949, 1150.037059, 1650.850584
 2.9, 405.355211, 1174.005403, 1690.757345
 3, 412.349148, 1196.912847, 1729.295388
 3.1, 418.976995, 1218.798534, 1766.494963
 3.2, 425.256992, 1239.70072, 1802.386315
 3.3, 431.206487, 1259.658548, 1837.001919
 3.4, 436.841937, 1278.709385, 1870.375134
 3.5, 442.179356, 1296.891929, 1902.539768
 3.6, 447.234758, 1314.242211, 1933.530517
 3.7, 452.023267, 1330.796262, 1963.382521
 3.8, 456.557782, 1346.588777, 1992.130922
 3.9, 460.852983, 1361.654009, 2019.810416
 4, 464.921325, 1376.024428, 2046.455699
 4.1, 468.774818, 1389.731618, 2072.101911
 4.2, 472.425028, 1402.805827, 2096.78286
 4.3, 475.882629, 1415.276411, 2120.531906
 4.4, 479.158743, 1427.171396, 2143.381968
 4.5, 482.262266, 1438.517026, 2165.365516
 4.6, 485.20254, 1449.339101, 2186.513243
 4.7, 487.98846, 1459.66253, 2206.856288
 4.8, 490.628478, 1469.510444, 2226.424452
 4.9, 493.130157, 1478.90464, 2245.24665
 5, 495.500614, 1487.866913, 2263.350461
 5.1, 497.746965, 1496.417727, 2280.763463
 5.2, 499.875438, 1504.575317, 2297.512346
 5.3, 501.892261, 1512.359258, 2313.621574
 5.4, 503.803661, 1519.786006, 2329.116504
 5.5, 505.614532, 1526.872465, 2344.020265
 5.6, 507.33021, 1533.634204, 2358.355544
 5.7, 508.95559, 1540.086792, 2372.144581
 5.8, 510.495564, 1546.243573, 2385.408728
 5.9, 511.95369, 1552.118782, 2398.168002
 6, 513.334417, 1557.724874, 2410.441531
 6.1, 514.641749, 1563.074303, 2422.248886
 6.2, 515.879244, 1568.178636, 2433.607416
 6.3, 517.05046, 1573.048992, 2444.534468
 6.4, 518.158067, 1577.695158, 2455.047391
 6.5, 519.205623, 1582.128254, 2465.161309
 6.6, 520.196242, 1586.356732, 2474.891791
 6.7, 521.132147, 1590.389933, 2484.253959
 6.8, 522.016453, 1594.236309, 2493.26116
 6.9, 522.850939, 1597.904311, 2501.927182
 7, 523.638719, 1601.401946, 2510.264926
 7.1, 524.381127, 1604.735442, 2518.28729
 7.2, 525.081277, 1607.912806, 2526.005397
 7.3, 525.740058, 1610.940709, 2533.430811
 7.4, 526.36014, 1613.824935, 2540.575097
 7.5, 526.942857, 1616.571711, 2547.448486
 7.6, 527.490433, 1619.186819, 2554.060765
 7.7, 528.003757, 1621.676043, 2560.42172
 7.8, 528.48461, 1624.044276, 2566.540246
 7.9, 528.93477, 1626.296854, 2572.426131
 8, 529.355571, 1628.438227, 2578.086936
 8.1, 529.747904, 1630.472843, 2583.531557
 8.2, 530.113548, 1632.405595, 2588.767557
 8.3, 530.452947, 1634.240041, 2593.802052
 8.4, 530.767881, 1635.980184, 2598.64305
 8.5, 531.05924, 1637.630029, 2603.296778
 8.6, 531.327912, 1639.192689, 2607.770353
 8.7, 531.574788, 1640.672612, 2612.070002
 8.8, 531.801203, 1642.072022, 2616.201509
 8.9, 532.008045, 1643.394922, 2620.171101
 9, 532.19576, 1644.643538, 2623.98456
 9.1, 532.365237, 1645.820982, 2627.647224
 9.2, 532.517366, 1646.930368, 2631.163987
 9.3, 532.652592, 1647.974365, 2634.540186
 9.4, 532.772249, 1648.954753, 2637.780714
 9.5, 532.876338, 1649.874644, 2640.89002
 9.6, 532.965747, 1650.73582, 2643.872551
 9.7, 533.041366, 1651.540948, 2646.732757
 9.8, 533.103197, 1652.291807, 2649.474195
 9.9, 533.152572, 1652.991067, 2652.101758
 10, 533.189047, 1653.639618, 2654.618561
 10.1, 533.189047, 1653.639618, 2654.618561
ENDTABLE
FY_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 3 values of Fz (N). Other rows
! have Alpha (deg) followed by 3 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2) 2D_FROM_ZERO ! axle 1, right side
 0, 222.41, 667.23, 1112.06
 0.1, 10.16645, 44.226471, 61.944621
 0.2, 30.135844, 97.638028, 133.303411
 0.3, 49.972681, 150.780467, 204.417993
 0.4, 69.612462, 203.523012, 275.169157
 0.5, 88.995136, 255.739777, 345.440357
 0.6, 108.063766, 307.310215, 415.119054
 0.7, 126.765417, 358.123122, 484.096267
 0.8, 145.053829, 408.073519, 552.270577
 0.9, 162.887632, 457.067103, 619.544566
 1, 180.230352, 505.018025, 685.827937
 1.1, 197.053076, 551.852444, 751.038843
 1.2, 213.331781, 597.504971, 815.100328
 1.3, 229.048232, 641.922227, 877.94567
 1.4, 244.189973, 685.060175, 939.513927
 1.5, 258.748997, 726.885008, 999.752612
 1.6, 272.722636, 767.372262, 1058.616797
 1.7, 286.111778, 806.506367, 1116.069562
 1.8, 298.921762, 844.279761, 1172.080659
 1.9, 311.160594, 880.693335, 1226.627401
 2, 322.839396, 915.753315, 1279.693776
 2.1, 333.970622, 949.473047, 1331.269108
 2.2, 344.56984, 981.871658, 1381.349837
 2.3, 354.653955, 1012.971388, 1429.9373
 2.4, 364.239424, 1042.799372, 1477.037722
 2.5, 373.34582, 1071.386302, 1522.66267
 2.6, 381.991381, 1098.764652, 1566.826822
 2.7, 390.195233, 1124.969116, 1609.548861
 2.8, 397.976949, 1150.037059, 1650.850584
 2.9, 405.355211, 1174.005403, 1690.757345
 3, 412.349148, 1196.912847, 1729.295388
 3.1, 418.976995, 1218.798534, 1766.494963
 3.2, 425.256992, 1239.70072, 1802.386315
 3.3, 431.206487, 1259.658548, 1837.001919
 3.4, 436.841937, 1278.709385, 1870.375134
 3.5, 442.179356, 1296.891929, 1902.539768
 3.6, 447.234758, 1314.242211, 1933.530517
 3.7, 452.023267, 1330.796262, 1963.382521
 3.8, 456.557782, 1346.588777, 1992.130922
 3.9, 460.852983, 1361.654009, 2019.810416
 4, 464.921325, 1376.024428, 2046.455699
 4.1, 468.774818, 1389.731618, 2072.101911
 4.2, 472.425028, 1402.805827, 2096.78286
 4.3, 475.882629, 1415.276411, 2120.531906
 4.4, 479.158743, 1427.171396, 2143.381968
 4.5, 482.262266, 1438.517026, 2165.365516
 4.6, 485.20254, 1449.339101, 2186.513243
 4.7, 487.98846, 1459.66253, 2206.856288
 4.8, 490.628478, 1469.510444, 2226.424452
 4.9, 493.130157, 1478.90464, 2245.24665
 5, 495.500614, 1487.866913, 2263.350461
 5.1, 497.746965, 1496.417727, 2280.763463
 5.2, 499.875438, 1504.575317, 2297.512346
 5.3, 501.892261, 1512.359258, 2313.621574
 5.4, 503.803661, 1519.786006, 2329.116504
 5.5, 505.614532, 1526.872465, 2344.020265
 5.6, 507.33021, 1533.634204, 2358.355544
 5.7, 508.95559, 1540.086792, 2372.144581
 5.8, 510.495564, 1546.243573, 2385.408728
 5.9, 511.95369, 1552.118782, 2398.168002
 6, 513.334417, 1557.724874, 2410.441531
 6.1, 514.641749, 1563.074303, 2422.248886
 6.2, 515.879244, 1568.178636, 2433.607416
 6.3, 517.05046, 1573.048992, 2444.534468
 6.4, 518.158067, 1577.695158, 2455.047391
 6.5, 519.205623, 1582.128254, 2465.161309
 6.6, 520.196242, 1586.356732, 2474.891791
 6.7, 521.132147, 1590.389933, 2484.253959
 6.8, 522.016453, 1594.236309, 2493.26116
 6.9, 522.850939, 1597.904311, 2501.927182
 7, 523.638719, 1601.401946, 2510.264926
 7.1, 524.381127, 1604.735442, 2518.28729
 7.2, 525.081277, 1607.912806, 2526.005397
 7.3, 525.740058, 1610.940709, 2533.430811
 7.4, 526.36014, 1613.824935, 2540.575097
 7.5, 526.942857, 1616.571711, 2547.448486
 7.6, 527.490433, 1619.186819, 2554.060765
 7.7, 528.003757, 1621.676043, 2560.42172
 7.8, 528.48461, 1624.044276, 2566.540246
 7.9, 528.93477, 1626.296854, 2572.426131
 8, 529.355571, 1628.438227, 2578.086936
 8.1, 529.747904, 1630.472843, 2583.531557
 8.2, 530.113548, 1632.405595, 2588.767557
 8.3, 530.452947, 1634.240041, 2593.802052
 8.4, 530.767881, 1635.980184, 2598.64305
 8.5, 531.05924, 1637.630029, 2603.296778
 8.6, 531.327912, 1639.192689, 2607.770353
 8.7, 531.574788, 1640.672612, 2612.070002
 8.8, 531.801203, 1642.072022, 2616.201509
 8.9, 532.008045, 1643.394922, 2620.171101
 9, 532.19576, 1644.643538, 2623.98456
 9.1, 532.365237, 1645.820982, 2627.647224
 9.2, 532.517366, 1646.930368, 2631.163987
 9.3, 532.652592, 1647.974365, 2634.540186
 9.4, 532.772249, 1648.954753, 2637.780714
 9.5, 532.876338, 1649.874644, 2640.89002
 9.6, 532.965747, 1650.73582, 2643.872551
 9.7, 533.041366, 1651.540948, 2646.732757
 9.8, 533.103197, 1652.291807, 2649.474195
 9.9, 533.152572, 1652.991067, 2652.101758
 10, 533.189047, 1653.639618, 2654.618561
 10.1, 533.189047, 1653.639618, 2654.618561
ENDTABLE
FY_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 3 values of Fz (N). Other rows
! have Alpha (deg) followed by 3 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1) 2D_FROM_ZERO ! axle 2, left side
 0, 222.41, 667.23, 1112.06
 0.1, 10.16645, 44.226471, 61.944621
 0.2, 30.135844, 97.638028, 133.303411
 0.3, 49.972681, 150.780467, 204.417993
 0.4, 69.612462, 203.523012, 275.169157
 0.5, 88.995136, 255.739777, 345.440357
 0.6, 108.063766, 307.310215, 415.119054
 0.7, 126.765417, 358.123122, 484.096267
 0.8, 145.053829, 408.073519, 552.270577
 0.9, 162.887632, 457.067103, 619.544566
 1, 180.230352, 505.018025, 685.827937
 1.1, 197.053076, 551.852444, 751.038843
 1.2, 213.331781, 597.504971, 815.100328
 1.3, 229.048232, 641.922227, 877.94567
 1.4, 244.189973, 685.060175, 939.513927
 1.5, 258.748997, 726.885008, 999.752612
 1.6, 272.722636, 767.372262, 1058.616797
 1.7, 286.111778, 806.506367, 1116.069562
 1.8, 298.921762, 844.279761, 1172.080659
 1.9, 311.160594, 880.693335, 1226.627401
 2, 322.839396, 915.753315, 1279.693776
 2.1, 333.970622, 949.473047, 1331.269108
 2.2, 344.56984, 981.871658, 1381.349837
 2.3, 354.653955, 1012.971388, 1429.9373
 2.4, 364.239424, 1042.799372, 1477.037722
 2.5, 373.34582, 1071.386302, 1522.66267
 2.6, 381.991381, 1098.764652, 1566.826822
 2.7, 390.195233, 1124.969116, 1609.548861
 2.8, 397.976949, 1150.037059, 1650.850584
 2.9, 405.355211, 1174.005403, 1690.757345
 3, 412.349148, 1196.912847, 1729.295388
 3.1, 418.976995, 1218.798534, 1766.494963
 3.2, 425.256992, 1239.70072, 1802.386315
 3.3, 431.206487, 1259.658548, 1837.001919
 3.4, 436.841937, 1278.709385, 1870.375134
 3.5, 442.179356, 1296.891929, 1902.539768
 3.6, 447.234758, 1314.242211, 1933.530517
 3.7, 452.023267, 1330.796262, 1963.382521
 3.8, 456.557782, 1346.588777, 1992.130922
 3.9, 460.852983, 1361.654009, 2019.810416
 4, 464.921325, 1376.024428, 2046.455699
 4.1, 468.774818, 1389.731618, 2072.101911
 4.2, 472.425028, 1402.805827, 2096.78286
 4.3, 475.882629, 1415.276411, 2120.531906
 4.4, 479.158743, 1427.171396, 2143.381968
 4.5, 482.262266, 1438.517026, 2165.365516
 4.6, 485.20254, 1449.339101, 2186.513243
 4.7, 487.98846, 1459.66253, 2206.856288
 4.8, 490.628478, 1469.510444, 2226.424452
 4.9, 493.130157, 1478.90464, 2245.24665
 5, 495.500614, 1487.866913, 2263.350461
 5.1, 497.746965, 1496.417727, 2280.763463
 5.2, 499.875438, 1504.575317, 2297.512346
 5.3, 501.892261, 1512.359258, 2313.621574
 5.4, 503.803661, 1519.786006, 2329.116504
 5.5, 505.614532, 1526.872465, 2344.020265
 5.6, 507.33021, 1533.634204, 2358.355544
 5.7, 508.95559, 1540.086792, 2372.144581
 5.8, 510.495564, 1546.243573, 2385.408728
 5.9, 511.95369, 1552.118782, 2398.168002
 6, 513.334417, 1557.724874, 2410.441531
 6.1, 514.641749, 1563.074303, 2422.248886
 6.2, 515.879244, 1568.178636, 2433.607416
 6.3, 517.05046, 1573.048992, 2444.534468
 6.4, 518.158067, 1577.695158, 2455.047391
 6.5, 519.205623, 1582.128254, 2465.161309
 6.6, 520.196242, 1586.356732, 2474.891791
 6.7, 521.132147, 1590.389933, 2484.253959
 6.8, 522.016453, 1594.236309, 2493.26116
 6.9, 522.850939, 1597.904311, 2501.927182
 7, 523.638719, 1601.401946, 2510.264926
 7.1, 524.381127, 1604.735442, 2518.28729
 7.2, 525.081277, 1607.912806, 2526.005397
 7.3, 525.740058, 1610.940709, 2533.430811
 7.4, 526.36014, 1613.824935, 2540.575097
 7.5, 526.942857, 1616.571711, 2547.448486
 7.6, 527.490433, 1619.186819, 2554.060765
 7.7, 528.003757, 1621.676043, 2560.42172
 7.8, 528.48461, 1624.044276, 2566.540246
 7.9, 528.93477, 1626.296854, 2572.426131
 8, 529.355571, 1628.438227, 2578.086936
 8.1, 529.747904, 1630.472843, 2583.531557
 8.2, 530.113548, 1632.405595, 2588.767557
 8.3, 530.452947, 1634.240041, 2593.802052
 8.4, 530.767881, 1635.980184, 2598.64305
 8.5, 531.05924, 1637.630029, 2603.296778
 8.6, 531.327912, 1639.192689, 2607.770353
 8.7, 531.574788, 1640.672612, 2612.070002
 8.8, 531.801203, 1642.072022, 2616.201509
 8.9, 532.008045, 1643.394922, 2620.171101
 9, 532.19576, 1644.643538, 2623.98456
 9.1, 532.365237, 1645.820982, 2627.647224
 9.2, 532.517366, 1646.930368, 2631.163987
 9.3, 532.652592, 1647.974365, 2634.540186
 9.4, 532.772249, 1648.954753, 2637.780714
 9.5, 532.876338, 1649.874644, 2640.89002
 9.6, 532.965747, 1650.73582, 2643.872551
 9.7, 533.041366, 1651.540948, 2646.732757
 9.8, 533.103197, 1652.291807, 2649.474195
 9.9, 533.152572, 1652.991067, 2652.101758
 10, 533.189047, 1653.639618, 2654.618561
 10.1, 533.189047, 1653.639618, 2654.618561
ENDTABLE
FY_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 3 values of Fz (N). Other rows
! have Alpha (deg) followed by 3 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2) 2D_FROM_ZERO ! axle 2, right side
 0, 222.41, 667.23, 1112.06
 0.1, 10.16645, 44.226471, 61.944621
 0.2, 30.135844, 97.638028, 133.303411
 0.3, 49.972681, 150.780467, 204.417993
 0.4, 69.612462, 203.523012, 275.169157
 0.5, 88.995136, 255.739777, 345.440357
 0.6, 108.063766, 307.310215, 415.119054
 0.7, 126.765417, 358.123122, 484.096267
 0.8, 145.053829, 408.073519, 552.270577
 0.9, 162.887632, 457.067103, 619.544566
 1, 180.230352, 505.018025, 685.827937
 1.1, 197.053076, 551.852444, 751.038843
 1.2, 213.331781, 597.504971, 815.100328
 1.3, 229.048232, 641.922227, 877.94567
 1.4, 244.189973, 685.060175, 939.513927
 1.5, 258.748997, 726.885008, 999.752612
 1.6, 272.722636, 767.372262, 1058.616797
 1.7, 286.111778, 806.506367, 1116.069562
 1.8, 298.921762, 844.279761, 1172.080659
 1.9, 311.160594, 880.693335, 1226.627401
 2, 322.839396, 915.753315, 1279.693776
 2.1, 333.970622, 949.473047, 1331.269108
 2.2, 344.56984, 981.871658, 1381.349837
 2.3, 354.653955, 1012.971388, 1429.9373
 2.4, 364.239424, 1042.799372, 1477.037722
 2.5, 373.34582, 1071.386302, 1522.66267
 2.6, 381.991381, 1098.764652, 1566.826822
 2.7, 390.195233, 1124.969116, 1609.548861
 2.8, 397.976949, 1150.037059, 1650.850584
 2.9, 405.355211, 1174.005403, 1690.757345
 3, 412.349148, 1196.912847, 1729.295388
 3.1, 418.976995, 1218.798534, 1766.494963
 3.2, 425.256992, 1239.70072, 1802.386315
 3.3, 431.206487, 1259.658548, 1837.001919
 3.4, 436.841937, 1278.709385, 1870.375134
 3.5, 442.179356, 1296.891929, 1902.539768
 3.6, 447.234758, 1314.242211, 1933.530517
 3.7, 452.023267, 1330.796262, 1963.382521
 3.8, 456.557782, 1346.588777, 1992.130922
 3.9, 460.852983, 1361.654009, 2019.810416
 4, 464.921325, 1376.024428, 2046.455699
 4.1, 468.774818, 1389.731618, 2072.101911
 4.2, 472.425028, 1402.805827, 2096.78286
 4.3, 475.882629, 1415.276411, 2120.531906
 4.4, 479.158743, 1427.171396, 2143.381968
 4.5, 482.262266, 1438.517026, 2165.365516
 4.6, 485.20254, 1449.339101, 2186.513243
 4.7, 487.98846, 1459.66253, 2206.856288
 4.8, 490.628478, 1469.510444, 2226.424452
 4.9, 493.130157, 1478.90464, 2245.24665
 5, 495.500614, 1487.866913, 2263.350461
 5.1, 497.746965, 1496.417727, 2280.763463
 5.2, 499.875438, 1504.575317, 2297.512346
 5.3, 501.892261, 1512.359258, 2313.621574
 5.4, 503.803661, 1519.786006, 2329.116504
 5.5, 505.614532, 1526.872465, 2344.020265
 5.6, 507.33021, 1533.634204, 2358.355544
 5.7, 508.95559, 1540.086792, 2372.144581
 5.8, 510.495564, 1546.243573, 2385.408728
 5.9, 511.95369, 1552.118782, 2398.168002
 6, 513.334417, 1557.724874, 2410.441531
 6.1, 514.641749, 1563.074303, 2422.248886
 6.2, 515.879244, 1568.178636, 2433.607416
 6.3, 517.05046, 1573.048992, 2444.534468
 6.4, 518.158067, 1577.695158, 2455.047391
 6.5, 519.205623, 1582.128254, 2465.161309
 6.6, 520.196242, 1586.356732, 2474.891791
 6.7, 521.132147, 1590.389933, 2484.253959
 6.8, 522.016453, 1594.236309, 2493.26116
 6.9, 522.850939, 1597.904311, 2501.927182
 7, 523.638719, 1601.401946, 2510.264926
 7.1, 524.381127, 1604.735442, 2518.28729
 7.2, 525.081277, 1607.912806, 2526.005397
 7.3, 525.740058, 1610.940709, 2533.430811
 7.4, 526.36014, 1613.824935, 2540.575097
 7.5, 526.942857, 1616.571711, 2547.448486
 7.6, 527.490433, 1619.186819, 2554.060765
 7.7, 528.003757, 1621.676043, 2560.42172
 7.8, 528.48461, 1624.044276, 2566.540246
 7.9, 528.93477, 1626.296854, 2572.426131
 8, 529.355571, 1628.438227, 2578.086936
 8.1, 529.747904, 1630.472843, 2583.531557
 8.2, 530.113548, 1632.405595, 2588.767557
 8.3, 530.452947, 1634.240041, 2593.802052
 8.4, 530.767881, 1635.980184, 2598.64305
 8.5, 531.05924, 1637.630029, 2603.296778
 8.6, 531.327912, 1639.192689, 2607.770353
 8.7, 531.574788, 1640.672612, 2612.070002
 8.8, 531.801203, 1642.072022, 2616.201509
 8.9, 532.008045, 1643.394922, 2620.171101
 9, 532.19576, 1644.643538, 2623.98456
 9.1, 532.365237, 1645.820982, 2627.647224
 9.2, 532.517366, 1646.930368, 2631.163987
 9.3, 532.652592, 1647.974365, 2634.540186
 9.4, 532.772249, 1648.954753, 2637.780714
 9.5, 532.876338, 1649.874644, 2640.89002
 9.6, 532.965747, 1650.73582, 2643.872551
 9.7, 533.041366, 1651.540948, 2646.732757
 9.8, 533.103197, 1652.291807, 2649.474195
 9.9, 533.152572, 1652.991067, 2652.101758
 10, 533.189047, 1653.639618, 2654.618561
 10.1, 533.189047, 1653.639618, 2654.618561
ENDTABLE
FY_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! FZ_AERO_SHAPING: Coefficient CFZ for for Z component of aerodynamic force. CFZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFZ from the
! calculation can be adjusted with FZ_AERO_SHAPING_GAIN and FZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FZ_AERO and SLIP_START_FZ_AERO.

FZ_AERO_SHAPING_CONSTANT 1 ; - ! Constant CFZ
FZ_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFZ

! FZ_AERO_SHAPING_2: Coefficient CFZ2 for Z component of aerodynamic force. CFZ2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FZ_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFZ2 from the calculation can be adjusted with
! FZ_AERO_SHAPING_2_GAIN and FZ_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FZ_AERO and PITCH_START_FZ_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FZ_AERO and Z_START_FZ_AERO.

! 2D table: row 1 has "0" (place holder) followed by 3 values of ride height (mm).
! Other rows have pitch (deg) followed by 3 values of CFZ2 (-).
FZ_AERO_SHAPING_2_CARPET 2D_LINEAR
 0, 0, 6.35, 12.7
 -2.68, -1.86048, -1.74516, -1.53844
 0, -1.86348, -1.74798, -1.54093
ENDTABLE
FZ_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CFZ2
FZ_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CFZ2
PITCH_START_FZ_AERO 0 ; deg ! Offset subtracted from pitch
PITCH_SCALE_FZ_AERO 1 ! Scale factor divided into (pitch - PITCH_START_FZ_AERO)
Z_START_FZ_AERO     0 ; mm ! Offset subtracted from ride height
Z_SCALE_FZ_AERO     1 ! Scale factor divided into (ride height - Z_START_FZ_AERO)

! FZ_TIRE: Tire vertical force. Vertical force is a function of tire compression
! (COEFFICIENT or TABLE). Vertical force from the calculation can be adjusted with
! FZ_TIRE_GAIN and FZ_TIRE_OFFSET. Tire compression used in the calculation can be
! adjusted with CMP_SCALE_FZ_TIRE and CMP_START_FZ_TIRE. An inverse version of this
! function is used internally. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = tire compression (mm), col 2 = vertical force (N)
FZ_TIRE_TABLE(1,1) SPLINE ! axle 1, left side
 0, 0
 2.2, 214.748
 3.47, 347.649
 4.74, 487.237
 6.01, 633.511
 7.28, 786.471
 8.55, 946.119
 9.82, 1112.452
 11.09, 1285.472
 12.36, 1465.178
 13.63, 1651.571
 14.9, 1844.651
 16.17, 2044.416
ENDTABLE
FZ_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1) 1 ! Scale factor divided into (tire compression -
                         ! CMP_START_FZ_TIRE)

! 1D table: col 1 = tire compression (mm), col 2 = vertical force (N)
FZ_TIRE_TABLE(1,2) SPLINE ! axle 1, right side
 0, 0
 2.2, 214.748
 3.47, 347.649
 4.74, 487.237
 6.01, 633.511
 7.28, 786.471
 8.55, 946.119
 9.82, 1112.452
 11.09, 1285.472
 12.36, 1465.178
 13.63, 1651.571
 14.9, 1844.651
 16.17, 2044.416
ENDTABLE
FZ_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2) 1 ! Scale factor divided into (tire compression -
                         ! CMP_START_FZ_TIRE)

! 1D table: col 1 = tire compression (mm), col 2 = vertical force (N)
FZ_TIRE_TABLE(2,1) SPLINE ! axle 2, left side
 0, 0
 2.2, 214.748
 3.47, 347.649
 4.74, 487.237
 6.01, 633.511
 7.28, 786.471
 8.55, 946.119
 9.82, 1112.452
 11.09, 1285.472
 12.36, 1465.178
 13.63, 1651.571
 14.9, 1844.651
 16.17, 2044.416
ENDTABLE
FZ_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1) 1 ! Scale factor divided into (tire compression -
                         ! CMP_START_FZ_TIRE)

! 1D table: col 1 = tire compression (mm), col 2 = vertical force (N)
FZ_TIRE_TABLE(2,2) SPLINE ! axle 2, right side
 0, 0
 2.2, 214.748
 3.47, 347.649
 4.74, 487.237
 6.01, 633.511
 7.28, 786.471
 8.55, 946.119
 9.82, 1112.452
 11.09, 1285.472
 12.36, 1465.178
 13.63, 1651.571
 14.9, 1844.651
 16.17, 2044.416
ENDTABLE
FZ_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2) 1 ! Scale factor divided into (tire compression -
                         ! CMP_START_FZ_TIRE)

! F_JNC_STOP: Jounce stop force. Force is a function of suspension travel at jounce
! stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Force from the calculation can be adjusted with F_JNC_STOP_GAIN
! and F_JNC_STOP_OFFSET. Suspension travel at jounce stop used in the calculation can
! be adjusted with CMP_SCALE_F_JNC_STOP and CMP_START_F_JNC_STOP. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1) LINEAR ! axle 1, left side
 23, 0
 24, 0
 25.4, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2) LINEAR ! axle 1, right side
 23, 0
 24, 0
 25.4, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1) LINEAR ! axle 2, left side
 23, 0
 24, 0
 25.4, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,2) LINEAR ! axle 2, right side
 23, 0
 24, 0
 25.4, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(2,2) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! F_REB_STOP: Rebound stop force. Force is a function of suspension travel at
! rebound stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Force from the calculation can be adjusted with
! F_REB_STOP_GAIN and F_REB_STOP_OFFSET. Suspension travel at rebound stop used in
! the calculation can be adjusted with CMP_SCALE_F_REB_STOP and CMP_START_F_REB_STOP.
! This configurable function supports 4 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to
! identify the dataset when reading data.

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1) LINEAR ! axle 1, left side
 -25.4, -10000
 -24, 0
 -23, 0
ENDTABLE
F_REB_STOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(1,1) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2) LINEAR ! axle 1, right side
 -25.4, -10000
 -24, 0
 -23, 0
ENDTABLE
F_REB_STOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(1,2) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1) LINEAR ! axle 2, left side
 -25.4, -10000
 -24, 0
 -23, 0
ENDTABLE
F_REB_STOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(2,1) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,2) LINEAR ! axle 2, right side
 -25.4, -10000
 -24, 0
 -23, 0
ENDTABLE
F_REB_STOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(2,2) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! ISHAFT_KIN: Intermediate shaft kinematics. Shaft output angle is a function of
! intermediate shaft input angle (CONSTANT, COEFFICIENT, or TABLE). Shaft output
! angle from the calculation can be adjusted with ISHAFT_KIN_GAIN and
! ISHAFT_KIN_OFFSET. An inverse version of this function is used internally. The
! derivative of this function is used internally.

ISHAFT_KIN_COEFFICIENT 1 ! [D] Coefficient: Shaft output angle per unit intermediate
                         ! shaft input angle (deg/deg)
ISHAFT_KIN_GAIN     1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET   0 ; deg ! Offset added (after gain) to get Shaft output angle

! LTARG: Target lateral offset (+ -> left, - -> right). This offset is combined with
! a reference path to produce a modified path for steering control, moving objects,
! lane definition, etc.. Lateral offset is a function of station (CONSTANT,
! COEFFICIENT, or TABLE). Lateral offset from the calculation can be adjusted with
! LTARG_GAIN and LTARG_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_LTARG and SSTART_LTARG. The derivative of this function is used internally.
! This configurable function supports 500 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index ILTARG is used to identify the
! dataset when reading data.

LTARG_ID(1)         1  ! No Offset, 1 sec. Preview
LTARG_CONSTANT(1)   0 ; m ! Constant lateral offset
LTARG_OFFSET(1)     0 ; m ! Offset added (after gain) to get lateral offset

! L_CONTACT_X: Tire/ground contact length. Tire contact length is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact length from the calculation can be adjusted with
! L_CONTACT_X_GAIN and L_CONTACT_X_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_X. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

L_CONTACT_X_CONSTANT(1,1) 70 ; mm ! Constant tire contact length, axle 1, left side
L_CONTACT_X_GAIN(1,1) 1 ! Gain multiplied with calculated value to get tire contact
                        ! length
L_CONTACT_X_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

L_CONTACT_X_CONSTANT(1,2) 70 ; mm ! Constant tire contact length, axle 1, right side
L_CONTACT_X_GAIN(1,2) 1 ! Gain multiplied with calculated value to get tire contact
                        ! length
L_CONTACT_X_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

L_CONTACT_X_CONSTANT(2,1) 70 ; mm ! Constant tire contact length, axle 2, left side
L_CONTACT_X_GAIN(2,1) 1 ! Gain multiplied with calculated value to get tire contact
                        ! length
L_CONTACT_X_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

L_CONTACT_X_CONSTANT(2,2) 70 ; mm ! Constant tire contact length, axle 2, right side
L_CONTACT_X_GAIN(2,2) 1 ! Gain multiplied with calculated value to get tire contact
                        ! length
L_CONTACT_X_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

! L_CONTACT_Y: Tire/ground contact width. Tire contact width is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact width from the calculation can be adjusted with
! L_CONTACT_Y_GAIN and L_CONTACT_Y_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_Y. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

L_CONTACT_Y_CONSTANT(1,1) 175 ; mm ! Constant tire contact width, axle 1, left side
L_CONTACT_Y_GAIN(1,1) 1 ! Gain multiplied with calculated value to get tire contact
                        ! width
L_CONTACT_Y_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get tire contact width

L_CONTACT_Y_CONSTANT(1,2) 175 ; mm ! Constant tire contact width, axle 1, right side
L_CONTACT_Y_GAIN(1,2) 1 ! Gain multiplied with calculated value to get tire contact
                        ! width
L_CONTACT_Y_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get tire contact width

L_CONTACT_Y_CONSTANT(2,1) 175 ; mm ! Constant tire contact width, axle 2, left side
L_CONTACT_Y_GAIN(2,1) 1 ! Gain multiplied with calculated value to get tire contact
                        ! width
L_CONTACT_Y_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get tire contact width

L_CONTACT_Y_CONSTANT(2,2) 175 ; mm ! Constant tire contact width, axle 2, right side
L_CONTACT_Y_GAIN(2,2) 1 ! Gain multiplied with calculated value to get tire contact
                        ! width
L_CONTACT_Y_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get tire contact width

! L_RELAX_X: Tire longitudinal relaxation length as a function of vertical load (Fz)
! and lagged slip ratio (Kappa). L_Relax_X can be a nonlinear CARPET function of Fz
! and Lagged Kappa or a function of Lagged Kappa (CONSTANT or TABLE) combined with a
! function L_RELAX_X_FZ of Fz (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. L_Relax_X from the calculation can be
! adjusted with L_RELAX_X_GAIN and L_RELAX_X_OFFSET. Lagged Kappa used in the
! calculation can be adjusted with LAGGED_KAPPA_SCALE_L_RELAX_X. Fz used in the
! calculation can be adjusted with FZ_SCALE_L_RELAX_X. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.
SET_UNITS L_RELAX_X_CARPET(1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1) SPLINE_FLAT ! axle 1, left side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1) 0.052 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,1) LINEAR ! axle 1, left side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,1) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2) SPLINE_FLAT ! axle 1, right side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2) 0.052 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2) LINEAR ! axle 1, right side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1) SPLINE_FLAT ! axle 2, left side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1) 0.052 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1) LINEAR ! axle 2, left side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2) SPLINE_FLAT ! axle 2, right side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2) 0.052 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2) LINEAR ! axle 2, right side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2) 6500 ! Scale factor divided into Fz

! L_RELAX_Y: Tire lateral relaxation length as a function of vertical load (Fz) and
! lagged slip angle (Alpha). L_Relax_Y can be a nonlinear CARPET function of Fz and
! Lagged Alpha or a function of Lagged Alpha (CONSTANT or TABLE) combined with a
! function L_RELAX_Y_FZ of Fz (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. L_Relax_Y from the calculation can be
! adjusted with L_RELAX_Y_GAIN and L_RELAX_Y_OFFSET. Lagged Alpha used in the
! calculation can be adjusted with LAGGED_ALPHA_SCALE_L_RELAX_Y. Fz used in the
! calculation can be adjusted with FZ_SCALE_L_RELAX_Y. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.
SET_UNITS L_RELAX_Y_CARPET(1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1) SPLINE_FLAT ! axle 1, left side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1) 0.52 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1) SPLINE ! axle 1, left side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2) SPLINE_FLAT ! axle 1, right side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2) 0.52 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2) SPLINE ! axle 1, right side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1) SPLINE_FLAT ! axle 2, left side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1) 0.52 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1) SPLINE ! axle 2, left side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2) SPLINE_FLAT ! axle 2, right side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2) 0.52 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2) SPLINE ! axle 2, right side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2) 6500 ! Scale factor divided into Fz

! MMOTOR_MAX: Motor maximum torque. Motor full torque is a function of motor speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Motor full torque from the calculation can be adjusted with
! MMOTOR_MAX_GAIN and MMOTOR_MAX_OFFSET. Motor speed used in the calculation can be
! adjusted with SPIN_SCALE_M_MOTOR_MAX and SPIN_START_M_MOTOR_MAX.

! 1D table: col 1 = motor speed (rpm), col 2 = Motor full torque (N-m)
MMOTOR_MAX_TABLE LINEAR ! linear interpolation and extrapolation
 0, 305
 500, 305
 1000, 289.4255
 1500, 192.1936
 2000, 143.8702
 2500, 114.9149
 3000, 95.6489
 3500, 81.917
 4000, 71.7149
 4500, 64.7339
 6000, 47.7
ENDTABLE
MMOTOR_MAX_GAIN     1 ! Gain multiplied with calculated value to get Motor full
                      ! torque
MMOTOR_MAX_OFFSET   0 ; N-m ! Offset added (after gain) to get Motor full torque
SPIN_START_M_MOTOR_MAX 0 ; rpm ! Offset subtracted from motor speed
SPIN_SCALE_M_MOTOR_MAX 1 ! Scale factor divided into (motor speed -
                         ! SPIN_START_M_MOTOR_MAX)

! MU_ROAD: Tire/road friction coefficient (MU) for a road surface. Use MU = -1 for
! original tire data (no scaling). MU can be a nonlinear CARPET function of lateral
! position and station or a function of station (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function MU_ROAD_L of lateral position (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. MU from the
! calculation can be adjusted with MU_ROAD_GAIN and MU_ROAD_OFFSET. Station used in
! the calculation can be adjusted with SSCALE_MU_ROAD and SSTART_MU_ROAD. Lateral
! position used in the calculation can be adjusted with L_SCALE_MU_ROAD and
! L_START_MU_ROAD. This configurable function supports 200 datasets; if indices shown
! below are not used, e.g., (2), the current value of the index IROAD is used to
! identify the dataset when reading data.

MU_ROAD_CONSTANT(1) 1 ; - ! Constant MU component due to station
MU_ROAD_GAIN(1)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(1)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(1) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(1) 1 ; - ! [D] Constant MU component due to lateral position

! MXG_TIRE: Tire overturning moment (Mx) as a function of vertical load (Fz) and
! inclination angle (Gamma). Mx can be a nonlinear CARPET function of Fz and Gamma or
! a function of Gamma (CONSTANT, COEFFICIENT, or TABLE) multiplied by a function
! MXG_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or TABLE). Mx from the calculation can be
! adjusted with MXG_TIRE_GAIN and MXG_TIRE_OFFSET. Gamma used in the calculation can
! be adjusted with GAMMA_SCALE_MXG_TIRE and GAMMA_START_MXG_TIRE. Fz used in the
! calculation can be adjusted with FZ_SCALE_MXG_TIRE and FZ_START_MXG_TIRE. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 2 values of Fz (N). Other rows
! have Gamma (deg) followed by 2 values of Mx (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MXG_TIRE_CARPET(1,1) 2D_FROM_ZERO ! axle 1, left side
 0, 1, 10
 1, 0, 0
 2, 0, 0
ENDTABLE
MXG_TIRE_GAIN(1,1)  1 ! Gain multiplied with calculated value to get Mx
MXG_TIRE_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get Mx
GAMMA_START_MXG_TIRE(1,1) 0 ; deg ! Offset subtracted from Gamma
GAMMA_SCALE_MXG_TIRE(1,1) 1 ! Scale factor divided into (Gamma -
                            ! GAMMA_START_MXG_TIRE)
FZ_START_MXG_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MXG_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_MXG_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 2 values of Fz (N). Other rows
! have Gamma (deg) followed by 2 values of Mx (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MXG_TIRE_CARPET(1,2) 2D_FROM_ZERO ! axle 1, right side
 0, 1, 10
 1, 0, 0
 2, 0, 0
ENDTABLE
MXG_TIRE_GAIN(1,2)  1 ! Gain multiplied with calculated value to get Mx
MXG_TIRE_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get Mx
GAMMA_START_MXG_TIRE(1,2) 0 ; deg ! Offset subtracted from Gamma
GAMMA_SCALE_MXG_TIRE(1,2) 1 ! Scale factor divided into (Gamma -
                            ! GAMMA_START_MXG_TIRE)
FZ_START_MXG_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MXG_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_MXG_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 2 values of Fz (N). Other rows
! have Gamma (deg) followed by 2 values of Mx (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MXG_TIRE_CARPET(2,1) 2D_FROM_ZERO ! axle 2, left side
 0, 1, 10
 1, 0, 0
 2, 0, 0
ENDTABLE
MXG_TIRE_GAIN(2,1)  1 ! Gain multiplied with calculated value to get Mx
MXG_TIRE_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get Mx
GAMMA_START_MXG_TIRE(2,1) 0 ; deg ! Offset subtracted from Gamma
GAMMA_SCALE_MXG_TIRE(2,1) 1 ! Scale factor divided into (Gamma -
                            ! GAMMA_START_MXG_TIRE)
FZ_START_MXG_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MXG_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_MXG_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 2 values of Fz (N). Other rows
! have Gamma (deg) followed by 2 values of Mx (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MXG_TIRE_CARPET(2,2) 2D_FROM_ZERO ! axle 2, right side
 0, 1, 10
 1, 0, 0
 2, 0, 0
ENDTABLE
MXG_TIRE_GAIN(2,2)  1 ! Gain multiplied with calculated value to get Mx
MXG_TIRE_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get Mx
GAMMA_START_MXG_TIRE(2,2) 0 ; deg ! Offset subtracted from Gamma
GAMMA_SCALE_MXG_TIRE(2,2) 1 ! Scale factor divided into (Gamma -
                            ! GAMMA_START_MXG_TIRE)
FZ_START_MXG_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MXG_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_MXG_TIRE)

! MX_AERO_SHAPING: Coefficient CMX for for X component of aerodynamic moment. CMX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMX from the
! calculation can be adjusted with MX_AERO_SHAPING_GAIN and MX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MX_AERO and SLIP_START_MX_AERO.

MX_AERO_SHAPING_CONSTANT 0 ; - ! Constant CMX
MX_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMX

! MX_AERO_SHAPING_2: Coefficient CMX2 for X component of aerodynamic moment. CMX2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MX_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMX2 from the calculation can be adjusted with
! MX_AERO_SHAPING_2_GAIN and MX_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MX_AERO and PITCH_START_MX_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MX_AERO and Z_START_MX_AERO.

MX_AERO_SHAPING_2_CONSTANT 1 ; - ! Constant CMX2 component due to pitch
MX_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CMX2
MX_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CMX2
MX_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
MX_AERO_SHAPING_Z_CONSTANT 1 ; - ! Constant CMX2 component due to ride height

! MX_AUX: Auxiliary roll moment (exerted on axle). Auxiliary roll moment can be a
! nonlinear CARPET function of static axle load and relative axle roll or a function
! of relative axle roll (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! MX_AUX_FSTATIC of static axle load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Auxiliary roll moment
! from the calculation can be adjusted with MX_AUX_GAIN and MX_AUX_OFFSET. Relative
! axle roll used in the calculation can be adjusted with ROLL_SCALE_MX_AUX and
! ROLL_START_MX_AUX. Static axle load used in the calculation can be adjusted with
! FSTATIC_SCALE_MX_AUX and FSTATIC_START_MX_AUX. This configurable function supports
! 2 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IAXLE is used to identify the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 2 values of static axle load
! (N). Other rows have relative axle roll (deg) followed by 2 values of auxiliary
! roll moment (N-m).
MX_AUX_CARPET(1) 2D_LINEAR ! axle 1
 0, 0, 1000
 0, 0, 0
 1, 195, 200
ENDTABLE
MX_AUX_GAIN(1)      1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1)    0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1) 1 ! Scale factor divided into (relative axle roll -
                       ! ROLL_START_MX_AUX)
FSTATIC_START_MX_AUX(1) 0 ; N ! Offset subtracted from static axle load
FSTATIC_SCALE_MX_AUX(1) 1 ! Scale factor divided into (static axle load -
                          ! FSTATIC_START_MX_AUX)

! 2D table: row 1 has "0" (place holder) followed by 2 values of static axle load
! (N). Other rows have relative axle roll (deg) followed by 2 values of auxiliary
! roll moment (N-m).
MX_AUX_CARPET(2) 2D_LINEAR ! axle 2
 0, 0, 1000
 0, 0, 0
 1, 195, 200
ENDTABLE
MX_AUX_GAIN(2)      1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2)    0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2) 1 ! Scale factor divided into (relative axle roll -
                       ! ROLL_START_MX_AUX)
FSTATIC_START_MX_AUX(2) 0 ; N ! Offset subtracted from static axle load
FSTATIC_SCALE_MX_AUX(2) 1 ! Scale factor divided into (static axle load -
                          ! FSTATIC_START_MX_AUX)

! MX_TIRE: Tire overturning moment (Mx) as a function of vertical load (Fz) and
! lateral slip (Alpha). Mx can be a nonlinear CARPET function of Fz and Alpha or a
! function of Alpha (CONSTANT, COEFFICIENT, or TABLE) multiplied by a function
! MX_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or TABLE). Mx from the calculation can be
! adjusted with MX_TIRE_GAIN and MX_TIRE_OFFSET. Alpha used in the calculation can be
! adjusted with ALPHA_SCALE_MX_TIRE and ALPHA_START_MX_TIRE. Fz used in the
! calculation can be adjusted with FZ_SCALE_MX_TIRE and FZ_START_MX_TIRE. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 2 values of Fz (N). Other rows
! have Alpha (deg) followed by 2 values of Mx (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MX_TIRE_CARPET(1,1) 2D_FROM_ZERO ! axle 1, left side
 0, 1, 10
 1, 0, 0
 2, 0, 0
ENDTABLE
MX_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get Mx
MX_TIRE_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get Mx
ALPHA_START_MX_TIRE(1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MX_TIRE(1,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_MX_TIRE)
FZ_START_MX_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MX_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_MX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 2 values of Fz (N). Other rows
! have Alpha (deg) followed by 2 values of Mx (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MX_TIRE_CARPET(1,2) 2D_FROM_ZERO ! axle 1, right side
 0, 1, 10
 1, 0, 0
 2, 0, 0
ENDTABLE
MX_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get Mx
MX_TIRE_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get Mx
ALPHA_START_MX_TIRE(1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MX_TIRE(1,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_MX_TIRE)
FZ_START_MX_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MX_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_MX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 2 values of Fz (N). Other rows
! have Alpha (deg) followed by 2 values of Mx (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MX_TIRE_CARPET(2,1) 2D_FROM_ZERO ! axle 2, left side
 0, 1, 10
 1, 0, 0
 2, 0, 0
ENDTABLE
MX_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get Mx
MX_TIRE_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get Mx
ALPHA_START_MX_TIRE(2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MX_TIRE(2,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_MX_TIRE)
FZ_START_MX_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MX_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_MX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 2 values of Fz (N). Other rows
! have Alpha (deg) followed by 2 values of Mx (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MX_TIRE_CARPET(2,2) 2D_FROM_ZERO ! axle 2, right side
 0, 1, 10
 1, 0, 0
 2, 0, 0
ENDTABLE
MX_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get Mx
MX_TIRE_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get Mx
ALPHA_START_MX_TIRE(2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MX_TIRE(2,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_MX_TIRE)
FZ_START_MX_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MX_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_MX_TIRE)

! MY_AERO_SHAPING: Coefficient CMY for for Y component of aerodynamic moment. CMY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMY from the
! calculation can be adjusted with MY_AERO_SHAPING_GAIN and MY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MY_AERO and SLIP_START_MY_AERO.

MY_AERO_SHAPING_CONSTANT 1 ; - ! Constant CMY
MY_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMY

! MY_AERO_SHAPING_2: Coefficient CMY2 for Y component of aerodynamic moment. CMY2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MY_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMY2 from the calculation can be adjusted with
! MY_AERO_SHAPING_2_GAIN and MY_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MY_AERO and PITCH_START_MY_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MY_AERO and Z_START_MY_AERO.

! 2D table: row 1 has "0" (place holder) followed by 3 values of ride height (mm).
! Other rows have pitch (deg) followed by 3 values of CMY2 (-).
MY_AERO_SHAPING_2_CARPET 2D_LINEAR
 0, 0, 6.35, 12.7
 -2.68, 0.139822, 0.132555, 0.13075
 0, 0.145737, 0.138159, 0.136281
ENDTABLE
MY_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CMY2
MY_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CMY2
PITCH_START_MY_AERO 0 ; deg ! Offset subtracted from pitch
PITCH_SCALE_MY_AERO 1 ! Scale factor divided into (pitch - PITCH_START_MY_AERO)
Z_START_MY_AERO     0 ; mm ! Offset subtracted from ride height
Z_SCALE_MY_AERO     1 ! Scale factor divided into (ride height - Z_START_MY_AERO)

! MY_BRAKE: Brake torque at wheel. Brake torque is a function of wheel cylinder
! pressure (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake torque from the calculation can be adjusted with
! MY_BRAKE_GAIN and MY_BRAKE_OFFSET. Wheel cylinder pressure used in the calculation
! can be adjusted with PBK_SCALE_MY_BRAKE and PBK_START_MY_BRAKE. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

MY_BRAKE_COEFFICIENT(1,1) 95 ! Coefficient: brake torque per unit wheel cylinder
                             ! pressure (N-m/MPa), axle 1, left side
MY_BRAKE_GAIN(1,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(1,2) 95 ! Coefficient: brake torque per unit wheel cylinder
                             ! pressure (N-m/MPa), axle 1, right side
MY_BRAKE_GAIN(1,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,1) 95 ! Coefficient: brake torque per unit wheel cylinder
                             ! pressure (N-m/MPa), axle 2, left side
MY_BRAKE_GAIN(2,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,2) 95 ! Coefficient: brake torque per unit wheel cylinder
                             ! pressure (N-m/MPa), axle 2, right side
MY_BRAKE_GAIN(2,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

! MZG_TIRE: Tire aligning moment (Mz) as a function of vertical load (Fz) and
! inclination angle (Gamma). Mz can be a nonlinear CARPET function of Fz and Gamma or
! a function of Gamma (CONSTANT, COEFFICIENT, or TABLE) multiplied by a function
! MZG_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or TABLE). Mz from the calculation can be
! adjusted with MZG_TIRE_GAIN and MZG_TIRE_OFFSET. Gamma used in the calculation can
! be adjusted with GAMMA_SCALE_MZG_TIRE and GAMMA_START_MZG_TIRE. Fz used in the
! calculation can be adjusted with FZ_SCALE_MZG_TIRE and FZ_START_MZG_TIRE. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 2 values of Fz (N). Other rows
! have Gamma (deg) followed by 2 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZG_TIRE_CARPET(1,1) 2D_FROM_ZERO ! axle 1, left side
 0, 1, 10
 1, 0, 0
 2, 0, 0
ENDTABLE
MZG_TIRE_GAIN(1,1)  1 ! Gain multiplied with calculated value to get Mz
MZG_TIRE_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get Mz
GAMMA_START_MZG_TIRE(1,1) 0 ; deg ! Offset subtracted from Gamma
GAMMA_SCALE_MZG_TIRE(1,1) 1 ! Scale factor divided into (Gamma -
                            ! GAMMA_START_MZG_TIRE)
FZ_START_MZG_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZG_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZG_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 2 values of Fz (N). Other rows
! have Gamma (deg) followed by 2 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZG_TIRE_CARPET(1,2) 2D_FROM_ZERO ! axle 1, right side
 0, 1, 10
 1, 0, 0
 2, 0, 0
ENDTABLE
MZG_TIRE_GAIN(1,2)  1 ! Gain multiplied with calculated value to get Mz
MZG_TIRE_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get Mz
GAMMA_START_MZG_TIRE(1,2) 0 ; deg ! Offset subtracted from Gamma
GAMMA_SCALE_MZG_TIRE(1,2) 1 ! Scale factor divided into (Gamma -
                            ! GAMMA_START_MZG_TIRE)
FZ_START_MZG_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZG_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZG_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 2 values of Fz (N). Other rows
! have Gamma (deg) followed by 2 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZG_TIRE_CARPET(2,1) 2D_FROM_ZERO ! axle 2, left side
 0, 1, 10
 1, 0, 0
 2, 0, 0
ENDTABLE
MZG_TIRE_GAIN(2,1)  1 ! Gain multiplied with calculated value to get Mz
MZG_TIRE_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get Mz
GAMMA_START_MZG_TIRE(2,1) 0 ; deg ! Offset subtracted from Gamma
GAMMA_SCALE_MZG_TIRE(2,1) 1 ! Scale factor divided into (Gamma -
                            ! GAMMA_START_MZG_TIRE)
FZ_START_MZG_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZG_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZG_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 2 values of Fz (N). Other rows
! have Gamma (deg) followed by 2 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZG_TIRE_CARPET(2,2) 2D_FROM_ZERO ! axle 2, right side
 0, 1, 10
 1, 0, 0
 2, 0, 0
ENDTABLE
MZG_TIRE_GAIN(2,2)  1 ! Gain multiplied with calculated value to get Mz
MZG_TIRE_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get Mz
GAMMA_START_MZG_TIRE(2,2) 0 ; deg ! Offset subtracted from Gamma
GAMMA_SCALE_MZG_TIRE(2,2) 1 ! Scale factor divided into (Gamma -
                            ! GAMMA_START_MZG_TIRE)
FZ_START_MZG_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZG_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZG_TIRE)

! MZ_AERO_SHAPING: Coefficient CMZ for for Z component of aerodynamic moment. CMZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMZ from the
! calculation can be adjusted with MZ_AERO_SHAPING_GAIN and MZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MZ_AERO and SLIP_START_MZ_AERO.

MZ_AERO_SHAPING_CONSTANT 0 ; - ! Constant CMZ
MZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMZ

! MZ_AERO_SHAPING_2: Coefficient CMZ2 for Z component of aerodynamic moment. CMZ2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MZ_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMZ2 from the calculation can be adjusted with
! MZ_AERO_SHAPING_2_GAIN and MZ_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MZ_AERO and PITCH_START_MZ_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MZ_AERO and Z_START_MZ_AERO.

MZ_AERO_SHAPING_2_CONSTANT 1 ; - ! Constant CMZ2 component due to pitch
MZ_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CMZ2
MZ_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CMZ2
MZ_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
MZ_AERO_SHAPING_Z_CONSTANT 1 ; - ! Constant CMZ2 component due to ride height

! MZ_PARKING_STEER: Speed-sensitive steering torque for parking and near-zero speed
! conditions. Steering torque at kingpin can be a nonlinear CARPET function of
! vertical load and vehicle speed or a function of vehicle speed (CONSTANT or TABLE)
! combined with a function MZ_PARKING_STEER_FZ of vertical load (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steering torque at kingpin from the calculation can be adjusted with
! MZ_PARKING_STEER_GAIN and MZ_PARKING_STEER_OFFSET. Vehicle speed used in the
! calculation can be adjusted with VX_SCALE_MZ_PARKING_STEER and
! VX_START_MZ_PARKING_STEER. Vertical load used in the calculation can be adjusted
! with FZ_SCALE_MZ_PARKING_STEER and FZ_START_MZ_PARKING_STEER. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

MZ_PARKING_STEER_CONSTANT(1,1) 0 ; N-m ! Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 1, left
                                 ! side
MZ_PARKING_STEER_GAIN(1,1) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,1) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(1,1) 1 ; - ! [D] Constant steering torque at kingpin
                                    ! component due to vertical load, axle 1, left
                                    ! side

MZ_PARKING_STEER_CONSTANT(1,2) 0 ; N-m ! Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 1, right
                                 ! side
MZ_PARKING_STEER_GAIN(1,2) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,2) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(1,2) 1 ; - ! [D] Constant steering torque at kingpin
                                    ! component due to vertical load, axle 1, right
                                    ! side

MZ_PARKING_STEER_CONSTANT(2,1) 0 ; N-m ! Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 2, left
                                 ! side
MZ_PARKING_STEER_GAIN(2,1) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(2,1) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(2,1) 1 ; - ! [D] Constant steering torque at kingpin
                                    ! component due to vertical load, axle 2, left
                                    ! side

MZ_PARKING_STEER_CONSTANT(2,2) 0 ; N-m ! Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 2, right
                                 ! side
MZ_PARKING_STEER_GAIN(2,2) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(2,2) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(2,2) 1 ; - ! [D] Constant steering torque at kingpin
                                    ! component due to vertical load, axle 2, right
                                    ! side

! MZ_TIRE: Tire aligning moment (Mz) as a function of vertical load (Fz) and lateral
! slip (Alpha). Mz can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function MZ_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Mz from the calculation can be adjusted with MZ_TIRE_GAIN and
! MZ_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_MZ_TIRE and ALPHA_START_MZ_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_MZ_TIRE and FZ_START_MZ_TIRE. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

! 2D table: row 1 has "0" (place holder) followed by 3 values of Fz (N). Other rows
! have Alpha (deg) followed by 3 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1) 2D_FROM_ZERO ! axle 1, left side
 0, 222.41, 1112.06, 2001.7
 0.1, 0.022399, 0.90996, 1.51597
 0.2, 0.09289, 1.842451, 3.111361
 0.3, 0.163392, 2.776881, 4.707294
 0.4, 0.233908, 3.713886, 6.304041
 0.5, 0.304438, 4.654282, 7.901873
 0.6, 0.374981, 5.598609, 9.500924
 0.7, 0.445551, 6.54741, 11.101603
 0.8, 0.516149, 7.500822, 12.704044
 0.9, 0.586773, 8.458978, 14.308384
 1, 0.657425, 9.421745, 15.914893
 1.1, 0.728118, 10.388307, 17.523977
 1.2, 0.798851, 11.358124, 19.135503
 1.3, 0.869624, 12.329974, 20.749875
 1.4, 0.940439, 13.302367, 22.36723
 1.5, 1.011307, 14.273404, 23.987568
 1.6, 1.08223, 15.240915, 25.611025
 1.7, 1.153207, 16.202597, 27.237735
 1.8, 1.224252, 17.155195, 28.867835
 1.9, 1.295351, 18.095455, 30.501325
 2, 1.366559, 19.020123, 32.13834
 2.1, 1.437739, 19.924995, 33.778608
 2.2, 1.509055, 20.806006, 35.422266
 2.3, 1.580371, 21.659087, 37.069314
 2.4, 1.651823, 22.479492, 38.71948
 2.5, 1.72341, 23.263019, 40.372765
 2.6, 1.794997, 24.004923, 42.029167
 2.7, 1.86672, 24.701, 43.688146
 2.8, 1.938443, 25.346912, 45.349701
 2.9, 2.010301, 25.938726, 47.013697
 3, 2.082159, 26.472918, 48.679455
 3.1, 2.154289, 26.946099, 50.347111
 3.2, 2.226283, 27.355556, 52.015852
 3.3, 2.298548, 27.699256, 53.685677
 3.4, 2.370813, 27.975436, 55.355774
 3.5, 2.443214, 28.183012, 57.02587
 3.6, 2.51575, 28.321712, 58.695425
 3.7, 2.588286, 28.391672, 60.363759
 3.8, 2.660958, 28.393706, 62.03033
 3.9, 2.73363, 28.329169, 63.694597
 4, 2.806573, 28.200231, 65.355609
 4.1, 2.879516, 28.00906, 67.012826
 4.2, 2.952595, 27.758641, 68.665432
 4.3, 3.025673, 27.452226, 70.312616
 4.4, 3.098887, 27.093341, 71.953427
 4.5, 3.172237, 26.685917, 73.587187
 4.6, 3.245587, 26.233617, 75.212677
 4.7, 3.319072, 25.740777, 76.829084
 4.8, 3.392557, 25.21133, 78.435457
 4.9, 3.466314, 24.649343, 80.030712
 5, 3.54007, 24.058885, 81.61363
 5.1, 3.613827, 23.443885, 83.18326
 5.2, 3.687719, 22.808142, 84.738384
 5.3, 3.761611, 22.15518, 86.277915
 5.4, 3.835639, 21.488389, 87.800634
 5.5, 3.909802, 20.811022, 89.305321
 5.6, 3.98383, 20.126063, 90.790755
 5.7, 4.058129, 19.436223, 92.255716
 5.8, 4.132292, 18.743942, 93.698849
 5.9, 4.206591, 18.051662, 95.118933
 6, 4.281025, 17.361279, 96.514748
 6.1, 4.355324, 16.674693, 97.884802
 6.2, 4.429758, 15.99353, 99.228146
 6.3, 4.504193, 15.319282, 100.543154
 6.4, 4.578627, 14.653168, 101.828876
 6.5, 4.653061, 13.996274, 103.083821
 6.6, 4.727631, 13.349549, 104.306769
 6.7, 4.802066, 12.713671, 105.496499
 6.8, 4.8765, 12.089452, 106.651792
 6.9, 4.950935, 11.4773, 107.771427
 7, 5.025369, 10.877758, 108.854454
 7.1, 5.099804, 10.290959, 109.899518
 7.2, 5.174102, 9.717313, 110.905535
 7.3, 5.248401, 9.156818, 111.871556
 7.4, 5.3227, 8.60961, 112.796495
 7.5, 5.396863, 8.075688, 113.679403
 7.6, 5.470891, 7.55519, 114.519468
 7.7, 5.544919, 7.047843, 115.31574
 7.8, 5.618811, 6.553512, 116.067406
 7.9, 5.692567, 6.072196, 116.773787
 8, 5.766188, 5.603761, 117.434206
 8.1, 5.839673, 5.147664, 118.047985
 8.2, 5.913159, 4.70404, 118.614716
 8.3, 5.986373, 4.272348, 119.133724
 8.4, 6.059316, 3.852587, 119.604599
 8.5, 6.132259, 3.444485, 120.027208
 8.6, 6.204931, 3.047502, 120.401142
 8.7, 6.277331, 2.661636, 120.726132
 8.8, 6.349597, 2.286346, 121.002312
 8.9, 6.42159, 1.921631, 121.229276
 9, 6.493313, 1.567084, 121.407295
 9.1, 6.564765, 1.222395, 121.536504
 9.2, 6.635945, 0.887277, 121.616769
 9.3, 6.706855, 0.561487, 121.64863
 9.4, 6.777493, 0.244728, 121.632225
 9.5, 6.847724, -0.063248, 121.568095
 9.6, 6.917684, -0.362719, 121.456375
 9.7, 6.987238, -0.653949, 121.29788
 9.8, 7.056384, -0.937193, 121.092881
 9.9, 7.125124, -1.212682, 120.842325
 10, 7.193593, -1.480659, 120.546622
 10.1, 7.193593, -1.480659, 120.546622
ENDTABLE
MZ_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 3 values of Fz (N). Other rows
! have Alpha (deg) followed by 3 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2) 2D_FROM_ZERO ! axle 1, right side
 0, 222.41, 1112.06, 2001.7
 0.1, 0.022399, 0.90996, 1.51597
 0.2, 0.09289, 1.842451, 3.111361
 0.3, 0.163392, 2.776881, 4.707294
 0.4, 0.233908, 3.713886, 6.304041
 0.5, 0.304438, 4.654282, 7.901873
 0.6, 0.374981, 5.598609, 9.500924
 0.7, 0.445551, 6.54741, 11.101603
 0.8, 0.516149, 7.500822, 12.704044
 0.9, 0.586773, 8.458978, 14.308384
 1, 0.657425, 9.421745, 15.914893
 1.1, 0.728118, 10.388307, 17.523977
 1.2, 0.798851, 11.358124, 19.135503
 1.3, 0.869624, 12.329974, 20.749875
 1.4, 0.940439, 13.302367, 22.36723
 1.5, 1.011307, 14.273404, 23.987568
 1.6, 1.08223, 15.240915, 25.611025
 1.7, 1.153207, 16.202597, 27.237735
 1.8, 1.224252, 17.155195, 28.867835
 1.9, 1.295351, 18.095455, 30.501325
 2, 1.366559, 19.020123, 32.13834
 2.1, 1.437739, 19.924995, 33.778608
 2.2, 1.509055, 20.806006, 35.422266
 2.3, 1.580371, 21.659087, 37.069314
 2.4, 1.651823, 22.479492, 38.71948
 2.5, 1.72341, 23.263019, 40.372765
 2.6, 1.794997, 24.004923, 42.029167
 2.7, 1.86672, 24.701, 43.688146
 2.8, 1.938443, 25.346912, 45.349701
 2.9, 2.010301, 25.938726, 47.013697
 3, 2.082159, 26.472918, 48.679455
 3.1, 2.154289, 26.946099, 50.347111
 3.2, 2.226283, 27.355556, 52.015852
 3.3, 2.298548, 27.699256, 53.685677
 3.4, 2.370813, 27.975436, 55.355774
 3.5, 2.443214, 28.183012, 57.02587
 3.6, 2.51575, 28.321712, 58.695425
 3.7, 2.588286, 28.391672, 60.363759
 3.8, 2.660958, 28.393706, 62.03033
 3.9, 2.73363, 28.329169, 63.694597
 4, 2.806573, 28.200231, 65.355609
 4.1, 2.879516, 28.00906, 67.012826
 4.2, 2.952595, 27.758641, 68.665432
 4.3, 3.025673, 27.452226, 70.312616
 4.4, 3.098887, 27.093341, 71.953427
 4.5, 3.172237, 26.685917, 73.587187
 4.6, 3.245587, 26.233617, 75.212677
 4.7, 3.319072, 25.740777, 76.829084
 4.8, 3.392557, 25.21133, 78.435457
 4.9, 3.466314, 24.649343, 80.030712
 5, 3.54007, 24.058885, 81.61363
 5.1, 3.613827, 23.443885, 83.18326
 5.2, 3.687719, 22.808142, 84.738384
 5.3, 3.761611, 22.15518, 86.277915
 5.4, 3.835639, 21.488389, 87.800634
 5.5, 3.909802, 20.811022, 89.305321
 5.6, 3.98383, 20.126063, 90.790755
 5.7, 4.058129, 19.436223, 92.255716
 5.8, 4.132292, 18.743942, 93.698849
 5.9, 4.206591, 18.051662, 95.118933
 6, 4.281025, 17.361279, 96.514748
 6.1, 4.355324, 16.674693, 97.884802
 6.2, 4.429758, 15.99353, 99.228146
 6.3, 4.504193, 15.319282, 100.543154
 6.4, 4.578627, 14.653168, 101.828876
 6.5, 4.653061, 13.996274, 103.083821
 6.6, 4.727631, 13.349549, 104.306769
 6.7, 4.802066, 12.713671, 105.496499
 6.8, 4.8765, 12.089452, 106.651792
 6.9, 4.950935, 11.4773, 107.771427
 7, 5.025369, 10.877758, 108.854454
 7.1, 5.099804, 10.290959, 109.899518
 7.2, 5.174102, 9.717313, 110.905535
 7.3, 5.248401, 9.156818, 111.871556
 7.4, 5.3227, 8.60961, 112.796495
 7.5, 5.396863, 8.075688, 113.679403
 7.6, 5.470891, 7.55519, 114.519468
 7.7, 5.544919, 7.047843, 115.31574
 7.8, 5.618811, 6.553512, 116.067406
 7.9, 5.692567, 6.072196, 116.773787
 8, 5.766188, 5.603761, 117.434206
 8.1, 5.839673, 5.147664, 118.047985
 8.2, 5.913159, 4.70404, 118.614716
 8.3, 5.986373, 4.272348, 119.133724
 8.4, 6.059316, 3.852587, 119.604599
 8.5, 6.132259, 3.444485, 120.027208
 8.6, 6.204931, 3.047502, 120.401142
 8.7, 6.277331, 2.661636, 120.726132
 8.8, 6.349597, 2.286346, 121.002312
 8.9, 6.42159, 1.921631, 121.229276
 9, 6.493313, 1.567084, 121.407295
 9.1, 6.564765, 1.222395, 121.536504
 9.2, 6.635945, 0.887277, 121.616769
 9.3, 6.706855, 0.561487, 121.64863
 9.4, 6.777493, 0.244728, 121.632225
 9.5, 6.847724, -0.063248, 121.568095
 9.6, 6.917684, -0.362719, 121.456375
 9.7, 6.987238, -0.653949, 121.29788
 9.8, 7.056384, -0.937193, 121.092881
 9.9, 7.125124, -1.212682, 120.842325
 10, 7.193593, -1.480659, 120.546622
 10.1, 7.193593, -1.480659, 120.546622
ENDTABLE
MZ_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 3 values of Fz (N). Other rows
! have Alpha (deg) followed by 3 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1) 2D_FROM_ZERO ! axle 2, left side
 0, 222.41, 1112.06, 2001.7
 0.1, 0.022399, 0.90996, 1.51597
 0.2, 0.09289, 1.842451, 3.111361
 0.3, 0.163392, 2.776881, 4.707294
 0.4, 0.233908, 3.713886, 6.304041
 0.5, 0.304438, 4.654282, 7.901873
 0.6, 0.374981, 5.598609, 9.500924
 0.7, 0.445551, 6.54741, 11.101603
 0.8, 0.516149, 7.500822, 12.704044
 0.9, 0.586773, 8.458978, 14.308384
 1, 0.657425, 9.421745, 15.914893
 1.1, 0.728118, 10.388307, 17.523977
 1.2, 0.798851, 11.358124, 19.135503
 1.3, 0.869624, 12.329974, 20.749875
 1.4, 0.940439, 13.302367, 22.36723
 1.5, 1.011307, 14.273404, 23.987568
 1.6, 1.08223, 15.240915, 25.611025
 1.7, 1.153207, 16.202597, 27.237735
 1.8, 1.224252, 17.155195, 28.867835
 1.9, 1.295351, 18.095455, 30.501325
 2, 1.366559, 19.020123, 32.13834
 2.1, 1.437739, 19.924995, 33.778608
 2.2, 1.509055, 20.806006, 35.422266
 2.3, 1.580371, 21.659087, 37.069314
 2.4, 1.651823, 22.479492, 38.71948
 2.5, 1.72341, 23.263019, 40.372765
 2.6, 1.794997, 24.004923, 42.029167
 2.7, 1.86672, 24.701, 43.688146
 2.8, 1.938443, 25.346912, 45.349701
 2.9, 2.010301, 25.938726, 47.013697
 3, 2.082159, 26.472918, 48.679455
 3.1, 2.154289, 26.946099, 50.347111
 3.2, 2.226283, 27.355556, 52.015852
 3.3, 2.298548, 27.699256, 53.685677
 3.4, 2.370813, 27.975436, 55.355774
 3.5, 2.443214, 28.183012, 57.02587
 3.6, 2.51575, 28.321712, 58.695425
 3.7, 2.588286, 28.391672, 60.363759
 3.8, 2.660958, 28.393706, 62.03033
 3.9, 2.73363, 28.329169, 63.694597
 4, 2.806573, 28.200231, 65.355609
 4.1, 2.879516, 28.00906, 67.012826
 4.2, 2.952595, 27.758641, 68.665432
 4.3, 3.025673, 27.452226, 70.312616
 4.4, 3.098887, 27.093341, 71.953427
 4.5, 3.172237, 26.685917, 73.587187
 4.6, 3.245587, 26.233617, 75.212677
 4.7, 3.319072, 25.740777, 76.829084
 4.8, 3.392557, 25.21133, 78.435457
 4.9, 3.466314, 24.649343, 80.030712
 5, 3.54007, 24.058885, 81.61363
 5.1, 3.613827, 23.443885, 83.18326
 5.2, 3.687719, 22.808142, 84.738384
 5.3, 3.761611, 22.15518, 86.277915
 5.4, 3.835639, 21.488389, 87.800634
 5.5, 3.909802, 20.811022, 89.305321
 5.6, 3.98383, 20.126063, 90.790755
 5.7, 4.058129, 19.436223, 92.255716
 5.8, 4.132292, 18.743942, 93.698849
 5.9, 4.206591, 18.051662, 95.118933
 6, 4.281025, 17.361279, 96.514748
 6.1, 4.355324, 16.674693, 97.884802
 6.2, 4.429758, 15.99353, 99.228146
 6.3, 4.504193, 15.319282, 100.543154
 6.4, 4.578627, 14.653168, 101.828876
 6.5, 4.653061, 13.996274, 103.083821
 6.6, 4.727631, 13.349549, 104.306769
 6.7, 4.802066, 12.713671, 105.496499
 6.8, 4.8765, 12.089452, 106.651792
 6.9, 4.950935, 11.4773, 107.771427
 7, 5.025369, 10.877758, 108.854454
 7.1, 5.099804, 10.290959, 109.899518
 7.2, 5.174102, 9.717313, 110.905535
 7.3, 5.248401, 9.156818, 111.871556
 7.4, 5.3227, 8.60961, 112.796495
 7.5, 5.396863, 8.075688, 113.679403
 7.6, 5.470891, 7.55519, 114.519468
 7.7, 5.544919, 7.047843, 115.31574
 7.8, 5.618811, 6.553512, 116.067406
 7.9, 5.692567, 6.072196, 116.773787
 8, 5.766188, 5.603761, 117.434206
 8.1, 5.839673, 5.147664, 118.047985
 8.2, 5.913159, 4.70404, 118.614716
 8.3, 5.986373, 4.272348, 119.133724
 8.4, 6.059316, 3.852587, 119.604599
 8.5, 6.132259, 3.444485, 120.027208
 8.6, 6.204931, 3.047502, 120.401142
 8.7, 6.277331, 2.661636, 120.726132
 8.8, 6.349597, 2.286346, 121.002312
 8.9, 6.42159, 1.921631, 121.229276
 9, 6.493313, 1.567084, 121.407295
 9.1, 6.564765, 1.222395, 121.536504
 9.2, 6.635945, 0.887277, 121.616769
 9.3, 6.706855, 0.561487, 121.64863
 9.4, 6.777493, 0.244728, 121.632225
 9.5, 6.847724, -0.063248, 121.568095
 9.6, 6.917684, -0.362719, 121.456375
 9.7, 6.987238, -0.653949, 121.29788
 9.8, 7.056384, -0.937193, 121.092881
 9.9, 7.125124, -1.212682, 120.842325
 10, 7.193593, -1.480659, 120.546622
 10.1, 7.193593, -1.480659, 120.546622
ENDTABLE
MZ_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 3 values of Fz (N). Other rows
! have Alpha (deg) followed by 3 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2) 2D_FROM_ZERO ! axle 2, right side
 0, 222.41, 1112.06, 2001.7
 0.1, 0.022399, 0.90996, 1.51597
 0.2, 0.09289, 1.842451, 3.111361
 0.3, 0.163392, 2.776881, 4.707294
 0.4, 0.233908, 3.713886, 6.304041
 0.5, 0.304438, 4.654282, 7.901873
 0.6, 0.374981, 5.598609, 9.500924
 0.7, 0.445551, 6.54741, 11.101603
 0.8, 0.516149, 7.500822, 12.704044
 0.9, 0.586773, 8.458978, 14.308384
 1, 0.657425, 9.421745, 15.914893
 1.1, 0.728118, 10.388307, 17.523977
 1.2, 0.798851, 11.358124, 19.135503
 1.3, 0.869624, 12.329974, 20.749875
 1.4, 0.940439, 13.302367, 22.36723
 1.5, 1.011307, 14.273404, 23.987568
 1.6, 1.08223, 15.240915, 25.611025
 1.7, 1.153207, 16.202597, 27.237735
 1.8, 1.224252, 17.155195, 28.867835
 1.9, 1.295351, 18.095455, 30.501325
 2, 1.366559, 19.020123, 32.13834
 2.1, 1.437739, 19.924995, 33.778608
 2.2, 1.509055, 20.806006, 35.422266
 2.3, 1.580371, 21.659087, 37.069314
 2.4, 1.651823, 22.479492, 38.71948
 2.5, 1.72341, 23.263019, 40.372765
 2.6, 1.794997, 24.004923, 42.029167
 2.7, 1.86672, 24.701, 43.688146
 2.8, 1.938443, 25.346912, 45.349701
 2.9, 2.010301, 25.938726, 47.013697
 3, 2.082159, 26.472918, 48.679455
 3.1, 2.154289, 26.946099, 50.347111
 3.2, 2.226283, 27.355556, 52.015852
 3.3, 2.298548, 27.699256, 53.685677
 3.4, 2.370813, 27.975436, 55.355774
 3.5, 2.443214, 28.183012, 57.02587
 3.6, 2.51575, 28.321712, 58.695425
 3.7, 2.588286, 28.391672, 60.363759
 3.8, 2.660958, 28.393706, 62.03033
 3.9, 2.73363, 28.329169, 63.694597
 4, 2.806573, 28.200231, 65.355609
 4.1, 2.879516, 28.00906, 67.012826
 4.2, 2.952595, 27.758641, 68.665432
 4.3, 3.025673, 27.452226, 70.312616
 4.4, 3.098887, 27.093341, 71.953427
 4.5, 3.172237, 26.685917, 73.587187
 4.6, 3.245587, 26.233617, 75.212677
 4.7, 3.319072, 25.740777, 76.829084
 4.8, 3.392557, 25.21133, 78.435457
 4.9, 3.466314, 24.649343, 80.030712
 5, 3.54007, 24.058885, 81.61363
 5.1, 3.613827, 23.443885, 83.18326
 5.2, 3.687719, 22.808142, 84.738384
 5.3, 3.761611, 22.15518, 86.277915
 5.4, 3.835639, 21.488389, 87.800634
 5.5, 3.909802, 20.811022, 89.305321
 5.6, 3.98383, 20.126063, 90.790755
 5.7, 4.058129, 19.436223, 92.255716
 5.8, 4.132292, 18.743942, 93.698849
 5.9, 4.206591, 18.051662, 95.118933
 6, 4.281025, 17.361279, 96.514748
 6.1, 4.355324, 16.674693, 97.884802
 6.2, 4.429758, 15.99353, 99.228146
 6.3, 4.504193, 15.319282, 100.543154
 6.4, 4.578627, 14.653168, 101.828876
 6.5, 4.653061, 13.996274, 103.083821
 6.6, 4.727631, 13.349549, 104.306769
 6.7, 4.802066, 12.713671, 105.496499
 6.8, 4.8765, 12.089452, 106.651792
 6.9, 4.950935, 11.4773, 107.771427
 7, 5.025369, 10.877758, 108.854454
 7.1, 5.099804, 10.290959, 109.899518
 7.2, 5.174102, 9.717313, 110.905535
 7.3, 5.248401, 9.156818, 111.871556
 7.4, 5.3227, 8.60961, 112.796495
 7.5, 5.396863, 8.075688, 113.679403
 7.6, 5.470891, 7.55519, 114.519468
 7.7, 5.544919, 7.047843, 115.31574
 7.8, 5.618811, 6.553512, 116.067406
 7.9, 5.692567, 6.072196, 116.773787
 8, 5.766188, 5.603761, 117.434206
 8.1, 5.839673, 5.147664, 118.047985
 8.2, 5.913159, 4.70404, 118.614716
 8.3, 5.986373, 4.272348, 119.133724
 8.4, 6.059316, 3.852587, 119.604599
 8.5, 6.132259, 3.444485, 120.027208
 8.6, 6.204931, 3.047502, 120.401142
 8.7, 6.277331, 2.661636, 120.726132
 8.8, 6.349597, 2.286346, 121.002312
 8.9, 6.42159, 1.921631, 121.229276
 9, 6.493313, 1.567084, 121.407295
 9.1, 6.564765, 1.222395, 121.536504
 9.2, 6.635945, 0.887277, 121.616769
 9.3, 6.706855, 0.561487, 121.64863
 9.4, 6.777493, 0.244728, 121.632225
 9.5, 6.847724, -0.063248, 121.568095
 9.6, 6.917684, -0.362719, 121.456375
 9.7, 6.987238, -0.653949, 121.29788
 9.8, 7.056384, -0.937193, 121.092881
 9.9, 7.125124, -1.212682, 120.842325
 10, 7.193593, -1.480659, 120.546622
 10.1, 7.193593, -1.480659, 120.546622
ENDTABLE
MZ_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! M_DIFF_VISC: Torque from viscous differential. The speed and torque differences
! are either [left - right] (half-shaft) or [front - rear] (driveshaft). This torque
! difference is a function of speed difference (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. This torque difference
! from the calculation can be adjusted with M_DIFF_VISC_GAIN and M_DIFF_VISC_OFFSET.
! Speed difference used in the calculation can be adjusted with
! DSPIN_SCALE_M_DIFF_VISC and DSPIN_START_M_DIFF_VISC. This configurable function
! supports 2 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IDIFF is used to identify the dataset when reading data.

M_DIFF_VISC_CONSTANT(2) 0 ; N-m ! Constant this torque difference, rear differential
M_DIFF_VISC_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

! PBK_CON: Brake control pressure (master cylinder). Brake pressure is a function of
! time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake pressure from the calculation can be adjusted with
! PBK_CON_GAIN and PBK_CON_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_PBK_CON and TSTART_PBK_CON.

PBK_CON_CONSTANT    0 ; MPa ! [D] Constant brake pressure
PBK_CON_OFFSET      0 ; MPa ! Offset added (after gain) to get brake pressure

! PBK_DL: Brake delivery pressure (proportioning valve). Delivery pressure can be a
! nonlinear CARPET function of dynamic wheel load and master cylinder pressure or a
! function of master cylinder pressure (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function PBK_DL_FZ of dynamic wheel load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Delivery pressure from
! the calculation can be adjusted with PBK_DL_GAIN and PBK_DL_OFFSET. Master cylinder
! pressure used in the calculation can be adjusted with PBK_CON_SCALE_PBK_DL and
! PBK_CON_START_PBK_DL. Dynamic wheel load used in the calculation can be adjusted
! with FZ_SCALE_PBK_DL and FZ_START_PBK_DL. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

PBK_DL_COEFFICIENT(1,1) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 1, left side
PBK_DL_GAIN(1,1)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(1,1) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,1) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 1, left side

PBK_DL_COEFFICIENT(1,2) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 1, right side
PBK_DL_GAIN(1,2)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(1,2) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,2) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 1, right side

PBK_DL_COEFFICIENT(2,1) 0.75 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), axle 2, left side
PBK_DL_GAIN(2,1)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(2,1) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,1) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 2, left side

PBK_DL_COEFFICIENT(2,2) 0.75 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), axle 2, right side
PBK_DL_GAIN(2,2)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(2,2) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,2) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 2, right side

! PWR_DRV_THROTTLE: Driving power demanded by throttle pedal. Driving power is a
! function of Throttle pedal position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Driving power from the
! calculation can be adjusted with PWR_DRV_THROTTLE_GAIN and PWR_DRV_THROTTLE_OFFSET.
! Throttle pedal position used in the calculation can be adjusted with
! SPIN_SCALE_PWR_DRV_THRT and SPIN_START_PWR_DRV_THRT. An inverse version of this
! function is used internally.

PWR_DRV_THROTTLE_COEFFICIENT 78 ! Coefficient: Driving power per unit Throttle pedal
                                ! position (kW/-)
PWR_DRV_THROTTLE_GAIN 1 ! Gain multiplied with calculated value to get Driving power
PWR_DRV_THROTTLE_OFFSET 0 ; kW ! Offset added (after gain) to get Driving power
SPIN_START_PWR_DRV_THRT 0 ; - ! Offset subtracted from Throttle pedal position
SPIN_SCALE_PWR_DRV_THRT 1 ! Scale factor divided into (Throttle pedal position -
                          ! SPIN_START_PWR_DRV_THRT)

! RACK_KIN: Nonlinear steering system kinematics for rack and pinion: steer angle at
! the road wheel. Road wheel steer is a function of rack displacement (CONSTANT,
! COEFFICIENT, or TABLE). Road wheel steer from the calculation can be adjusted with
! RACK_KIN_GAIN and RACK_KIN_OFFSET. The derivative of this function is used
! internally. This configurable function supports 4 datasets; if indices shown below
! are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are
! used to identify the dataset when reading data.

! 1D table: col 1 = rack displacement (mm), col 2 = road wheel steer (deg)
RACK_KIN_TABLE(1,1) SPLINE ! axle 1, left side
 -63, -61.8757477
 -62, -58.4387146
 -61, -55.91014168
 -60, -53.82750789
 -59, -52.02049825
 -58, -50.40401619
 -57, -48.92839563
 -56, -47.56170892
 -55, -46.28201979
 -54, -45.07350221
 -53, -43.92430186
 -52, -42.8252707
 -51, -41.7691753
 -50, -40.75017905
 -49, -39.76349063
 -48, -38.80511808
 -47, -37.87169211
 -46, -36.96033619
 -45, -36.06856931
 -44, -35.19423174
 -43, -34.33542762
 -42, -33.49047986
 -41, -32.65789432
 -40, -31.83633102
 -39, -31.02458079
 -38, -30.22154613
 -37, -29.42622537
 -36, -28.6376995
 -35, -27.85512117
 -34, -27.07770527
 -33, -26.30472107
 -32, -25.53548539
 -31, -24.76935678
 -30, -24.00573047
 -29, -23.24403397
 -28, -22.48372324
 -27, -21.72427936
 -26, -20.96520552
 -25, -20.20602441
 -24, -19.44627589
 -23, -18.68551493
 -22, -17.9233097
 -21, -17.15923993
 -20, -16.39289537
 -19, -15.62387443
 -18, -14.85178295
 -17, -14.07623302
 -16, -13.29684199
 -15, -12.51323149
 -14, -11.72502657
 -13, -10.93185487
 -12, -10.13334591
 -11, -9.329130392
 -10, -8.518839551
 -9, -7.702104588
 -8, -6.878556117
 -7, -6.047823666
 -6, -5.209535213
 -5, -4.363316762
 -4, -3.508791948
 -3, -2.645581686
 -2, -1.773303847
 -1, -0.891572968
 0, 0
 1, 0.901807916
 2, 1.814247631
 3, 2.737720144
 4, 3.672630714
 5, 4.619388937
 6, 5.578408783
 7, 6.550108598
 8, 7.534911058
 9, 8.53324308
 10, 9.545535693
 11, 10.57222386
 12, 11.61374625
 13, 12.67054497
 14, 13.74306524
 15, 14.83175502
 16, 15.93706461
 17, 17.05944617
 18, 18.19935324
 19, 19.35724017
 20, 20.53356156
 21, 21.72877171
 22, 22.94332393
 23, 24.17767003
 24, 25.43225968
 25, 26.70753987
 26, 28.00395449
 27, 29.32194389
 28, 30.66194471
 29, 32.02438979
 30, 33.40970839
 31, 34.81832668
 32, 36.25066863
 33, 37.70715742
 34, 39.18821736
 35, 40.69427661
 36, 42.22577078
 37, 43.78314759
 38, 45.36687288
 39, 46.97743822
 40, 48.61537048
 41, 50.28124384
 42, 51.97569472
 43, 53.69944048
 44, 55.45330268
 45, 57.23823623
 46, 59.055366
 47, 60.90603326
 48, 62.79185481
 49, 64.71479956
 50, 66.67728852
 51, 68.682328
 52, 70.73368996
 53, 72.8361622
 54, 74.99590429
 55, 77.22097034
 56, 79.5221058
 57, 81.91401823
 58, 84.41752141
 59, 87.06342199
 60, 89.90027224
ENDTABLE
RACK_KIN_GAIN(1,1)  1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
RACK_KIN_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = rack displacement (mm), col 2 = road wheel steer (deg)
RACK_KIN_TABLE(1,2) SPLINE ! axle 1, right side
 -60, -89.90027224
 -59, -87.06342199
 -58, -84.41752141
 -57, -81.91401823
 -56, -79.5221058
 -55, -77.22097034
 -54, -74.99590429
 -53, -72.8361622
 -52, -70.73368996
 -51, -68.682328
 -50, -66.67728852
 -49, -64.71479956
 -48, -62.79185481
 -47, -60.90603326
 -46, -59.055366
 -45, -57.23823623
 -44, -55.45330268
 -43, -53.69944048
 -42, -51.97569472
 -41, -50.28124384
 -40, -48.61537048
 -39, -46.97743822
 -38, -45.36687288
 -37, -43.78314759
 -36, -42.22577078
 -35, -40.69427661
 -34, -39.18821736
 -33, -37.70715742
 -32, -36.25066863
 -31, -34.81832668
 -30, -33.40970839
 -29, -32.02438979
 -28, -30.66194471
 -27, -29.32194389
 -26, -28.00395449
 -25, -26.70753987
 -24, -25.43225968
 -23, -24.17767003
 -22, -22.94332393
 -21, -21.72877171
 -20, -20.53356156
 -19, -19.35724017
 -18, -18.19935324
 -17, -17.05944617
 -16, -15.93706461
 -15, -14.83175502
 -14, -13.74306524
 -13, -12.67054497
 -12, -11.61374625
 -11, -10.57222386
 -10, -9.545535693
 -9, -8.53324308
 -8, -7.534911058
 -7, -6.550108598
 -6, -5.578408783
 -5, -4.619388937
 -4, -3.672630714
 -3, -2.737720144
 -2, -1.814247631
 -1, -0.901807916
 0, 0
 1, 0.891572968
 2, 1.773303847
 3, 2.645581686
 4, 3.508791948
 5, 4.363316762
 6, 5.209535213
 7, 6.047823666
 8, 6.878556117
 9, 7.702104588
 10, 8.518839551
 11, 9.329130392
 12, 10.13334591
 13, 10.93185487
 14, 11.72502657
 15, 12.51323149
 16, 13.29684199
 17, 14.07623302
 18, 14.85178295
 19, 15.62387443
 20, 16.39289537
 21, 17.15923993
 22, 17.9233097
 23, 18.68551493
 24, 19.44627589
 25, 20.20602441
 26, 20.96520552
 27, 21.72427936
 28, 22.48372324
 29, 23.24403397
 30, 24.00573047
 31, 24.76935678
 32, 25.53548539
 33, 26.30472107
 34, 27.07770527
 35, 27.85512117
 36, 28.6376995
 37, 29.42622537
 38, 30.22154613
 39, 31.02458079
 40, 31.83633102
 41, 32.65789432
 42, 33.49047986
 43, 34.33542762
 44, 35.19423174
 45, 36.06856931
 46, 36.96033619
 47, 37.87169211
 48, 38.80511808
 49, 39.76349063
 50, 40.75017905
 51, 41.7691753
 52, 42.8252707
 53, 43.92430186
 54, 45.07350221
 55, 46.28201979
 56, 47.56170892
 57, 48.92839563
 58, 50.40401619
 59, 52.02049825
 60, 53.82750789
 61, 55.91014168
 62, 58.4387146
 63, 61.8757477
ENDTABLE
RACK_KIN_GAIN(1,2)  1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
RACK_KIN_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = rack displacement (mm), col 2 = road wheel steer (deg)
RACK_KIN_TABLE(2,1) SPLINE ! axle 2, left side
 -63, -61.8757477
 -62, -58.4387146
 -61, -55.91014168
 -60, -53.82750789
 -59, -52.02049825
 -58, -50.40401619
 -57, -48.92839563
 -56, -47.56170892
 -55, -46.28201979
 -54, -45.07350221
 -53, -43.92430186
 -52, -42.8252707
 -51, -41.7691753
 -50, -40.75017905
 -49, -39.76349063
 -48, -38.80511808
 -47, -37.87169211
 -46, -36.96033619
 -45, -36.06856931
 -44, -35.19423174
 -43, -34.33542762
 -42, -33.49047986
 -41, -32.65789432
 -40, -31.83633102
 -39, -31.02458079
 -38, -30.22154613
 -37, -29.42622537
 -36, -28.6376995
 -35, -27.85512117
 -34, -27.07770527
 -33, -26.30472107
 -32, -25.53548539
 -31, -24.76935678
 -30, -24.00573047
 -29, -23.24403397
 -28, -22.48372324
 -27, -21.72427936
 -26, -20.96520552
 -25, -20.20602441
 -24, -19.44627589
 -23, -18.68551493
 -22, -17.9233097
 -21, -17.15923993
 -20, -16.39289537
 -19, -15.62387443
 -18, -14.85178295
 -17, -14.07623302
 -16, -13.29684199
 -15, -12.51323149
 -14, -11.72502657
 -13, -10.93185487
 -12, -10.13334591
 -11, -9.329130392
 -10, -8.518839551
 -9, -7.702104588
 -8, -6.878556117
 -7, -6.047823666
 -6, -5.209535213
 -5, -4.363316762
 -4, -3.508791948
 -3, -2.645581686
 -2, -1.773303847
 -1, -0.891572968
 0, 0
 1, 0.901807916
 2, 1.814247631
 3, 2.737720144
 4, 3.672630714
 5, 4.619388937
 6, 5.578408783
 7, 6.550108598
 8, 7.534911058
 9, 8.53324308
 10, 9.545535693
 11, 10.57222386
 12, 11.61374625
 13, 12.67054497
 14, 13.74306524
 15, 14.83175502
 16, 15.93706461
 17, 17.05944617
 18, 18.19935324
 19, 19.35724017
 20, 20.53356156
 21, 21.72877171
 22, 22.94332393
 23, 24.17767003
 24, 25.43225968
 25, 26.70753987
 26, 28.00395449
 27, 29.32194389
 28, 30.66194471
 29, 32.02438979
 30, 33.40970839
 31, 34.81832668
 32, 36.25066863
 33, 37.70715742
 34, 39.18821736
 35, 40.69427661
 36, 42.22577078
 37, 43.78314759
 38, 45.36687288
 39, 46.97743822
 40, 48.61537048
 41, 50.28124384
 42, 51.97569472
 43, 53.69944048
 44, 55.45330268
 45, 57.23823623
 46, 59.055366
 47, 60.90603326
 48, 62.79185481
 49, 64.71479956
 50, 66.67728852
 51, 68.682328
 52, 70.73368996
 53, 72.8361622
 54, 74.99590429
 55, 77.22097034
 56, 79.5221058
 57, 81.91401823
 58, 84.41752141
 59, 87.06342199
 60, 89.90027224
ENDTABLE
RACK_KIN_GAIN(2,1)  1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
RACK_KIN_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = rack displacement (mm), col 2 = road wheel steer (deg)
RACK_KIN_TABLE(2,2) SPLINE ! axle 2, right side
 -60, -89.90027224
 -59, -87.06342199
 -58, -84.41752141
 -57, -81.91401823
 -56, -79.5221058
 -55, -77.22097034
 -54, -74.99590429
 -53, -72.8361622
 -52, -70.73368996
 -51, -68.682328
 -50, -66.67728852
 -49, -64.71479956
 -48, -62.79185481
 -47, -60.90603326
 -46, -59.055366
 -45, -57.23823623
 -44, -55.45330268
 -43, -53.69944048
 -42, -51.97569472
 -41, -50.28124384
 -40, -48.61537048
 -39, -46.97743822
 -38, -45.36687288
 -37, -43.78314759
 -36, -42.22577078
 -35, -40.69427661
 -34, -39.18821736
 -33, -37.70715742
 -32, -36.25066863
 -31, -34.81832668
 -30, -33.40970839
 -29, -32.02438979
 -28, -30.66194471
 -27, -29.32194389
 -26, -28.00395449
 -25, -26.70753987
 -24, -25.43225968
 -23, -24.17767003
 -22, -22.94332393
 -21, -21.72877171
 -20, -20.53356156
 -19, -19.35724017
 -18, -18.19935324
 -17, -17.05944617
 -16, -15.93706461
 -15, -14.83175502
 -14, -13.74306524
 -13, -12.67054497
 -12, -11.61374625
 -11, -10.57222386
 -10, -9.545535693
 -9, -8.53324308
 -8, -7.534911058
 -7, -6.550108598
 -6, -5.578408783
 -5, -4.619388937
 -4, -3.672630714
 -3, -2.737720144
 -2, -1.814247631
 -1, -0.901807916
 0, 0
 1, 0.891572968
 2, 1.773303847
 3, 2.645581686
 4, 3.508791948
 5, 4.363316762
 6, 5.209535213
 7, 6.047823666
 8, 6.878556117
 9, 7.702104588
 10, 8.518839551
 11, 9.329130392
 12, 10.13334591
 13, 10.93185487
 14, 11.72502657
 15, 12.51323149
 16, 13.29684199
 17, 14.07623302
 18, 14.85178295
 19, 15.62387443
 20, 16.39289537
 21, 17.15923993
 22, 17.9233097
 23, 18.68551493
 24, 19.44627589
 25, 20.20602441
 26, 20.96520552
 27, 21.72427936
 28, 22.48372324
 29, 23.24403397
 30, 24.00573047
 31, 24.76935678
 32, 25.53548539
 33, 26.30472107
 34, 27.07770527
 35, 27.85512117
 36, 28.6376995
 37, 29.42622537
 38, 30.22154613
 39, 31.02458079
 40, 31.83633102
 41, 32.65789432
 42, 33.49047986
 43, 34.33542762
 44, 35.19423174
 45, 36.06856931
 46, 36.96033619
 47, 37.87169211
 48, 38.80511808
 49, 39.76349063
 50, 40.75017905
 51, 41.7691753
 52, 42.8252707
 53, 43.92430186
 54, 45.07350221
 55, 46.28201979
 56, 47.56170892
 57, 48.92839563
 58, 50.40401619
 59, 52.02049825
 60, 53.82750789
 61, 55.91014168
 62, 58.4387146
 63, 61.8757477
ENDTABLE
RACK_KIN_GAIN(2,2)  1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
RACK_KIN_OFFSET(2,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! RACK_TRAVEL: Steering rack displacement. Rack displacement is a function of pinion
! angle (CONSTANT, COEFFICIENT, or TABLE). Rack displacement from the calculation can
! be adjusted with RACK_TRAVEL_GAIN and RACK_TRAVEL_OFFSET. The derivative of this
! function is used internally. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IAXLE
! is used to identify the dataset when reading data.

RACK_TRAVEL_COEFFICIENT(1) 0.2222222222 ! Coefficient: rack displacement per unit
                                        ! pinion angle (mm/deg), axle 1
RACK_TRAVEL_GAIN(1) 1 ! Gain multiplied with calculated value to get rack
                      ! displacement
RACK_TRAVEL_OFFSET(1) 0 ; mm ! Offset added (after gain) to get rack displacement

RACK_TRAVEL_COEFFICIENT(2) 0.2222222222 ! Coefficient: rack displacement per unit
                                        ! pinion angle (mm/deg), axle 2
RACK_TRAVEL_GAIN(2) 1 ! Gain multiplied with calculated value to get rack
                      ! displacement
RACK_TRAVEL_OFFSET(2) 0 ; mm ! Offset added (after gain) to get rack displacement

! ROAD_DZ: Incremental elevation added to a road surface. DZ can be a nonlinear
! CARPET function of lateral position and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function ROAD_DZ_L of lateral position
! (CONSTANT, COEFFICIENT, or TABLE). DZ from the calculation can be adjusted with
! ROAD_DZ_GAIN and ROAD_DZ_OFFSET. Station used in the calculation can be adjusted
! with SSCALE_ROAD_DZ and SSTART_ROAD_DZ. Lateral position used in the calculation
! can be adjusted with L_SCALE_ROAD_DZ and L_START_ROAD_DZ. The derivative of this
! function is used internally. This configurable function supports 200 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index
! IROAD_DZ is used to identify the dataset when reading data.

ROAD_DZ_ID(1)       1  ! Flat
ROAD_DZ_CONSTANT(1) 0 ; m ! Constant dZ component due to station
ROAD_DZ_GAIN(1)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(1)   0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(1) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(1) 1 ; - ! Constant dZ component due to lateral position

! ROAD_NEW_ID: Left/right boundary: 0 -> no boundary, -1 stop when L reaches
! boundary, > 0 ID of adjacent road. ID is a function of S (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. ID from the
! calculation can be adjusted with ROAD_NEW_ID_GAIN and ROAD_NEW_ID_OFFSET. S used in
! the calculation can be adjusted with SSCALE_ROAD_NEW_ID and SSTART_ROAD_NEW_ID.
! This configurable function supports 400 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IROAD and ISIDE are used to
! identify the dataset when reading data.

ROAD_NEW_ID_CONSTANT(1,1) 0 ; - ! [D] Constant ID, Road 1, left side boundary
ROAD_NEW_ID_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(1,2) 0 ; - ! [D] Constant ID, Road 1, right side boundary
ROAD_NEW_ID_OFFSET(1,2) 0 ; - ! Offset added (after gain) to get ID

! ROAD_ZS: Road elevation component related only to road station S. Elevation is a
! function of station (CONSTANT, COEFFICIENT, or TABLE). Elevation from the
! calculation can be adjusted with ROAD_ZS_GAIN and ROAD_ZS_OFFSET. Station used in
! the calculation can be adjusted with SSCALE_ROAD_ZS and SSTART_ROAD_ZS. The
! derivative of this function is used internally. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IROAD is used to identify the dataset when reading data.

ROAD_ZS_CONSTANT(1) 0 ; m ! Constant elevation
ROAD_ZS_OFFSET(1)   0 ; m ! Offset added (after gain) to get elevation

! R_CHRG_BATTERY: Battery resistance being charged. Battery resistance can be a
! nonlinear CARPET function of Temperature and Battery level state of charge or a
! function of Battery level state of charge (CONSTANT, COEFFICIENT, or TABLE)
! multiplied by a function R_CHRG_BATTERY_TEMP of Temperature (CONSTANT, COEFFICIENT,
! or TABLE). Alternatively, a custom equation can be defined at runtime. Battery
! resistance from the calculation can be adjusted with R_CHRG_BATTERY_GAIN and
! R_CHRG_BATTERY_OFFSET. Battery level state of charge used in the calculation can be
! adjusted with SOC_SCALE_R_CHRG_BATTERY and SOC_START_R_CHRG_BATTERY. Temperature
! used in the calculation can be adjusted with TEMP_SCALE_R_CHRG_BATTERY and
! TEMP_START_R_CHRG_BATTERY.

! 2D table: row 1 has "0" (place holder) followed by 2 values of Temperature (C).
! Other rows have Battery level state of charge (-) followed by 2 values of Battery
! resistance (V2/W).
R_CHRG_BATTERY_CARPET 2D_LINEAR
 0, 0, 25
 0, 0.0235, 0.0235
 0.1, 0.022, 0.022
 0.2, 0.0205, 0.0205
 0.3, 0.0198, 0.0198
 0.4, 0.0198, 0.0198
 0.5, 0.0196, 0.0196
 0.6, 0.0198, 0.0198
 0.7, 0.0197, 0.0197
 0.8, 0.0203, 0.0203
 0.9, 0.0204, 0.0204
 1, 0.0204, 0.0204
ENDTABLE
R_CHRG_BATTERY_GAIN 1 ! Gain multiplied with calculated value to get Battery
                      ! resistance
R_CHRG_BATTERY_OFFSET 0 ; V2/W ! Offset added (after gain) to get Battery resistance
SOC_START_R_CHRG_BATTERY 0 ; - ! Offset subtracted from Battery level state of
                           ! charge
SOC_SCALE_R_CHRG_BATTERY 1 ! Scale factor divided into (Battery level state of
                           ! charge - SOC_START_R_CHRG_BATTERY)
TEMP_START_R_CHRG_BATTERY 0 ; C ! Offset subtracted from Temperature
TEMP_SCALE_R_CHRG_BATTERY 1 ! Scale factor divided into (Temperature -
                            ! TEMP_START_R_CHRG_BATTERY)

! R_DIS_BATTERY: Battery resistance being discharged. Battery resistance can be a
! nonlinear CARPET function of Temperature and Battery level state of charge or a
! function of Battery level state of charge (CONSTANT, COEFFICIENT, or TABLE)
! multiplied by a function R_DIS_BATTERY_TEMP of Temperature (CONSTANT, COEFFICIENT,
! or TABLE). Alternatively, a custom equation can be defined at runtime. Battery
! resistance from the calculation can be adjusted with R_DIS_BATTERY_GAIN and
! R_DIS_BATTERY_OFFSET. Battery level state of charge used in the calculation can be
! adjusted with SOC_SCALE_R_DIS_BATTERY and SOC_START_R_DIS_BATTERY. Temperature used
! in the calculation can be adjusted with TEMP_SCALE_R_DIS_BATTERY and
! TEMP_START_R_DIS_BATTERY.

! 2D table: row 1 has "0" (place holder) followed by 2 values of Temperature (C).
! Other rows have Battery level state of charge (-) followed by 2 values of Battery
! resistance (V2/W).
R_DIS_BATTERY_CARPET 2D_LINEAR
 0, 0, 25
 0, 0.0377, 0.0377
 0.1, 0.0338, 0.0338
 0.2, 0.03, 0.03
 0.3, 0.028, 0.028
 0.4, 0.0275, 0.0275
 0.5, 0.0268, 0.0268
 0.6, 0.0269, 0.0269
 0.7, 0.0273, 0.0273
 0.8, 0.0283, 0.0283
 0.9, 0.0298, 0.0298
 1, 0.0312, 0.0312
ENDTABLE
R_DIS_BATTERY_GAIN  1 ! Gain multiplied with calculated value to get Battery
                      ! resistance
R_DIS_BATTERY_OFFSET 0 ; V2/W ! Offset added (after gain) to get Battery resistance
SOC_START_R_DIS_BATTERY 0 ; - ! Offset subtracted from Battery level state of charge
SOC_SCALE_R_DIS_BATTERY 1 ! Scale factor divided into (Battery level state of charge
                          ! - SOC_START_R_DIS_BATTERY)
TEMP_START_R_DIS_BATTERY 0 ; C ! Offset subtracted from Temperature
TEMP_SCALE_R_DIS_BATTERY 1 ! Scale factor divided into (Temperature -
                           ! TEMP_START_R_DIS_BATTERY)

! R_EFF_MOTOR: Motor efficiency (hybrid powertrain). Motor efficiency can be a
! nonlinear CARPET function of motor output torque and motor speed or a function of
! motor speed (CONSTANT, COEFFICIENT, or TABLE) multiplied by a function
! R_EFF_MOTOR_TORQUE of motor output torque (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Motor efficiency from
! the calculation can be adjusted with R_EFF_MOTOR_GAIN and R_EFF_MOTOR_OFFSET. Motor
! speed used in the calculation can be adjusted with SPIN_SCALE_R_EFF_MOTOR and
! SPIN_START_R_EFF_MOTOR. Motor output torque used in the calculation can be adjusted
! with TORQUE_SCALE_R_EFF_MOTOR and TORQUE_START_R_EFF_MOTOR.

! 2D table: row 1 has "0" (place holder) followed by 23 values of motor output
! torque (N-m). Other rows have motor speed (rpm) followed by 23 values of Motor
! efficiency (-).
R_EFF_MOTOR_CARPET 2D_LINEAR
 0, -305, -275, -245, -215, -185, -155, -125, -95, -65, -35, -5, 0, 5, 35, 65, 95, 125, 155, 185, 215, 245, 275, 305
 0, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975, 0.85975
 500, 0.532, 0.5605, 0.589, 0.6175, 0.646, 0.684, 0.722, 0.76, 0.8075, 0.855, 0.8265, 0.85975, 0.8265, 0.855, 0.8075, 0.76, 0.722, 0.684, 0.646, 0.6175, 0.589, 0.5605, 0.532
 1000, 0.684, 0.703, 0.722, 0.741, 0.7695, 0.7885, 0.817, 0.8455, 0.8645, 0.893, 0.8075, 0.85975, 0.8075, 0.893, 0.8645, 0.8455, 0.817, 0.7885, 0.7695, 0.741, 0.722, 0.703, 0.684
 1500, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.855, 0.874, 0.8835, 0.893, 0.7885, 0.85975, 0.7885, 0.893, 0.8835, 0.874, 0.855, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 2000, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.8835, 0.9025, 0.9025, 0.779, 0.85975, 0.779, 0.9025, 0.9025, 0.8835, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 2500, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.893, 0.9025, 0.9025, 0.7695, 0.85975, 0.7695, 0.9025, 0.9025, 0.893, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 3000, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.912, 0.9025, 0.7695, 0.85975, 0.7695, 0.9025, 0.912, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 3500, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.912, 0.9025, 0.76, 0.85975, 0.76, 0.9025, 0.912, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 4000, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.76, 0.85975, 0.76, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 4500, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.7505, 0.85975, 0.7505, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
 6000, 0.684, 0.703, 0.722, 0.741, 0.817, 0.836, 0.874, 0.9025, 0.9025, 0.9025, 0.7505, 0.85975, 0.7505, 0.9025, 0.9025, 0.9025, 0.874, 0.836, 0.817, 0.741, 0.722, 0.703, 0.684
ENDTABLE
R_EFF_MOTOR_GAIN    1 ! Gain multiplied with calculated value to get Motor
                      ! efficiency
R_EFF_MOTOR_OFFSET  0 ; - ! Offset added (after gain) to get Motor efficiency
SPIN_START_R_EFF_MOTOR 0 ; rpm ! Offset subtracted from motor speed
SPIN_SCALE_R_EFF_MOTOR 1 ! Scale factor divided into (motor speed -
                         ! SPIN_START_R_EFF_MOTOR)
TORQUE_START_R_EFF_MOTOR 0 ; N-m ! Offset subtracted from motor output torque
TORQUE_SCALE_R_EFF_MOTOR 1 ! Scale factor divided into (motor output torque -
                           ! TORQUE_START_R_EFF_MOTOR)

! R_STEER_SPEED: Rear-wheel steering gain due to speed. The gain is: [rear steer
! control]/[driver steer control]. This ratio is multiplied with the nominal steering
! gear input to determine the input to any rear axle steering gear. Gain is a
! function of speed (CONSTANT, COEFFICIENT, or TABLE). Gain from the calculation can
! be adjusted with R_STEER_SPEED_GAIN and R_STEER_SPEED_OFFSET. Speed used in the
! calculation can be adjusted with VX_SCALE_R_STEER and VX_START_R_STEER. The
! derivative of this function is used internally. This configurable function supports
! 2 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IAXLE is used to identify the dataset when reading data.

R_STEER_SPEED_CONSTANT(2) 0 ; - ! [D] Constant gain, axle 2
R_STEER_SPEED_OFFSET(2) 0 ; - ! Offset added (after gain) to get gain

! SENSOR_ANTENNA_ELEVATION: Sensor antenna sensitivity to elevation. Sensitivity is
! a function of Elevation (CONSTANT or TABLE). Alternatively, a custom equation can
! be defined at runtime. Sensitivity from the calculation can be adjusted with
! SENSOR_ANTENNA_ELEVATION_GAIN and SENSOR_ANTENNA_ELEVATION_OFFSET. This
! configurable function supports 99 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISENSOR is used to identify the dataset
! when reading data.

SENSOR_ANTENNA_ELEVATION_CONSTANT(1) 1 ; - ! [D] Constant Sensitivity
SENSOR_ANTENNA_ELEVATION_GAIN(1) 1 ! Gain multiplied with calculated value to get
                                   ! Sensitivity
SENSOR_ANTENNA_ELEVATION_OFFSET(1) 0 ; - ! Offset added (after gain) to get
                                     ! Sensitivity

! SENSOR_ANTENNA_RANGE: Sensor antenna sensitivity to range. Sensitivity can be a
! nonlinear CARPET function of Bearing and Distance or a function of Distance
! (CONSTANT or TABLE) multiplied by a function SENSOR_ANTENNA_BEARING of Bearing
! (CONSTANT or TABLE). Alternatively, a custom equation can be defined at runtime.
! Sensitivity from the calculation can be adjusted with SENSOR_ANTENNA_RANGE_GAIN and
! SENSOR_ANTENNA_RANGE_OFFSET. Distance used in the calculation can be adjusted with
! DSCALE_SENSOR_ANTENNA_RANGE and DSTART_SENSOR_ANTENNA_RANGE. Bearing used in the
! calculation can be adjusted with BSCALE_SENSOR_ANTENNA_RANGE and
! BSTART_SENSOR_ANTENNA_RANGE. This configurable function supports 99 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index ISENSOR
! is used to identify the dataset when reading data.

SENSOR_ANTENNA_RANGE_CONSTANT(1) 1 ; - ! Constant Sensitivity component due to
                                   ! Distance
SENSOR_ANTENNA_RANGE_GAIN(1) 1 ! Gain multiplied with calculated value to get
                               ! Sensitivity
SENSOR_ANTENNA_RANGE_OFFSET(1) 0 ; - ! Offset added (after gain) to get Sensitivity
SENSOR_ANTENNA_BEARING_CONSTANT(1) 1 ; - ! Constant Sensitivity scaling due to
                                     ! Bearing

! SENSOR_MAP: Reflectiveness of object, based on sensor type and object type.
! Reflectiveness can be a nonlinear CARPET function of sensor type and target type.

SENSOR_MAP_CONSTANT 1 ; - ! [D] Constant reflectiveness

! SPEED_TARGET: Speed controller target. Speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function SPEED_TARGET_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Speed from the
! calculation can be adjusted with SPEED_TARGET_GAIN and SPEED_TARGET_OFFSET. Time
! used in the calculation can be adjusted with TSCALE_SPEED_TARGET and
! TSTART_SPEED_TARGET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_TARGET and SSTART_SPEED_TARGET. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index ISPEED is used to identify the dataset when reading data.

SPEED_TARGET_ID(1)  1  ! Procedure: Procedure: Autocross
SPEED_TARGET_CONSTANT(1) 18 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(1) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(1) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(1) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(1) km/h ;
SPEED_TARGET_S_CONSTANT(1) 0 ; km/h ! Constant speed component due to station

! STEER_COMP: Steer of each wheel on an axle as a function of the total kingpin
! steering moment from both wheels on the axle, MINUS steering due to suspension
! compliance. Steer is a function of total kingpin moment (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Steer from the
! calculation can be adjusted with STEER_COMP_GAIN and STEER_COMP_OFFSET. Total
! kingpin moment used in the calculation can be adjusted with M_KP_SCALE_STEER_COMP
! and M_KP_START_STEER_COMP. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IAXLE
! is used to identify the dataset when reading data.

STEER_COMP_CONSTANT(1) 0.001 ; deg ! Constant steer, axle 1
STEER_COMP_GAIN(1)  1 ! Gain multiplied with calculated value to get steer
STEER_COMP_OFFSET(1) 0 ; deg ! Offset added (after gain) to get steer

STEER_COMP_CONSTANT(2) 0.001 ; deg ! Constant steer, axle 2
STEER_COMP_GAIN(2)  1 ! Gain multiplied with calculated value to get steer
STEER_COMP_OFFSET(2) 0 ; deg ! Offset added (after gain) to get steer

! SUSP_DIVE: Suspension dive (measured at zero steer). Suspension dive can be a
! nonlinear CARPET function of jounce (other side) and jounce or a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function SUSP_DIVE_JNC_OTHER_SIDE
! of jounce (other side) (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the
! calculation can be adjusted with SUSP_DIVE_GAIN and SUSP_DIVE_OFFSET. Jounce used
! in the calculation can be adjusted with JNC_SCALE_SUSP_DIVE and
! JNC_START_SUSP_DIVE. Jounce (other side) used in the calculation can be adjusted
! with JNC2_SCALE_SUSP_DIVE and JNC2_START_SUSP_DIVE. The derivative of this function
! is used internally. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

SUSP_DIVE_COEFFICIENT(1,1) 0 ! Coefficient: suspension dive per unit jounce
                             ! (deg/mm), axle 1, left side
SUSP_DIVE_GAIN(1,1) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,1) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,1) MULTIPLY ! How to combine the two components
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,1) 1 ; - ! [D] Constant suspension dive
                                         ! component due to jounce (other side),
                                         ! axle 1, left side

SUSP_DIVE_COEFFICIENT(1,2) 0 ! Coefficient: suspension dive per unit jounce
                             ! (deg/mm), axle 1, right side
SUSP_DIVE_GAIN(1,2) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,2) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,2) MULTIPLY ! How to combine the two components
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,2) 1 ; - ! [D] Constant suspension dive
                                         ! component due to jounce (other side),
                                         ! axle 1, right side

SUSP_DIVE_COEFFICIENT(2,1) 0 ! Coefficient: suspension dive per unit jounce
                             ! (deg/mm), axle 2, left side
SUSP_DIVE_GAIN(2,1) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(2,1) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(2,1) MULTIPLY ! How to combine the two components
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(2,1) 1 ; - ! [D] Constant suspension dive
                                         ! component due to jounce (other side),
                                         ! axle 2, left side

SUSP_DIVE_COEFFICIENT(2,2) 0 ! Coefficient: suspension dive per unit jounce
                             ! (deg/mm), axle 2, right side
SUSP_DIVE_GAIN(2,2) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(2,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(2,2) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(2,2) MULTIPLY ! How to combine the two components
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(2,2) 1 ; - ! [D] Constant suspension dive
                                         ! component due to jounce (other side),
                                         ! axle 2, right side

! SUSP_LAT: Suspension Lateral movement inward of unsteered wheel (measured at zero
! steer). Lateral movement inward of unsteered wheel can be a nonlinear CARPET
! function of jounce (other side) and jounce or a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SUSP_LAT_JNC_OTHER_SIDE of jounce
! (other side) (CONSTANT, COEFFICIENT, or TABLE). Lateral movement inward of
! unsteered wheel from the calculation can be adjusted with SUSP_LAT_GAIN and
! SUSP_LAT_OFFSET. Jounce used in the calculation can be adjusted with
! JNC_SCALE_SUSP_LAT and JNC_START_SUSP_LAT. Jounce (other side) used in the
! calculation can be adjusted with JNC2_SCALE_SUSP_LAT and JNC2_START_SUSP_LAT. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,1) LINEAR ! axle 1, left side
 -50.8, -4.7498
 -48.26, -4.4196
 -45.72, -4.0894
 -43.18, -3.7592
 -40.64, -3.4544
 -38.1, -3.1496
 -35.56, -2.8702
 -33.02, -2.5908
 -30.48, -2.3368
 -27.94, -2.0828
 -25.4, -1.8288
 -22.86, -1.6002
 -20.32, -1.3716
 -17.78, -1.1684
 -15.24, -0.9652
 -12.7, -0.7874
 -10.16, -0.6096
 -7.62, -0.4318
 -5.08, -0.2794
 -2.54, -0.127
 0, 0
 2.54, 0.127
 5.08, 0.2286
 7.62, 0.3302
 10.16, 0.4318
 12.7, 0.508
 15.24, 0.5842
 17.78, 0.6604
 20.32, 0.7112
 22.86, 0.7366
 25.4, 0.762
ENDTABLE
SUSP_LAT_GAIN(1,1)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,1) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; mm ! Constant Lateral movement inward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,2) LINEAR ! axle 1, right side
 -50.8, -4.7498
 -48.26, -4.4196
 -45.72, -4.0894
 -43.18, -3.7592
 -40.64, -3.4544
 -38.1, -3.1496
 -35.56, -2.8702
 -33.02, -2.5908
 -30.48, -2.3368
 -27.94, -2.0828
 -25.4, -1.8288
 -22.86, -1.6002
 -20.32, -1.3716
 -17.78, -1.1684
 -15.24, -0.9652
 -12.7, -0.7874
 -10.16, -0.6096
 -7.62, -0.4318
 -5.08, -0.2794
 -2.54, -0.127
 0, 0
 2.54, 0.127
 5.08, 0.2286
 7.62, 0.3302
 10.16, 0.4318
 12.7, 0.508
 15.24, 0.5842
 17.78, 0.6604
 20.32, 0.7112
 22.86, 0.7366
 25.4, 0.762
ENDTABLE
SUSP_LAT_GAIN(1,2)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,2) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; mm ! Constant Lateral movement inward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), axle 1, right side

SUSP_LAT_COEFFICIENT(2,1) 0 ! Coefficient: Lateral movement inward of unsteered
                            ! wheel per unit jounce (mm/mm), axle 2, left side
SUSP_LAT_GAIN(2,1)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(2,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(2,1) MULTIPLY ! How to combine the two components
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(2,1) 1 ; - ! [D] Constant Lateral movement inward
                                        ! of unsteered wheel component due to
                                        ! jounce (other side), axle 2, left side

SUSP_LAT_COEFFICIENT(2,2) 0 ! Coefficient: Lateral movement inward of unsteered
                            ! wheel per unit jounce (mm/mm), axle 2, right side
SUSP_LAT_GAIN(2,2)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(2,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(2,2) MULTIPLY ! How to combine the two components
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(2,2) 1 ; - ! [D] Constant Lateral movement inward
                                        ! of unsteered wheel component due to
                                        ! jounce (other side), axle 2, right side

! SUSP_X: Suspension X movement forward of unsteered wheel (measured at zero steer).
! X movement forward of unsteered wheel can be a nonlinear CARPET function of jounce
! (other side) and jounce or a function of jounce (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_X_JNC_OTHER_SIDE of jounce (other side) (CONSTANT,
! COEFFICIENT, or TABLE). X movement forward of unsteered wheel from the calculation
! can be adjusted with SUSP_X_GAIN and SUSP_X_OFFSET. Jounce used in the calculation
! can be adjusted with JNC_SCALE_SUSP_X and JNC_START_SUSP_X. Jounce (other side)
! used in the calculation can be adjusted with JNC2_SCALE_SUSP_X and
! JNC2_START_SUSP_X. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

SUSP_X_COEFFICIENT(1,1) 0 ! Coefficient: X movement forward of unsteered wheel per
                          ! unit jounce (mm/mm), axle 1, left side
SUSP_X_GAIN(1,1)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,1)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,1) MULTIPLY ! How to combine the two components
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,1) 1 ; - ! [D] Constant X movement forward of
                                      ! unsteered wheel component due to jounce
                                      ! (other side), axle 1, left side

SUSP_X_COEFFICIENT(1,2) 0 ! Coefficient: X movement forward of unsteered wheel per
                          ! unit jounce (mm/mm), axle 1, right side
SUSP_X_GAIN(1,2)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,2)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,2) MULTIPLY ! How to combine the two components
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,2) 1 ; - ! [D] Constant X movement forward of
                                      ! unsteered wheel component due to jounce
                                      ! (other side), axle 1, right side

SUSP_X_COEFFICIENT(2,1) 0 ! Coefficient: X movement forward of unsteered wheel per
                          ! unit jounce (mm/mm), axle 2, left side
SUSP_X_GAIN(2,1)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(2,1)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(2,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(2,1) MULTIPLY ! How to combine the two components
SUSP_X_JNC_OTHER_SIDE_CONSTANT(2,1) 1 ; - ! [D] Constant X movement forward of
                                      ! unsteered wheel component due to jounce
                                      ! (other side), axle 2, left side

SUSP_X_COEFFICIENT(2,2) 0 ! Coefficient: X movement forward of unsteered wheel per
                          ! unit jounce (mm/mm), axle 2, right side
SUSP_X_GAIN(2,2)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(2,2)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(2,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(2,2) MULTIPLY ! How to combine the two components
SUSP_X_JNC_OTHER_SIDE_CONSTANT(2,2) 1 ; - ! [D] Constant X movement forward of
                                      ! unsteered wheel component due to jounce
                                      ! (other side), axle 2, right side

! THROTTLE_ENGINE: Throttle input (normalized). Normalized throttle input is a
! function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Normalized throttle input from the calculation
! can be adjusted with THROTTLE_ENGINE_GAIN and THROTTLE_ENGINE_OFFSET. Time used in
! the calculation can be adjusted with TSCALE_THROTTLE and TSTART_THROTTLE.

THROTTLE_ENGINE_CONSTANT 0 ; - ! [D] Constant normalized throttle input
THROTTLE_ENGINE_OFFSET 0 ; - ! Offset added (after gain) to get normalized throttle
                         ! input

! TOE: Suspension toe (measured at zero steer). Toe can be a nonlinear CARPET
! function of jounce (other side) and jounce or a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SUSP_TOE_JNC_OTHER_SIDE of jounce
! (other side) (CONSTANT, COEFFICIENT, or TABLE). Toe from the calculation can be
! adjusted with TOE_GAIN and TOE_OFFSET. Jounce used in the calculation can be
! adjusted with JNC_SCALE_TOE and JNC_START_TOE. Jounce (other side) used in the
! calculation can be adjusted with JNC2_SCALE_TOE and JNC2_START_TOE. The derivative
! of this function is used internally. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

TOE_COEFFICIENT(1,1) 0 ! Coefficient: toe per unit jounce (deg/mm), axle 1, left
                       ! side
TOE_GAIN(1,1)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,1)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,1)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,1)  1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,1) MULTIPLY ! How to combine the two components
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,1) 1 ; - ! [D] Constant toe component due to
                                        ! jounce (other side), axle 1, left side

TOE_COEFFICIENT(1,2) 0 ! Coefficient: toe per unit jounce (deg/mm), axle 1, right
                       ! side
TOE_GAIN(1,2)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,2)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,2)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,2)  1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,2) MULTIPLY ! How to combine the two components
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,2) 1 ; - ! [D] Constant toe component due to
                                        ! jounce (other side), axle 1, right side

TOE_COEFFICIENT(2,1) 0 ! Coefficient: toe per unit jounce (deg/mm), axle 2, left
                       ! side
TOE_GAIN(2,1)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(2,1)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(2,1)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(2,1)  1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(2,1) MULTIPLY ! How to combine the two components
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(2,1) 1 ; - ! [D] Constant toe component due to
                                        ! jounce (other side), axle 2, left side

TOE_COEFFICIENT(2,2) 0 ! Coefficient: toe per unit jounce (deg/mm), axle 2, right
                       ! side
TOE_GAIN(2,2)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(2,2)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(2,2)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(2,2)  1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(2,2) MULTIPLY ! How to combine the two components
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(2,2) 1 ; - ! [D] Constant toe component due to
                                        ! jounce (other side), axle 2, right side

! TPREV: Driver preview time. Preview time is a function of vehicle speed (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Preview time from the calculation can be adjusted with TPREV_GAIN and TPREV_OFFSET.
! Vehicle speed used in the calculation can be adjusted with VX_SCALE_TPREV and
! VX_START_TPREV.

TPREV_CONSTANT      1 ; s ! Constant preview time
TPREV_GAIN          1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET        0 ; s ! Offset added (after gain) to get preview time

! VOC_BATTERY: Battery pack open-circuit voltage. Open-circuit voltage can be a
! nonlinear CARPET function of Temperature and Battery level state of charge or a
! function of Battery level state of charge (CONSTANT, COEFFICIENT, or TABLE)
! multiplied by a function VOC_BATTERY_TEMP of Temperature (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Open-circuit
! voltage from the calculation can be adjusted with VOC_BATTERY_GAIN and
! VOC_BATTERY_OFFSET. Battery level state of charge used in the calculation can be
! adjusted with SOC_SCALE_VOC_BATTERY and SOC_START_VOC_BATTERY. Temperature used in
! the calculation can be adjusted with TEMP_SCALE_VOC_BATTERY and
! TEMP_START_VOC_BATTERY.

! 2D table: row 1 has "0" (place holder) followed by 2 values of Temperature (C).
! Other rows have Battery level state of charge (-) followed by 2 values of
! Open-circuit voltage (V).
VOC_BATTERY_CARPET 2D_LINEAR
 0, 0, 25
 0, 7.237, 7.237
 0.1, 7.4047, 7.4047
 0.2, 7.5106, 7.5106
 0.3, 7.5873, 7.5873
 0.4, 7.6459, 7.6459
 0.5, 7.6909, 7.6909
 0.6, 7.7294, 7.7294
 0.7, 7.7666, 7.7666
 0.8, 7.8078, 7.8078
 0.9, 7.9143, 7.9143
 1, 8.3645, 8.3645
ENDTABLE
VOC_BATTERY_GAIN    1 ! Gain multiplied with calculated value to get Open-circuit
                      ! voltage
VOC_BATTERY_OFFSET  0 ; V ! Offset added (after gain) to get Open-circuit voltage
SOC_START_VOC_BATTERY 0 ; - ! Offset subtracted from Battery level state of charge
SOC_SCALE_VOC_BATTERY 1 ! Scale factor divided into (Battery level state of charge -
                        ! SOC_START_VOC_BATTERY)
TEMP_START_VOC_BATTERY 0 ; C ! Offset subtracted from Temperature
TEMP_SCALE_VOC_BATTERY 1 ! Scale factor divided into (Temperature -
                         ! TEMP_START_VOC_BATTERY)

! WIND_HEADING: Wind heading (yaw) relative to global X. When vehicle yaw is zero,
! then 0 deg -> tailwind, 90 deg -> from right, 180 deg -> headwind. Heading can be a
! nonlinear CARPET function of station and time or a function of time (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function WIND_HEADING_S of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Heading from the calculation can be adjusted with WIND_HEADING_GAIN and
! WIND_HEADING_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_WIND_HD and TSTART_WIND_HD. Station used in the calculation can be adjusted
! with SSCALE_WIND_HD and SSTART_WIND_HD.

WIND_HEADING_CONSTANT 0 ; deg ! [D] Constant heading component due to time
WIND_HEADING_GAIN   1 ! Gain multiplied with calculated value to get heading
WIND_HEADING_OFFSET 0 ; deg ! Offset added (after gain) to get heading
WIND_HEADING_COMBINE MULTIPLY ! How to combine the two components
WIND_HEADING_S_CONSTANT 1 ; - ! [D] Constant heading component due to station

! WIND_SPEED: Absolute wind speed. Wind speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function WIND_SPEED_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Wind speed from the
! calculation can be adjusted with WIND_SPEED_GAIN and WIND_SPEED_OFFSET. Time used
! in the calculation can be adjusted with TSCALE_WIND and TSTART_WIND. Station used
! in the calculation can be adjusted with SSCALE_WIND and SSTART_WIND.

WIND_SPEED_CONSTANT 0 ; km/h ! [D] Constant wind speed component due to time
WIND_SPEED_GAIN     1 ! Gain multiplied with calculated value to get wind speed
WIND_SPEED_OFFSET   0 ; km/h ! Offset added (after gain) to get wind speed
WIND_SPEED_COMBINE MULTIPLY ! How to combine the two components
WIND_SPEED_S_CONSTANT 1 ; - ! [D] Constant wind speed component due to station

! Z_PROFILE: "Wandering profile" (roughness input). Elevation increment is a
! function of distance travelled (CONSTANT or TABLE). Elevation increment from the
! calculation can be adjusted with Z_PROFILE_GAIN and Z_PROFILE_OFFSET. Distance
! travelled used in the calculation can be adjusted with SSCALE_Z_PROFILE and
! SSTART_Z_PROFILE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISIDE is used to identify the dataset
! when reading data.

! 1D table: col 1 = distance travelled (m), col 2 = elevation increment (mm)
Z_PROFILE_TABLE(1) LINEAR_LOOP ! linear interpolation, repeat in loop
 0, 0
 50, 0
 100, 0
 150, 0
 200, 0
ENDTABLE
Z_PROFILE_GAIN(1)   1 ! Gain multiplied with calculated value to get elevation
                      ! increment
Z_PROFILE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get elevation increment
SSTART_Z_PROFILE(1) 0 ; m ! Offset subtracted from distance travelled
SSCALE_Z_PROFILE(1) 1 ! Scale factor divided into (distance travelled -
                      ! SSTART_Z_PROFILE)

! 1D table: col 1 = distance travelled (m), col 2 = elevation increment (mm)
Z_PROFILE_TABLE(2) LINEAR_LOOP ! linear interpolation, repeat in loop
 0, 0
 50, 0
 100, 0
 150, 0
 200, 0
ENDTABLE
Z_PROFILE_GAIN(2)   1 ! Gain multiplied with calculated value to get elevation
                      ! increment
Z_PROFILE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get elevation increment
SSTART_Z_PROFILE(2) 0 ; m ! Offset subtracted from distance travelled
SSCALE_Z_PROFILE(2) 1 ! Scale factor divided into (distance travelled -
                      ! SSTART_Z_PROFILE)

!------------------------------------------------------------------------------------
! INITIALIZATION EQUATIONS (APPLIED JUST AFTER INITIALIZATION)
!------------------------------------------------------------------------------------
EQ_INIT HEADO_1 = 0;
EQ_INIT S_OBJ_1 = -15;
EQ_INIT V_OBJ_1 = 0;
EQ_INIT HEADO_2 = 0;
EQ_INIT S_OBJ_2 = -7.5;
EQ_INIT V_OBJ_2 = 0;
EQ_INIT HEADO_3 = 0;
EQ_INIT S_OBJ_3 = 0;
EQ_INIT V_OBJ_3 = 0;
EQ_INIT HEADO_4 = 0;
EQ_INIT S_OBJ_4 = 7.5;
EQ_INIT V_OBJ_4 = 0;
EQ_INIT HEADO_5 = 0;
EQ_INIT S_OBJ_5 = 15;
EQ_INIT V_OBJ_5 = 0;
EQ_INIT HEADO_6 = 0;
EQ_INIT S_OBJ_6 = 22.5;
EQ_INIT V_OBJ_6 = 0;
EQ_INIT HEADO_7 = 0;
EQ_INIT S_OBJ_7 = 30;
EQ_INIT V_OBJ_7 = 0;
EQ_INIT HEADO_8 = 0;
EQ_INIT S_OBJ_8 = 37.5;
EQ_INIT V_OBJ_8 = 0;
EQ_INIT HEADO_9 = 0;
EQ_INIT S_OBJ_9 = 45;
EQ_INIT V_OBJ_9 = 0;
EQ_INIT HEADO_10 = 0;
EQ_INIT S_OBJ_10 = 52.5;
EQ_INIT V_OBJ_10 = 0;
EQ_INIT HEADO_11 = 0;
EQ_INIT S_OBJ_11 = 60;
EQ_INIT V_OBJ_11 = 0;
EQ_INIT HEADO_12 = 0;
EQ_INIT S_OBJ_12 = -15;
EQ_INIT V_OBJ_12 = 0;
EQ_INIT HEADO_13 = 0;
EQ_INIT S_OBJ_13 = -7.5;
EQ_INIT V_OBJ_13 = 0;
EQ_INIT HEADO_14 = 0;
EQ_INIT S_OBJ_14 = 0;
EQ_INIT V_OBJ_14 = 0;
EQ_INIT HEADO_15 = 0;
EQ_INIT S_OBJ_15 = 7.5;
EQ_INIT V_OBJ_15 = 0;
EQ_INIT HEADO_16 = 0;
EQ_INIT S_OBJ_16 = 15;
EQ_INIT V_OBJ_16 = 0;
EQ_INIT HEADO_17 = 0;
EQ_INIT S_OBJ_17 = 22.5;
EQ_INIT V_OBJ_17 = 0;
EQ_INIT HEADO_18 = 0;
EQ_INIT S_OBJ_18 = 30;
EQ_INIT V_OBJ_18 = 0;
EQ_INIT HEADO_19 = 0;
EQ_INIT S_OBJ_19 = 37.5;
EQ_INIT V_OBJ_19 = 0;
EQ_INIT HEADO_20 = 0;
EQ_INIT S_OBJ_20 = 45;
EQ_INIT V_OBJ_20 = 0;
EQ_INIT HEADO_21 = 0;
EQ_INIT S_OBJ_21 = 52.5;
EQ_INIT V_OBJ_21 = 0;
EQ_INIT HEADO_22 = 0;
EQ_INIT S_OBJ_22 = 60;
EQ_INIT V_OBJ_22 = 0;
EQ_INIT ROAD_ID_OBJ(23) = CURRENT_ROAD_ID;
EQ_INIT ROAD_ID_OBJ(24) = CURRENT_ROAD_ID;
EQ_INIT ROAD_ID_OBJ(25) = CURRENT_ROAD_ID;
EQ_INIT ROAD_ID_OBJ(26) = CURRENT_ROAD_ID;
EQ_INIT ROAD_ID_OBJ(27) = CURRENT_ROAD_ID;
EQ_INIT ROAD_ID_OBJ(28) = CURRENT_ROAD_ID;
EQ_INIT ROAD_ID_OBJ(29) = CURRENT_ROAD_ID;
EQ_INIT ROAD_ID_OBJ(30) = CURRENT_ROAD_ID;
EQ_INIT ROAD_ID_OBJ(31) = CURRENT_ROAD_ID;
EQ_INIT ROAD_ID_OBJ(32) = CURRENT_ROAD_ID;

!------------------------------------------------------------------------------------
! EQUATIONS IN (AT THE START OF EVERY TIME STEP)
!------------------------------------------------------------------------------------
EQ_IN LATO_1 = 2;
EQ_IN LATO_2 = 2;
EQ_IN LATO_3 = 2;
EQ_IN LATO_4 = 2;
EQ_IN LATO_5 = 2;
EQ_IN LATO_6 = 2;
EQ_IN LATO_7 = 2;
EQ_IN LATO_8 = 2;
EQ_IN LATO_9 = 2;
EQ_IN LATO_10 = 2;
EQ_IN LATO_11 = 2;
EQ_IN LATO_12 = -2;
EQ_IN LATO_13 = -2;
EQ_IN LATO_14 = -2;
EQ_IN LATO_15 = -2;
EQ_IN LATO_16 = -2;
EQ_IN LATO_17 = -2;
EQ_IN LATO_18 = -2;
EQ_IN LATO_19 = -2;
EQ_IN LATO_20 = -2;
EQ_IN LATO_21 = -2;
EQ_IN LATO_22 = -2;

!------------------------------------------------------------------------------------
! EQUATIONS OUT (AT THE END OF EVERY TIME STEP)
!------------------------------------------------------------------------------------
EQ_OUT V_OBJ_1 = 0;
EQ_OUT V_OBJ_2 = 0;
EQ_OUT V_OBJ_3 = 0;
EQ_OUT V_OBJ_4 = 0;
EQ_OUT V_OBJ_5 = 0;
EQ_OUT V_OBJ_6 = 0;
EQ_OUT V_OBJ_7 = 0;
EQ_OUT V_OBJ_8 = 0;
EQ_OUT V_OBJ_9 = 0;
EQ_OUT V_OBJ_10 = 0;
EQ_OUT V_OBJ_11 = 0;
EQ_OUT V_OBJ_12 = 0;
EQ_OUT V_OBJ_13 = 0;
EQ_OUT V_OBJ_14 = 0;
EQ_OUT V_OBJ_15 = 0;
EQ_OUT V_OBJ_16 = 0;
EQ_OUT V_OBJ_17 = 0;
EQ_OUT V_OBJ_18 = 0;
EQ_OUT V_OBJ_19 = 0;
EQ_OUT V_OBJ_20 = 0;
EQ_OUT V_OBJ_21 = 0;
EQ_OUT V_OBJ_22 = 0;
EQ_OUT X_OBJ_23 = X_DM_1;
EQ_OUT Y_OBJ_23 = Y_DM_1;
EQ_OUT X_OBJ_24 = X_DM_2;
EQ_OUT Y_OBJ_24 = Y_DM_2;
EQ_OUT X_OBJ_25 = X_DM_3;
EQ_OUT Y_OBJ_25 = Y_DM_3;
EQ_OUT X_OBJ_26 = X_DM_4;
EQ_OUT Y_OBJ_26 = Y_DM_4;
EQ_OUT X_OBJ_27 = X_DM_5;
EQ_OUT Y_OBJ_27 = Y_DM_5;
EQ_OUT X_OBJ_28 = X_DM_6;
EQ_OUT Y_OBJ_28 = Y_DM_6;
EQ_OUT X_OBJ_29 = X_DM_7;
EQ_OUT Y_OBJ_29 = Y_DM_7;
EQ_OUT X_OBJ_30 = X_DM_8;
EQ_OUT Y_OBJ_30 = Y_DM_8;
EQ_OUT X_OBJ_31 = X_DM_9;
EQ_OUT Y_OBJ_31 = Y_DM_9;
EQ_OUT X_OBJ_32 = X_DM_10;
EQ_OUT Y_OBJ_32 = Y_DM_10;

!------------------------------------------------------------------------------------
! IMPORTED VARIABLES, RELATIONS TO NATIVE VARIABLES, INITIAL VALUES, and UNITS
!------------------------------------------------------------------------------------
IMPORT IMP_THROTTLE_ENGINE ADD 0 ; - ! #1. Open loop throttle control
IMPORT IMP_PCON_BK ADD 0 ; MPa ! #2. Brake master cylinder pressure
IMPORT IMP_MY0_L1 ADD 0 ; N-m ! #3. Spin moment at wheel center from tire
IMPORT IMP_MY0_R1 ADD 0 ; N-m ! #4. Spin moment at wheel center from tire
IMPORT IMP_MY0_L2 ADD 0 ; N-m ! #5. Spin moment at wheel center from tire
IMPORT IMP_MY0_R2 ADD 0 ; N-m ! #6. Spin moment at wheel center from tire
IMPORT IMP_STEER_RACK_CON_L1 ADD 0 ; mm ! #7. Steering rack position for wheel L1
                                   ! (input to nonlinear steering kinematics table)
                                   ! from external model
IMPORT IMP_STEER_RACK_CON_R1 ADD 0 ; mm ! #8. Steering rack position for wheel R1
                                   ! (input to nonlinear steering kinematics table)
                                   ! from external model
IMPORT IMP_STEER_RACK_CON_L2 ADD 0 ; mm ! #9. Steering rack position for wheel L2
                                   ! (input to nonlinear steering kinematics table)
                                   ! from external model
IMPORT IMP_STEER_RACK_CON_R2 ADD 0 ; mm ! #10. Steering rack position for wheel R2
                                   ! (input to nonlinear steering kinematics table)
                                   ! from external model

!------------------------------------------------------------------------------------
! EXPORTED VARIABLES
!------------------------------------------------------------------------------------
EXPORT XO           0 ! #1. X coordinate, vehicle origin (m)
EXPORT YO           0 ! #2. Y coordinate, vehicle origin (m)
EXPORT ZO -0.01701116924 ! #3. Z coordinate, vehicle origin (m)
EXPORT ROLL         0 ! #4. Roll, vehicle (deg)
EXPORT PITCH -0.1307475066 ! #5. Pitch, vehicle (deg)
EXPORT YAW          0 ! #6. Yaw, vehicle (deg)
EXPORT VX          18 ! #7. Long. speed, inst. CG, vehicle (km/h)
EXPORT VY           0 ! #8. Lat. speed, inst. CG, vehicle (km/h)
EXPORT VZ 6.245004514e-18 ! #9. Vert. speed, inst. CG, vehicle (km/h)
EXPORT AVX          0 ! #10. Roll rate (body-fixed), vehicle (deg/s)
EXPORT AVY          0 ! #11. Pitch rate (body-fixed), vehicle (deg/s)
EXPORT AVZ          0 ! #12. Yaw rate (body-fixed), vehicle (deg/s)
EXPORT AX -0.002004553882 ! #13. Long. accel., inst. CG, vehicle (g)
EXPORT AY 5.909083511e-07 ! #14. Lat. accel., inst. CG, vehicle (g)
EXPORT AZ -0.01619479949 ! #15. Vert. accel., inst. CG, vehicle (g)
EXPORT AAX -1.614575094e-05 ! #16. Roll acc. (body-fixed), vehicle (rad/s2)
EXPORT AAY 0.0525390706 ! #17. Pitch acc. (body-fixed), vehicle (rad/s2)
EXPORT AAZ 8.300017518e-08 ! #18. Yaw acc. (body-fixed), vehicle (rad/s2)
EXPORT STEER_DM     0 ! #19. Steer angle from DM controller (deg)
EXPORT STEER_SW     0 ! #20. Steering wheel angle (deg)
EXPORT STRAV_SW     0 ! #21. Steering wheel angular rate (deg/s)
EXPORT JNC_L1 15.50286925 ! #22. Wheel L1 jounce (compression) (mm)
EXPORT JNC_R1 15.50286925 ! #23. Wheel R1 jounce (compression) (mm)
EXPORT JNC_L2 18.70570416 ! #24. Wheel L2 jounce (compression) (mm)
EXPORT JNC_R2 18.70570416 ! #25. Wheel R2 jounce (compression) (mm)
EXPORT CMPS_L1 30.26160077 ! #26. Compression of ride spring L1 (mm)
EXPORT CMPS_R1 30.26160077 ! #27. Compression of ride spring R1 (mm)
EXPORT CMPS_L2 34.53479098 ! #28. Compression of ride spring L2 (mm)
EXPORT CMPS_R2 34.53479098 ! #29. Compression of ride spring R2 (mm)
EXPORT CMPD_L1 9.456750241 ! #30. Compression of damper L1 (mm)
EXPORT CMPD_R1 9.456750241 ! #31. Compression of damper R1 (mm)
EXPORT CMPD_L2 11.6910651 ! #32. Compression of damper L2 (mm)
EXPORT CMPD_R2 11.6910651 ! #33. Compression of damper R2 (mm)
EXPORT CMPRD_L1     0 ! #34. Compression rate for damper L1 (mm/s)
EXPORT CMPRD_R1     0 ! #35. Compression rate for damper R1 (mm/s)
EXPORT CMPRD_L2     0 ! #36. Compression rate for damper L2 (mm/s)
EXPORT CMPRD_R2     0 ! #37. Compression rate for damper R2 (mm/s)
EXPORT KAPPA_L1 4.546821012e-07 ! #38. Longitudinal slip, tire L1 (-)
EXPORT KAPPA_R1 4.219070347e-07 ! #39. Longitudinal slip, tire R1 (-)
EXPORT KAPPA_L2 3.403470943e-07 ! #40. Longitudinal slip, tire L2 (-)
EXPORT KAPPA_R2 3.698511652e-07 ! #41. Longitudinal slip, tire R2 (-)
EXPORT ALPHA_L1 -0.05463758274 ! #42. Lateral slip angle, tire L1 (deg)
EXPORT ALPHA_R1 0.05263152299 ! #43. Lateral slip angle, tire R1 (deg)
EXPORT ALPHA_L2 0.04727141391 ! #44. Lateral slip angle, tire L2 (deg)
EXPORT ALPHA_R2 -0.04927777146 ! #45. Lateral slip angle, tire R2 (deg)
EXPORT STEER_L1 0.05102230612 ! #46. Wheel steer L1 (deg)
EXPORT STEER_R1 -0.04901592107 ! #47. Wheel steer R1 (deg)
EXPORT STEER_L2 -0.04900103434 ! #48. Wheel steer L2 (deg)
EXPORT STEER_R2 0.05100771573 ! #49. Wheel steer R2 (deg)
EXPORT VX_WC_L1 17.99994491 ! #50. Vx at wheel center L1 (km/h)
EXPORT VX_WC_R1 17.99994567 ! #51. Vx at wheel center R1 (km/h)
EXPORT VX_WC_L2 17.99994693 ! #52. Vx at wheel center L2 (km/h)
EXPORT VX_WC_R2 17.99994657 ! #53. Vx at wheel center R2 (km/h)
EXPORT VY_WC_L1 -0.01715834264 ! #54. Vy at wheel center L1 (km/h)
EXPORT VY_WC_R1 0.01652836028 ! #55. Vy at wheel center R1 (km/h)
EXPORT VY_WC_L2 0.01484945153 ! #56. Vy at wheel center L2 (km/h)
EXPORT VY_WC_R2 -0.01547971146 ! #57. Vy at wheel center R2 (km/h)
EXPORT VZ_WC_L1 -0.04109709805 ! #58. Vz at wheel center L1 (km/h)
EXPORT VZ_WC_R1 -0.04102252004 ! #59. Vz at wheel center R1 (km/h)
EXPORT VZ_WC_L2 -0.0411078223 ! #60. Vz at wheel center L2 (km/h)
EXPORT VZ_WC_R2 -0.0410360005 ! #61. Vz at wheel center R2 (km/h)
EXPORT AVY_L1 183.640319 ! #62. Wheel L1 spin (rpm)
EXPORT AVY_R1 183.640319 ! #63. Wheel R1 spin (rpm)
EXPORT AVY_L2 183.640319 ! #64. Wheel L2 spin (rpm)
EXPORT AVY_R2 183.640319 ! #65. Wheel R2 spin (rpm)
EXPORT FX_L1 0.0007898946354 ! #66. Longitudinal force, tire L1 (N)
EXPORT FX_R1 0.000733479927 ! #67. Longitudinal force, tire R1 (N)
EXPORT FX_L2 7.260667708e-07 ! #68. Longitudinal force, tire L2 (N)
EXPORT FX_R2 7.260686084e-07 ! #69. Longitudinal force, tire R2 (N)
EXPORT FY_L1 -12.67293383 ! #70. Lateral force, tire L1 (N)
EXPORT FY_R1 12.67358947 ! #71. Lateral force, tire R1 (N)
EXPORT FY_L2 -6.898665959 ! #72. Lateral force, tire L2 (N)
EXPORT FY_R2 6.89974562 ! #73. Lateral force, tire R2 (N)
EXPORT FZ_L1 681.0069159 ! #74. Vertical force, tire L1 (N)
EXPORT FZ_R1 680.9806602 ! #75. Vertical force, tire R1 (N)
EXPORT FZ_L2 772.1102984 ! #76. Vertical force, tire L2 (N)
EXPORT FZ_R2 772.0845291 ! #77. Vertical force, tire R2 (N)
EXPORT MY_DR_L1     0 ! #78. Total drive moment for wheel L1 (N-m)
EXPORT MY_BK_L1  -0.5 ! #79. Brake moment L1 (N-m)
EXPORT MY_DR_R1     0 ! #80. Total drive moment for wheel R1 (N-m)
EXPORT MY_BK_R1  -0.5 ! #81. Brake moment R1 (N-m)
EXPORT MY_DR_L2     0 ! #82. Total drive moment for wheel L2 (N-m)
EXPORT MY_BK_L2  -0.5 ! #83. Brake moment L2 (N-m)
EXPORT MY_DR_R2     0 ! #84. Total drive moment for wheel R2 (N-m)
EXPORT MY_BK_R2  -0.5 ! #85. Brake moment R2 (N-m)
EXPORT M_ENGOUT     0 ! #86. Engine crankshaft output torque (N-m)
EXPORT STATION      0 ! #87. Station (path) at vehicle origin (m)
EXPORT X_DESIGN     0 ! #88. X coordinate of reference path (m)
EXPORT Y_DESIGN     0 ! #89. Y coordinate of reference path (m)
EXPORT ROLLPATH     0 ! #90. Roll at ground on driver path (deg)
EXPORT PTCHPATH     0 ! #91. Pitch at ground on driver path (deg)
EXPORT RHO_ROAD     0 ! #92. Curvature of road X-Y ref. path (1/m)
EXPORT L_DRV_1      0 ! #93. Lat dist to target point 1 (m)
EXPORT L_DRV_2      0 ! #94. Lat dist to target point 2 (m)
EXPORT L_DRV_3 -0.03861529587 ! #95. Lat dist to target point 3 (m)
EXPORT L_DRV_4 -0.03861529587 ! #96. Lat dist to target point 4 (m)
EXPORT L_DRV_5 -0.03861529587 ! #97. Lat dist to target point 5 (m)
EXPORT A_DRV_1      0 ! #98. Driver pt 1 error area (m2)
EXPORT A_DRV_2      0 ! #99. Driver pt 2 error area (m2)
EXPORT A_DRV_3 0.03475376629 ! #100. Driver pt 3 error area (m2)
EXPORT A_DRV_4 0.06564600299 ! #101. Driver pt 4 error area (m2)
EXPORT A_DRV_5 0.07723059175 ! #102. Driver pt 5 error area (m2)
EXPORT ID_S1_1     15 ! #103. Sensor 1 ID number, detect 1 (-)
EXPORT BRLS1_1 -13.51631835 ! #104. Sensor 1 bearing (L), detect 1 (deg)
EXPORT BRCS1_1 -15.42111987 ! #105. Sensor 1 bearing (C), detect 1 (deg)
EXPORT BRRS1_1 -17.32592139 ! #106. Sensor 1 bearing (R), detect 1 (deg)
EXPORT DSLS1_1 7.517143958 ! #107. Sensor 1 dist. (L), detect 1 (m)
EXPORT DISS1_1 7.271410435 ! #108. Sensor 1 distance, detect 1 (m)
EXPORT DSRS1_1 7.517144048 ! #109. Sensor 1 dist. (R), detect 1 (m)
EXPORT SPDS1_1      0 ! #110. Sensor 1 speed, detect 1 (km/h)


END
